import{_ as o}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as p,c,a as n,b as s,e,f as t,r}from"./app.66989759.js";const i={},l=n("h1",{id:"nest",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#nest","aria-hidden":"true"},"#"),s(" nest")],-1),d={href:"https://nest.nodejs.cn/providers",target:"_blank",rel:"noopener noreferrer"},u=t(`<h2 id="创建项目" tabindex="-1"><a class="header-anchor" href="#创建项目" aria-hidden="true">#</a> 创建项目</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> i <span class="token parameter variable">-g</span> @nestjs/cli
$ nest new project-name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>项目核心文件的简要概述：</p><table><thead><tr><th><code>app.controller.ts</code></th><th>具有单一路由的基本控制器。</th></tr></thead><tbody><tr><td><code>app.controller.spec.ts</code></td><td>控制器的单元测试。</td></tr><tr><td><code>app.module.ts</code></td><td>应用的根模块。</td></tr><tr><td><code>app.service.ts</code></td><td>具有单一方法的基本服务。</td></tr><tr><td><code>main.ts</code></td><td>使用核心函数 <code>NestFactory</code> 创建 Nest 应用实例的应用入口文件。</td></tr></tbody></table>`,4),k={id:"运行应用",tabindex:"-1"},v=n("a",{class:"header-anchor",href:"#运行应用","aria-hidden":"true"},"#",-1),m={href:"https://nest.nodejs.cn/first-steps#%E8%BF%90%E8%A1%8C%E5%BA%94%E7%94%A8",target:"_blank",rel:"noopener noreferrer"},h=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> run start
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),b=n("code",null,"-b swc",-1),g=n("code",null,"start",-1),y={href:"https://nest.nodejs.cn/recipes/swc",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"npm run start -- -b swc",-1),_=t(`<p>注意：使用 <code>npm run start -- -b swc</code> 需要下载相关依赖</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#要监视文件中的更改，此命令将监视你的文件，自动重新编译并重新加载服务器。  (推荐)</span>

$ <span class="token function">npm</span> run start:dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="增删改查生成器-仅限-typescript" tabindex="-1"><a class="header-anchor" href="#增删改查生成器-仅限-typescript" aria-hidden="true">#</a> 增删改查生成器（仅限 TypeScript）</h2>`,3),x={href:"https://nest.nodejs.cn/recipes/crud-generator#%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E7%94%9F%E6%88%90%E5%99%A8%EF%BC%88%E4%BB%85%E9%99%90-typescript%EF%BC%89",target:"_blank",rel:"noopener noreferrer"},q=t(`<h2 id="controller" tabindex="-1"><a class="header-anchor" href="#controller" aria-hidden="true">#</a> controller</h2><h3 id="快速生成资源" tabindex="-1"><a class="header-anchor" href="#快速生成资源" aria-hidden="true">#</a> 快速生成资源</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>nest g resource [name]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="请求参数获取" tabindex="-1"><a class="header-anchor" href="#请求参数获取" aria-hidden="true">#</a> 请求参数获取</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Controller<span class="token punctuation">,</span> Get<span class="token punctuation">,</span> Req <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/common&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Request <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;express&#39;</span><span class="token punctuation">;</span>   

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Controller</span></span><span class="token punctuation">(</span><span class="token string">&#39;cats&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">CatsController</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Get</span></span><span class="token punctuation">(</span><span class="token string">&#39;list&#39;</span><span class="token punctuation">)</span>
  <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Req</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> request<span class="token operator">:</span> Request<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&#39;This action returns all cats&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示 : 为了利用 <code>express</code> 类型（如上面的 <code>request: Request</code> 参数示例），请安装 <code>@types/express</code> 软件包</strong></p><p>@Req 返回的内容太多，可以使用开箱即用的专用装饰器，例如 <code>@Body()</code> 或 <code>@Query()</code>。下面是提供的装饰器列表和它们代表的普通平台特定对象。</p><table><thead><tr><th><code>@Request(), @Req()</code></th><th><code>req</code></th></tr></thead><tbody><tr><td><code>@Response(), @Res()</code>*****</td><td><code>res</code></td></tr><tr><td><code>@Next()</code></td><td><code>next</code></td></tr><tr><td><code>@Session()</code></td><td><code>req.session</code></td></tr><tr><td><code>@Param(key?: string)</code></td><td><code>req.params</code> / <code>req.params[key]</code></td></tr><tr><td><code>@Body(key?: string)</code></td><td><code>req.body</code> / <code>req.body[key]</code></td></tr><tr><td><code>@Query(key?: string)</code></td><td><code>req.query</code> / <code>req.query[key]</code></td></tr><tr><td><code>@Headers(name?: string)</code></td><td><code>req.headers</code> / <code>req.headers[name]</code></td></tr><tr><td><code>@Ip()</code></td><td><code>req.ip</code></td></tr><tr><td><code>@HostParam()</code></td><td><code>req.hosts</code></td></tr></tbody></table><p>示例： @Query()</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Controller<span class="token punctuation">,</span> Get<span class="token punctuation">,</span> Query <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/common&#39;</span><span class="token punctuation">;</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Controller</span></span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Get</span></span><span class="token punctuation">(</span><span class="token string">&#39;list&#39;</span><span class="token punctuation">)</span>
  <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Query</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> query<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 访问：http://localhost:3000/user/list?a=1&amp;b=2</span>
<span class="token comment">// 返回  { a: &#39;1&#39;, b: &#39;2&#39; }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="路由参数" tabindex="-1"><a class="header-anchor" href="#路由参数" aria-hidden="true">#</a> 路由参数</h3><p><strong>提示从 <code>@nestjs/common</code> 包中导入 <code>Param</code>。</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Get</span></span><span class="token punctuation">(</span><span class="token string">&#39;:id&#39;</span><span class="token punctuation">)</span>
<span class="token function">findOne</span><span class="token punctuation">(</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Param</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> params<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">This action returns a #</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>params<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> cat</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Get</span></span><span class="token punctuation">(</span><span class="token string">&#39;:id&#39;</span><span class="token punctuation">)</span>
<span class="token function">findOne</span><span class="token punctuation">(</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Param</span></span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span> id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">This action returns a #</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> cat</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="异步性" tabindex="-1"><a class="header-anchor" href="#异步性" aria-hidden="true">#</a> 异步性</h3><p>数据提取大多是异步的。这就是 Nest 支持 <code>async</code> 功能并与它配合使用的原因。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Get</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">async</span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17),w={href:"http://reactivex.io/rxjs/class/es6/Observable.js~Observable.html",target:"_blank",rel:"noopener noreferrer"},E=t(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Get</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Observable<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">of</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="providers-service" tabindex="-1"><a class="header-anchor" href="#providers-service" aria-hidden="true">#</a> Providers（service）</h2><h3 id="快速创建providers" tabindex="-1"><a class="header-anchor" href="#快速创建providers" aria-hidden="true">#</a> 快速创建Providers</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ nest g service [name]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="mysql数据库连接" tabindex="-1"><a class="header-anchor" href="#mysql数据库连接" aria-hidden="true">#</a> mysql数据库连接</h2>`,5),j={href:"https://nest.nodejs.cn/techniques/database#%E6%95%B0%E6%8D%AE%E5%BA%93",target:"_blank",rel:"noopener noreferrer"},B={href:"https://typeorm.bootcss.com/",target:"_blank",rel:"noopener noreferrer"},A=n("div",{class:"language-text line-numbers-mode","data-ext":"text"},[n("pre",{class:"language-text"},[n("code",null,`$ npm install --save @nestjs/typeorm typeorm mysql2
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1);function C(R,N){const a=r("ExternalLinkIcon");return p(),c("div",null,[l,n("p",null,[n("a",d,[s("https://nest.nodejs.cn/providers"),e(a)])]),u,n("h2",k,[v,s(" 运行应用"),n("a",m,[s("#"),e(a)])]),h,n("p",null,[s("为了加快开发过程（构建速度加快 20 倍），你可以通过将 "),b,s(" 标志传递给 "),g,s(" 脚本来使用 "),n("a",y,[s("SWC 构建器"),e(a)]),s("，如下所示 "),f,s("。")]),_,n("p",null,[n("a",x,[s("https://nest.nodejs.cn/recipes/crud-generator#增删改查生成器（仅限-typescript）"),e(a)])]),q,n("p",null,[s("上面的代码是完全有效的。此外，Nest 路由处理程序更强大，因为它能够返回 RxJS "),n("a",w,[s("可观察流"),e(a)]),s("。Nest 将自动订阅下面的源并获取最后触发的值（一旦流完成）。")]),E,n("p",null,[n("a",j,[s("https://nest.nodejs.cn/techniques/database#数据库"),e(a)])]),n("p",null,[s("TypeORM："),n("a",B,[s("https://typeorm.bootcss.com/"),e(a)])]),A])}const $=o(i,[["render",C],["__file","nest.html.vue"]]);export{$ as default};
