import{_ as p}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c as l,a as n,b as s,e,f as t,r as c}from"./app.8415b7e3.js";const i="/blog/202310202206615.png",u={},r=n("h1",{id:"springcloud-alibaba",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#springcloud-alibaba","aria-hidden":"true"},"#"),s(" springCloud(Alibaba）")],-1),d={href:"https://www.bilibili.com/video/BV1fe4y1b7ha?p=4&vd_source=f25f5a8d75a3a60d5a288f726803ec11",target:"_blank",rel:"noopener noreferrer"},k={href:"https://pan.baidu.com/s/1LxIxcHDO7SYB96SE-GZfuQ?pwd=dor4#list/path=%2F",target:"_blank",rel:"noopener noreferrer"},v={href:"https://blog.csdn.net/qq_43663493/category_11461587.html",target:"_blank",rel:"noopener noreferrer"},m=t('<h2 id="项目搭建" tabindex="-1"><a class="header-anchor" href="#项目搭建" aria-hidden="true">#</a> 项目搭建</h2><h3 id="创建父工程" tabindex="-1"><a class="header-anchor" href="#创建父工程" aria-hidden="true">#</a> 创建父工程</h3><p>父工程一般只用于聚合，导入依赖等，不需要打成jar包，用 idea 创建一个spring项目，Type 选择 Maven POM ,</p><p>一直下一步，别的都不需要选。知道==直到项目创建成功。版本可用2.7.5 ，<strong><u>&lt;java.version&gt;17&lt;/java.version&gt;</u></strong>,</p><p>description标签下加上 <code>&lt;packaging&gt;pom&lt;/packaging&gt;</code>，因为父工程不需要打成 jar 包的</p><p><img src="'+i+`" alt="" loading="lazy"></p><p>父工程 pom.xml (引入spring-cloud-alibaba-dependencies ，里面有cloud alibaba的依赖版本信息 )</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">&gt;</span></span>17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring.cloud.alibaba.version</span><span class="token punctuation">&gt;</span></span>2.2.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring.cloud.alibaba.version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring.cloud.version</span><span class="token punctuation">&gt;</span></span>Hoxton.SR6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring.cloud.version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!--全局引入下载依赖地址，并不会引入依赖--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
            <span class="token comment">&lt;!--阿里巴巴下载仓库--&gt;</span>
            <span class="token comment">&lt;!--Spring cloud alibaba,的版本管理，通过dependency完成继承--&gt;</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-alibaba-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\${spring.cloud.alibaba.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token comment">&lt;!--springcloud下载仓库--&gt;</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\${spring.cloud.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建子工程" tabindex="-1"><a class="header-anchor" href="#创建子工程" aria-hidden="true">#</a> 创建子工程</h3><p>创建order子工程，子工程可以直接创建 maven 模块，不一定需要创建spring 模块，因为创建 maven 模块项目会直接继承父工程，</p><p>随后修改配置文件 pom.xml</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.fan.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>order<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    
    <span class="token comment">&lt;!--添加web依赖，从父工程继承--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>


<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建项目结构( controller,...........)</p><p>创建启动类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>fan<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>order</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderApplication</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我的测试项目启动了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">OrderApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>其余的子工程都按照上面的方式创建</strong></em></p><h2 id="resttemplate" tabindex="-1"><a class="header-anchor" href="#resttemplate" aria-hidden="true">#</a> restTemplate</h2>`,17),g={href:"https://blog.csdn.net/weixin_43702146/article/details/116567707",target:"_blank",rel:"noopener noreferrer"},b={href:"https://www.jianshu.com/p/58949f8334f5",target:"_blank",rel:"noopener noreferrer"},h={href:"https://mp.weixin.qq.com/s/WjjHV_JZ1k7BajtGwY3VWQ",target:"_blank",rel:"noopener noreferrer"},f=t(`<p>基于RestTemplate发起的http请求实现远程调用</p><p>java开发中，使用http连接，访问<code>第三方网络接口</code>，通常使用的连接工具为<code>HttpClient</code>和<code>OKHttp</code>。</p><p>这两种连接工具，使用起来比较<code>复杂</code>，新手容易出问题。如果使用spring框架，可以使用<code>restTemplate</code>来进行http连接请求。</p><p>restTemplate默认的连接方式是java中的<code>HttpConnection</code>，可以使用<code>ClientHttpRequestFactory</code>指定不同的HTTP连接方式。</p><p>（使用restTemplate来发送http请求，微服务项目之间互相隔离，可以通过restTemplate来请求数据）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RestTemplateConfig</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 没有实例化RestTemplate时，初始化RestTemplate
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token class-name">RestTemplate</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">restTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">RestTemplate</span> restTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> restTemplate<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token class-name">RestTemplate</span> restTemplate<span class="token punctuation">;</span>
<span class="token doc-comment comment">/**
 * 单元测试（restTemplate发起基本请求，不带参的get请求）
 */</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//请求地址</span>
    <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">&quot;http://localhost:8080/testGet&quot;</span><span class="token punctuation">;</span>

    <span class="token comment">//发起请求,直接返回对象</span>
    <span class="token comment">// url请求路径   ResponseBean.class：默认返回json，转为数据类型</span>
    <span class="token class-name">ResponseBean</span> responseBean <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token class-name">ResponseBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>responseBean<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="提供者与消费者" tabindex="-1"><a class="header-anchor" href="#提供者与消费者" aria-hidden="true">#</a> 提供者与消费者</h2><p>服务提供者：一次业务中，被其它微服务调用的服务。（提供接口给其它微服务） 服务消费者：一次业务中，调用其它微服务的服务。（调用其它微服务提供的接口）</p><p>服务调用关系 服务提供者：暴露接口给其它微服务调用 服务消费者：调用其它微服务提供的接口 提供者与消费者角色其实是相对的 一个服务可以同时是服务提供者和服务消费者</p><h2 id="eureka注册中心" tabindex="-1"><a class="header-anchor" href="#eureka注册中心" aria-hidden="true">#</a> Eureka注册中心</h2><p>eureka的作用 消费者该如何获取服务提供者具体信息？ ◆服务提供者启动时向eureka注册自己的信息 ◆eureka保存这些信息 ◆消费者根据服务名称向eureka拉取提供者信息 如果有多个服务提供者，消费者该如何选择？ ◆服务消费者利用负载均衡算法，从服务列表中挑选一个 消费者如何感知服务提供者健康状态？ ◆服务提供者会每隔30秒向EurekaServer发送心跳请求，报告健康状态 ◆eureka会更新记录服务列表信息，心跳不正常会被剔除 ◆消费者就可以拉取到最新的信息</p><p>在Eureka架构中，微服务角色有两类： ●EurekaServer:服务端，注册中心 记录服务信息 心跳监控 ●EurekaClient:客户端 Provider:服务提供者，例如案例中的user-service 注册自己的信息到EurekaServer 每隔30秒向EurekaServer发送心跳 consumer:服务消费者，例如案例中的order-service 根据服务名称从EurekaServer拉取服务列表 基于服务列表做负载均衡，选中一个微服务后发起远程调用</p><h2 id="nacos" tabindex="-1"><a class="header-anchor" href="#nacos" aria-hidden="true">#</a> Nacos</h2>`,14),_={href:"https://nacos.io/zh-cn/docs/v2/quickstart/quick-start.html",target:"_blank",rel:"noopener noreferrer"},y={href:"https://blog.csdn.net/weixin_48040732/article/details/109492067",target:"_blank",rel:"noopener noreferrer"},w={href:"https://blog.csdn.net/dndndnnffj/article/details/119515618",target:"_blank",rel:"noopener noreferrer"},x=t(`<h3 id="启动服务器" tabindex="-1"><a class="header-anchor" href="#启动服务器" aria-hidden="true">#</a> <strong>启动服务器</strong></h3><ul><li>注：Nacos的运行建议至少在2C4G 60G的机器配置下运行。</li></ul><p><strong>Linux/Unix/Mac</strong></p><p>启动命令(standalone代表着单机模式运行，非集群模式):</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sh startup.sh -m standalone
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果您使用的是ubuntu系统，或者运行脚本报错提示[[符号找不到，可尝试如下运行：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>bash startup.sh -m standalone
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>Windows</strong></p><p>启动命令(standalone代表着单机模式运行，非集群模式):</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>startup.cmd -m standalone
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>默认端口：8844</p><p>进入nacos页面后，默认账号和密码都是 nacos</p><h3 id="依赖" tabindex="-1"><a class="header-anchor" href="#依赖" aria-hidden="true">#</a> 依赖</h3><p>子工程内加入 nacos 的相关依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!--springCloud提供用于监控--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 用于服务注册到Nacos --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>application.yml</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8011</span>
  <span class="token comment">#应用名称(nacos会将该名称当做服务名称)</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> order
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">8848</span>
      <span class="token key atrule">username</span><span class="token punctuation">:</span> nacos
      <span class="token key atrule">password</span><span class="token punctuation">:</span> nacos
<span class="token comment">#      namespace: public   命名空间</span>
<span class="token comment">#      config:</span>
<span class="token comment">#      file-extension: yaml</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意依赖版本，版本有问题启动不了（版本报错后跟换了版本，springboot和nacos都用了 2.2.3.RELEASE 版本）</p><h3 id="nacos使用示例" tabindex="-1"><a class="header-anchor" href="#nacos使用示例" aria-hidden="true">#</a> nacos使用示例</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@LoadBalanced</span>   <span class="token comment">//LoadBalanced负载均衡器，需要</span>
    <span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">restTemplate</span><span class="token punctuation">(</span><span class="token class-name">RestTemplateBuilder</span> builder<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">RestTemplate</span> restTemplate<span class="token operator">=</span>builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> restTemplate<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/order&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">RestTemplate</span> restTemplate<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/add&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">reduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;增加库存&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> msg<span class="token operator">=</span>restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token string">&quot;http://stock/stock/reduct&quot;</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;hello &quot;</span><span class="token operator">+</span>msg<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="nacos集群部署" tabindex="-1"><a class="header-anchor" href="#nacos集群部署" aria-hidden="true">#</a> nacos集群部署</h3>`,22),S={href:"https://www.bilibili.com/video/BV1fe4y1b7ha?p=19&spm_id_from=pageDriver&vd_source=f25f5a8d75a3a60d5a288f726803ec11",target:"_blank",rel:"noopener noreferrer"},q=t('<h3 id="负载均衡-ribbon" tabindex="-1"><a class="header-anchor" href="#负载均衡-ribbon" aria-hidden="true">#</a> 负载均衡 Ribbon</h3><p>Nacos使用Ribbon</p><p>nacos-discovery依赖了ribbon,可以不用再引入ribbon依赖</p><p>在RestTemplate的bean上加上 @LoadBalanced 注解就可以使用了，详见 <strong>nacos使用示例</strong></p><p>使用 Ribbon 简化restTemplate调用</p><ol><li>在声明restTemplate的Bean时候，添加一个注解：@LoadBalanced</li><li><ol start="2"><li>在使用restTemplate发起请求时，需要定义url时，host:port可以替换为 服务提供方的 应用名称</li></ol></li></ol>',6),C={href:"https://blog.csdn.net/TianYinet/article/details/119876840",target:"_blank",rel:"noopener noreferrer"},j={href:"https://juejin.cn/post/6933767343570944008",target:"_blank",rel:"noopener noreferrer"},R=t(`<p><strong>设置负载均衡策略：两种方法：</strong></p><p>1.配置类， 注意：配置类不能放在运行类能扫描到的包下，可以放到它上一层的包里面</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRule</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">IRule</span> <span class="token function">rule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RandomRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//注意：这个new RandomRule()可以改成其他IRule接口的实现类</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：这个<code>new RandomRule()</code>可以改成其他<strong>IRule接口</strong>的实现类</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/*
    配置Ribbon的负载均衡策略 name
    * name：设置 服务提供方的 应用名称
    * configuration:设置负载均衡Bean
 */
@RibbonClient(name = &quot;EUREKA-PROVIDE&quot;,configuration = MyRule.class)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.配置文件的方式</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># 配置的方式设置Ribbon的负载均衡策略
nacos-provider: # 设置的服务提供方的 应用名称 如：order...
  ribbon:
    NFloadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule # 策略类(全路径名)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>自定义负载均衡策略</strong></p>`,8),T={href:"https://blog.csdn.net/weixin_46334920/article/details/114867996",target:"_blank",rel:"noopener noreferrer"},E=n("h2",{id:"feign",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#feign","aria-hidden":"true"},"#"),s(" feign")],-1),N={href:"https://juejin.cn/post/7169549885723639838",target:"_blank",rel:"noopener noreferrer"},I=t(`<p>Feign 是声明式、模板化的 HTTP 客户端， 可以帮助我们更快捷、优雅地调用 HTTP API；Spring Cloud 为 Feign 添加了 Spring MVC 的注解支持，并整合了 Ribbon 和 Eureka 来为使用 Feign 时提供负载均衡；在 Spring Cloud 中使用 Feign 是非常容易的。</p><h3 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用" aria-hidden="true">#</a> 基本使用</h3><p>使用 feign 来代替 RestTemplate 的调用</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> &lt;!--openfein的依赖--&gt;
  &lt;dependency&gt;
      &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
      &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;
      &lt;version&gt;2.1.3.RELEASE&lt;/version&gt;
  &lt;/dependency&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>改造Order服务的内容</p><p>StockFeignService</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//添加feign接口和方法      @FeignClient</span>
<span class="token comment">//name指定调用rest接口所对应的服务名</span>
<span class="token comment">//path指定调用rest接口所在的StockController指定@RequestMapping</span>
<span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>name <span class="token operator">=</span><span class="token string">&quot;stock&quot;</span><span class="token punctuation">,</span>path <span class="token operator">=</span> <span class="token string">&quot;/stock&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StockFeignService</span> <span class="token punctuation">{</span>
    <span class="token comment">//声明需要调用的rest接口对应的方法</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/reduct&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">reduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改 OrderController</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/order&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderController</span> <span class="token punctuation">{</span>
    <span class="token comment">//@Autowired</span>
    <span class="token comment">//RestTemplate restTemplate;</span>
    <span class="token comment">//@RequestMapping(value = &quot;/add&quot;)</span>
    <span class="token comment">//public String reduct(){</span>
    <span class="token comment">//    System.out.println(&quot;增加库存&quot;);</span>
    <span class="token comment">//    String msg=restTemplate.getForObject(&quot;http://stock/stock/reduct&quot;,String.class);</span>
    <span class="token comment">//    return &quot;hello &quot;+msg;</span>
    <span class="token comment">//}</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">StockFeignService</span> stockFeignService<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/add&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">reduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;增加库存&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> msg<span class="token operator">=</span>stockFeignService<span class="token punctuation">.</span><span class="token function">reduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;hello &quot;</span><span class="token operator">+</span>msg<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动类增加 @EnableFeignClients 注解</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableFeignClients</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderApplication</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我的测试项目启动了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">OrderApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>



<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="日志配置" tabindex="-1"><a class="header-anchor" href="#日志配置" aria-hidden="true">#</a> 日志配置</h3><p>有时候我们遇到Bug,比如接口调用失败、参数没收到等问题，或者想看看调用性能，就需要配置Feign的日志了，以此让Feign把请求信息输出来。</p><p>在发送和接收请求的时候，其内部将日志的打印输出定义成了四个等级，对应的详情如下：</p><table><thead><tr><th>级别</th><th>说明</th></tr></thead><tbody><tr><td>NONE</td><td>【性能最佳，适用于生产】：不记录任何日志（默认值）。</td></tr><tr><td>BASIC</td><td>【适用于生产环境追踪问题】：仅记录请求方法、URL、响应状态代码以及执行时间。</td></tr><tr><td>HEADERS</td><td>记录BASIC级别的基础上，记录请求和响应的header。</td></tr><tr><td>FULL</td><td>【比较适用于开发及测试环境定位问题】：记录请求和响应的header、body和元数据。</td></tr></tbody></table><p>1.全局配置，定义一个配置类 ，通过配置类修改日志级别</p><p>FeignConfig</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//全局配置：当使用Configuration会将配置作用所有的服务提供方</span>
<span class="token comment">//局部配置：如果只想针对某一个服务进行配置，就不要加aConfiguration</span>
    <span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FeignConfig</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
     <span class="token keyword">public</span> <span class="token class-name">Logger<span class="token punctuation">.</span>Level</span> <span class="token function">feignLoggerLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Logger<span class="token punctuation">.</span>Level</span><span class="token punctuation">.</span><span class="token constant">FULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>通过配置文件修改日志级别</li></ol><p>注意需要指定接口的全限定名</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment">#springboot默认的日志级别是info,feign的dubug日志级别就不会输入</span>
<span class="token key atrule">logging</span><span class="token punctuation">:</span>
  <span class="token key atrule">level</span><span class="token punctuation">:</span>
    <span class="token key atrule">com.fan.cloud.order.feign</span> <span class="token punctuation">:</span> DEBUG
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>logger局部配置</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">fengin</span><span class="token punctuation">:</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">config</span><span class="token punctuation">:</span>
      <span class="token key atrule">stock</span><span class="token punctuation">:</span>   <span class="token comment">#nacos服务名</span>
        <span class="token key atrule">loggerLevel</span><span class="token punctuation">:</span> BASIC
        <span class="token key atrule">contract</span><span class="token punctuation">:</span> feign.Contract.Default  <span class="token comment">#契约配置  设置为默认的契约 (还原成feign原生注解)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="超时时间配置" tabindex="-1"><a class="header-anchor" href="#超时时间配置" aria-hidden="true">#</a> 超时时间配置</h3>`,24),A={href:"https://blog.csdn.net/yangchao1125/article/details/104410068",target:"_blank",rel:"noopener noreferrer"},B=t(`<div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">feign</span><span class="token punctuation">:</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">config</span><span class="token punctuation">:</span>
      <span class="token key atrule">stock</span><span class="token punctuation">:</span>  <span class="token comment">#nacos服务名</span>
        <span class="token key atrule">connectTimeout</span><span class="token punctuation">:</span> <span class="token number">10000</span> <span class="token comment">#单位毫秒</span>
        <span class="token key atrule">readTimeout</span><span class="token punctuation">:</span> <span class="token number">10000</span> <span class="token comment">#单位毫秒</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="拦截器" tabindex="-1"><a class="header-anchor" href="#拦截器" aria-hidden="true">#</a> 拦截器</h3>`,2),F={href:"https://blog.csdn.net/ZSA222/article/details/124260506",target:"_blank",rel:"noopener noreferrer"},L={href:"https://blog.csdn.net/m0_47503416/article/details/123426212",target:"_blank",rel:"noopener noreferrer"},O=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomFeignInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">RequestInterceptor</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">RequestTemplate</span> template<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 对template的一系列操作</span>
        <span class="token comment">// 例如设置请求头信息</span>
        template<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">&quot;X-Forwarded-For&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;origin.host.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="nacos配置中心" tabindex="-1"><a class="header-anchor" href="#nacos配置中心" aria-hidden="true">#</a> nacos配置中心</h2>`,2),D={href:"https://blog.csdn.net/a745233700/article/details/122916208",target:"_blank",rel:"noopener noreferrer"},M={href:"https://juejin.cn/post/7026160025638797320",target:"_blank",rel:"noopener noreferrer"},U=t(`<p>缺少这个依赖，是获取不到nacos的配置信息的</p><p>依赖：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;dependency&gt;
            &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;
            &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt;
        &lt;/dependency&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置管理 data id 的命名规则（要遵守，否则读取不到配置）：</p>`,4),H=n("p",{"file-extension":""},[s("dataId=p"),n("strong",null,"re"),s("f"),n("strong",null,"i"),s("x−{spring.profile.active}.$")],-1),P=n("p",{"spring.application.name":""},"其中profix默认为$",-1),G=t(`<p>nacos配置中心 增加一条配置</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Data ID:order
Group:DEFAULT_GROUP
配置格式: TEXT  JSON XML YAML HTML Properties (选择Properties，选择其他，yml增加file-extension)
配置内容:
student.name=zhansan
student.age=300
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>nacos的相关配置放到 bootstrap.yml 文件中</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token comment"># 会自动根据服务名拉取dataid对应的配置文件</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> order    <span class="token comment">#这里的name为nacos服务的 Data ID</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">config</span><span class="token punctuation">:</span>
        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">8848</span>
        <span class="token key atrule">username</span><span class="token punctuation">:</span> nacos
        <span class="token key atrule">password</span><span class="token punctuation">:</span> nacos
        <span class="token comment">#Nacos客户端默认是Properties的文件扩展名，网页上的配置格式</span>
        <span class="token comment">#一旦修改成了非Properties格式，则必须通过file-extension进行设置，并配置好data id</span>
        <span class="token comment"># file-extension:yml</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取配置中心配置的内容</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableFeignClients</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderApplication</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我的测试项目启动了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ConfigurableApplicationContext</span> applicationContext<span class="token operator">=</span><span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">OrderApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> userName<span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;student.name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> userAge<span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;student.age&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userName<span class="token operator">+</span><span class="token string">&quot;, &quot;</span><span class="token operator">+</span>userAge<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>



<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>controller 类里面读取配置信息</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>    @Value(&quot;\${student.name}&quot;)
    public String studentName;
    @Value(&quot;\${student.age}&quot;)
    public String studentAge;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>若在 nacos 配置中心 修改了配置， controller 里面不会获取到实时更新后的配置，要在 controller 类上增加 <strong>@RefreshScope</strong> 注解才能实时获取更改后的配置数据</p><p><strong>nacos共享配置</strong></p>`,10),z={href:"https://zhuanlan.zhihu.com/p/622959833",target:"_blank",rel:"noopener noreferrer"},V={href:"https://www.jianshu.com/p/8715072d3f4c",target:"_blank",rel:"noopener noreferrer"},W=n("h2",{id:"sentinel",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#sentinel","aria-hidden":"true"},"#"),s(" Sentinel")],-1),J={href:"https://github.com/alibaba/Sentinel/wiki/%E4%BB%8B%E7%BB%8D",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Falibaba%2FSentinel",target:"_blank",rel:"noopener noreferrer"},X={href:"https://blog.csdn.net/qq_43437874/category_10481990.html",target:"_blank",rel:"noopener noreferrer"},$=t('<p>服务雪崩效应：因服务提供者的不可用导致服务调用者的不可用，并将不可用逐斩放大的过程，就叫服务雪崩效应</p><h3 id="项目集成" tabindex="-1"><a class="header-anchor" href="#项目集成" aria-hidden="true">#</a> 项目集成</h3><p><code>Sentinel</code> 可以简单的分为 <code>Sentinel</code> 核心库和 <code>Dashboard控制台</code>。核心库不依赖 <code>Dashboard</code>，但是结合 <code>Dashboard</code> 可以取得最好的效果。</p><ul><li><strong>核心库（Java 客户端）</strong>：不依赖任何框架/库，能够运行于 Java 8 及以上的版本的运行时环境，同时对 Dubbo / Spring Cloud 等框架也有较好的支持。</li><li><strong>控制台（Dashboard）</strong>：Dashboard 主要负责管理推送规则、监控、管理机器信息等。</li></ul><p>上面有说 <code>资源是 Sentinel 的关键概念</code> 使用 Sentinel 来进行资源保护，主要分为这几个步骤:</p><ol><li>定义资源</li><li>定义规则</li><li>检验规则是否生效</li></ol><h3 id="sentinel-的开发流程" tabindex="-1"><a class="header-anchor" href="#sentinel-的开发流程" aria-hidden="true">#</a> Sentinel 的开发流程</h3><p>Sentinel 的开发流程如下：</p><ol><li><strong>引入 Sentinel 依赖</strong>：在项目中引入 Sentinel 的依赖，将 Sentinel 整合到项目中；</li><li><strong>定义资源</strong>：通过对主流框架提供适配或 Sentinel 提供的显式 API 和注解，可以定义需要保护的资源，此外 Sentinel 还提供了资源的实时统计和调用链路分析；</li><li><strong>定义规则</strong>：根据实时统计信息，对资源定义规则，例如流控规则、熔断规则、热点规则、系统规则以及授权规则等。</li><li><strong>检验规则是否在生效</strong>：运行程序，检验规则是否生效，查看效果。</li></ol><h3 id="集成sentinel" tabindex="-1"><a class="header-anchor" href="#集成sentinel" aria-hidden="true">#</a> 集成Sentinel</h3>',10),Y={href:"https://juejin.cn/post/7058453493752791070",target:"_blank",rel:"noopener noreferrer"},Z={href:"https://zhuanlan.zhihu.com/p/569512349",target:"_blank",rel:"noopener noreferrer"},K=t(`<p>sentinel依赖：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;dependency&gt;
	&lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;
	&lt;artifactId&gt;spring-cloud-starter-alibaba-sentinel&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>sentinel配置</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9201</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token comment"># 应用名称</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> order
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">sentinel</span><span class="token punctuation">:</span>
      <span class="token key atrule">transport</span><span class="token punctuation">:</span>
        <span class="token comment"># 控制台地址</span>
        <span class="token key atrule">dashboard</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">8718</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sentinel-定义资源" tabindex="-1"><a class="header-anchor" href="#sentinel-定义资源" aria-hidden="true">#</a> <code>Sentinel</code> 定义资源</h3><p><code>Sentinel</code> 定义资源的方式有好几种，有抛出异常的方式、返回布尔值的方式、注解的方式等</p><p><code>Sentinel</code>提供了<code>@SentinelResource</code>注解用于定义资源，并提供了<code>AspectJ</code>的扩展用于自动定义资源、处理<code>BlockException</code>等。</p><p><code>@SentinelResource</code>注解包含以下属性：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>资源名称，必需项（不能为空）</td></tr><tr><td>entryType</td><td>资源调用方向，可选项（默认为<code>EntryType.OUT</code>）</td></tr><tr><td>resourceType</td><td>资源的分类</td></tr><tr><td>blockHandler</td><td>对应处理<code>BlockException</code>的函数名称</td></tr><tr><td>blockHandlerClass</td><td>处理类的<code>Class</code>对象，函数必需为<code>static</code>函数</td></tr><tr><td>fallback</td><td>用于在抛出异常的时候提供<code>fallback</code>处理逻辑</td></tr><tr><td>defaultFallback</td><td>用作默认的回退的方法</td></tr><tr><td>fallbackClass</td><td>异常类的<code>Class</code>对象，函数必需为<code>static</code>函数</td></tr><tr><td>exceptionsToTrace</td><td>异常类跟踪列表（默认为Throwable.class）</td></tr><tr><td>exceptionsToIgnore</td><td>排除掉的异常类型</td></tr></tbody></table><p>注意：注解方式埋点不支持 private 方法。</p><ul><li><code>blockHandler</code> / <code>blockHandlerClass</code>: <code>blockHandler</code> 对应处理 <code>BlockException</code> 的函数名称，可选项。blockHandler 函数访问范围需要是 <code>public</code>，返回类型需要与原方法相匹配，参数类型需要和原方法相匹配并且最后加一个额外的参数，类型为 <code>BlockException</code>。blockHandler 函数默认需要和原方法在同一个类中。若希望使用其他类的函数，则可以指定 <code>blockHandlerClass</code> 为对应的类的 <code>Class</code> 对象，注意对应的函数必需为 static 函数，否则无法解析。</li></ul><p>示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IUserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IUserService</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">RESOURCE_NAME</span> <span class="token operator">=</span> <span class="token string">&quot;selectUserByName&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 资源名称</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token constant">RESOURCE_NAME</span><span class="token punctuation">,</span> blockHandler <span class="token operator">=</span> <span class="token string">&quot;selectUserByNameBlockHandler&quot;</span><span class="token punctuation">,</span> fallback <span class="token operator">=</span> <span class="token string">&quot;selectUserByNameFallback&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">selectUserByName</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;{&quot;</span>userName<span class="token string">&quot;: &quot;</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">&quot;, &quot;</span>age<span class="token string">&quot;: 25}&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 服务流量控制处理，注意细节，一定要跟原函数的返回值和形参一致，并且形参最后要加个BlockException参数，否则会报错，FlowException: null</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">selectUserByNameBlockHandler</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token class-name">BlockException</span> ex<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;selectUserByNameBlockHandler异常信息：&quot;</span> <span class="token operator">+</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;{&quot;</span>code<span class="token string">&quot;:&quot;</span><span class="token number">500</span><span class="token string">&quot;,&quot;</span>msg<span class="token string">&quot;: &quot;</span>&quot; <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">&quot;服务流量控制处理&quot;</span><span class="token punctuation">}</span>&quot;<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 服务熔断降级处理，函数签名与原函数一致或加一个 Throwable 类型的参数</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">selectUserByNameFallback</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;selectUserByNameFallback异常信息：&quot;</span> <span class="token operator">+</span> throwable<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;{&quot;</span>code<span class="token string">&quot;:&quot;</span><span class="token number">500</span><span class="token string">&quot;,&quot;</span>msg<span class="token string">&quot;: &quot;</span>&quot; <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">&quot;服务熔断降级处理&quot;</span><span class="token punctuation">}</span>&quot;<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sentinel定义规则" tabindex="-1"><a class="header-anchor" href="#sentinel定义规则" aria-hidden="true">#</a> Sentinel定义规则</h3><p>流量控制规则(<code>FlowRule</code>)重要属性</p><table><thead><tr><th>参数</th><th>描述</th><th>描述</th></tr></thead><tbody><tr><td>resource</td><td>资源名，资源名是限流规则的作用对象</td><td></td></tr><tr><td>limitApp</td><td>流控针对的调用来源，若为 default 则不区分调用来源</td><td>default，代表不区分调用来源</td></tr><tr><td>grade</td><td>限流阈值类型，QPS 模式（1）或并发线程数模式（0）</td><td>QPS 模式</td></tr><tr><td>count</td><td>限流阈值</td><td></td></tr><tr><td>strategy</td><td>调用关系限流策略：直接、链路、关联</td><td>根据资源本身（直接）</td></tr><tr><td>controlBehavior</td><td>流量控制效果(直接拒绝、Warm Up、匀速排队)</td><td>直接拒绝</td></tr><tr><td>clusterMode</td><td>是否集群限流</td><td>否</td></tr></tbody></table><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SentinelApplication</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SentinelApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">initFlowQpsRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//定义了每秒最多接收2个请求</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">initFlowQpsRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FlowRule</span><span class="token punctuation">&gt;</span></span> rules <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">FlowRule</span> rule <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FlowRule</span><span class="token punctuation">(</span><span class="token class-name">IUserServiceImpl</span><span class="token punctuation">.</span><span class="token constant">RESOURCE_NAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// set limit qps to 2</span>
        rule<span class="token punctuation">.</span><span class="token function">setCount</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        rule<span class="token punctuation">.</span><span class="token function">setGrade</span><span class="token punctuation">(</span><span class="token class-name">RuleConstant</span><span class="token punctuation">.</span><span class="token constant">FLOW_GRADE_QPS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        rule<span class="token punctuation">.</span><span class="token function">setLimitApp</span><span class="token punctuation">(</span><span class="token string">&quot;default&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        rules<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>rule<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">FlowRuleManager</span><span class="token punctuation">.</span><span class="token function">loadRules</span><span class="token punctuation">(</span>rules<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>注意 FlowRule rule = new FlowRule(IUserServiceImpl.RESOURCE_NAME) 资源名称
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="sentinel-blockexception统一异常处理" tabindex="-1"><a class="header-anchor" href="#sentinel-blockexception统一异常处理" aria-hidden="true">#</a> sentinel-BlockException统一异常处理</h3>`,19),nn={href:"https://blog.csdn.net/weixin_43472934/article/details/122475687",target:"_blank",rel:"noopener noreferrer"},sn=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBlockExceptionHandler</span> <span class="token keyword">implements</span> <span class="token class-name">BlockExceptionHandler</span> <span class="token punctuation">{</span>

    <span class="token class-name">Logger</span> log <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> httpServletRequest<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> httpServletResponse<span class="token punctuation">,</span> <span class="token class-name">BlockException</span> e<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">//getRule返回资源、规则的详细信息</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;BlockExceptionHandler BlockException================&quot;</span><span class="token operator">+</span>e<span class="token punctuation">.</span><span class="token function">getRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Result</span> r <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">FlowException</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            r <span class="token operator">=</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">&quot;接口被限流了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">DegradeException</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            r <span class="token operator">=</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token string">&quot;服务降级了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">ParamFlowException</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            r <span class="token operator">=</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token string">&quot;热点参数限流了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">AuthorityException</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            r <span class="token operator">=</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token number">104</span><span class="token punctuation">,</span><span class="token string">&quot;授权规则不通过&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//返回Json数据</span>
        httpServletResponse<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        httpServletResponse<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        httpServletResponse<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">PrintWriter</span> writer<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            writer<span class="token operator">=</span>httpServletResponse<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            writer<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ioException<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;异常：{}&quot;</span><span class="token punctuation">,</span>ioException<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>writer<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sentinel-持久化" tabindex="-1"><a class="header-anchor" href="#sentinel-持久化" aria-hidden="true">#</a> Sentinel 持久化</h3>`,2),an={href:"https://juejin.cn/post/7000995878332792839#heading-2",target:"_blank",rel:"noopener noreferrer"},en={href:"https://blog.csdn.net/u010342147/article/details/124303587",target:"_blank",rel:"noopener noreferrer"},tn=t(`<p>导入依赖</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;!--sentinel持久化 --&gt;
	&lt;dependency&gt;
		&lt;groupId&gt;com.alibaba.csp&lt;/groupId&gt;
		&lt;artifactId&gt;sentinel-datasource-nacos&lt;/artifactId&gt;
	&lt;/dependency&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sentinel-控制台" tabindex="-1"><a class="header-anchor" href="#sentinel-控制台" aria-hidden="true">#</a> Sentinel 控制台</h3><p>从<code>https://github.com/alibaba/Sentinel/releases</code>下载<code>sentinel-dashboard-$version.jar</code>包。</p><p>github下载速度慢，我下载的1.8.6版本</p>`,5),pn={href:"https://wwmj.lanzoue.com/iAm1s19me1jc",target:"_blank",rel:"noopener noreferrer"},on=n("p",null,"我们可以用以下命令来启动下载的 jar 包",-1),ln=n("div",{class:"language-text line-numbers-mode","data-ext":"text"},[n("pre",{class:"language-text"},[n("code",null,`java -Dserver.port=8718 -jar sentinel-dashboard-1.8.6.jar
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),cn=n("p",null,[s("其中 "),n("code",null,"-Dserver.port=8718"),s(" 指定控制台端口")],-1),un={href:"https://link.juejin.cn/?target=http%3A%2F%2Flocalhost%3A8718",target:"_blank",rel:"noopener noreferrer"},rn=n("code",null,"sentinel/sentinel",-1),dn={href:"https://blog.csdn.net/qq_25179481/article/details/124225426",target:"_blank",rel:"noopener noreferrer"},kn={href:"https://blog.csdn.net/qq_36185997/article/details/107152602",target:"_blank",rel:"noopener noreferrer"},vn={href:"https://www.cnblogs.com/alwayszmx/p/15901889.html",target:"_blank",rel:"noopener noreferrer"},mn=n("h2",{id:"alibaba微服务分布式事务组件一seata",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#alibaba微服务分布式事务组件一seata","aria-hidden":"true"},"#"),s(" Alibaba微服务分布式事务组件一Seata")],-1),gn={href:"https://seata.io/zh-cn/docs/user/quickstart/",target:"_blank",rel:"noopener noreferrer"},bn=n("p",null,"Seata 是一款开源的分布式事务解决方案，致力于提供高性能和简单易用的分布式事务服务。Seata 将为用户提供了 AT、TCC、SAGA 和 XA 事务模式，为用户打造一站式的分布式解决方案。",-1),hn=n("p",null,"AT模式（auto transcation）主要使用",-1),fn=n("h3",{id:"seata部署",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#seata部署","aria-hidden":"true"},"#"),s(" seata部署")],-1),_n={href:"https://seata.io/zh-cn/docs/ops/deploy-guide-beginner",target:"_blank",rel:"noopener noreferrer"},yn=n("p",null,"Seata分TC、TM和RM三个角色，TC（Server端）为单独服务端部署，TM和RM（Client端）由业务系统集成。",-1),wn=n("p",null,"资源目录介绍",-1),xn={href:"https://github.com/seata/seata/tree/master/script",target:"_blank",rel:"noopener noreferrer"},Sn=t('<ul><li><p>client</p><blockquote><p>存放client端sql脚本 (包含 undo_log表) ，参数配置</p></blockquote></li><li><p>config-center</p><blockquote><p>各个配置中心参数导入脚本，config.txt(包含server和client，原名nacos-config.txt)为通用参数文件</p></blockquote></li><li><p>server</p><blockquote><p>server端数据库脚本 (包含 lock_table、branch_table 与 global_table) 及各个容器配置</p></blockquote></li></ul><p>Server端存储模式（store.mode）现有file、db、redis三种（后续将引入raft,mongodb），file模式无需改动，直接启动即可，下面专门讲下db和redis启动步骤。</p><p>此处使用的 db</p><h4 id="启动server" tabindex="-1"><a class="header-anchor" href="#启动server" aria-hidden="true">#</a> 启动Server</h4>',4),qn={href:"https://github.com/seata/seata/releases",target:"_blank",rel:"noopener noreferrer"},Cn={href:"https://wwmj.lanzoue.com/iOlnL19sazod",target:"_blank",rel:"noopener noreferrer"},jn=n("p",null,"由于我使用的spring cloud alibaba版本为2.2.3.RELEASE,所以我下载的 1.3.0 版本的 server",-1),Rn=n("p",null,"步骤二：修改配置文件， 1.3.0 版本为 conf/file.conf ,高版本按照官网的提示去修改对应的文件",-1),Tn=n("p",null,'mode = "db" 修改配置文件中 数据库连接信息',-1),En=n("p",null,"步骤三：新建数据库，和配置库连接信息的数据库名一样",-1),Nn={href:"https://github.com/seata/seata/blob/master/script/server/db/mysql.sql",target:"_blank",rel:"noopener noreferrer"},In=n("h3",{id:"db-nacos的方式部署高可用集群模式",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#db-nacos的方式部署高可用集群模式","aria-hidden":"true"},"#"),s(" db+Nacos的方式部署高可用集群模式")],-1),An={href:"https://blog.csdn.net/qq_43663493/article/details/121401862",target:"_blank",rel:"noopener noreferrer"},Bn=t(`<p>seata的conf文件夹下 registry.conf</p><p>registry 和 config 里面 type修改为nacos 配修改nacos 连接配置信息</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>type = &quot;nacos&quot;

nacos {
    application = &quot;seata-server&quot;
    serverAddr = &quot;127.0.0.1:8848&quot;
    group = &quot;SEATA_GROUP&quot;
    namespace = &quot;&quot;
    cluster = &quot;default&quot;
    username = &quot;nacos&quot;
    password = &quot;nacos&quot;
  }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),Fn={href:"https://github.com/seata/seata/blob/1.3.0/script/config-center/config.txt",target:"_blank",rel:"noopener noreferrer"},Ln=n("p",null,"修改后运行 config-center/nacos/nacos-config.py",-1),On=n("p",null,"如果nacos中有新的配置信息出现，则配置成功",-1),Dn=n("p",null,[s("启动服务，安装目录下的bin目录点击"),n("code",null,"seata-server.bat"),s(",默认端口8091。")],-1),Mn={href:"http://seata-server.sh",target:"_blank",rel:"noopener noreferrer"},Un=t(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>    -h: 注册到注册中心的ip   
    -p: Server rpc 监听端口    
    -m: 全局事务会话信息存储模式，file、db、redis，优先读取启动参数 (Seata-Server 1.3及以上版本支持redis)    
    -n: Server node，当有多个Server时，需区分各自节点，用于生成不同区间的transactionId，以免冲突         -e: 多环境配置参考 http://seata.io/en-us/docs/ops/multi-configuration-isolation.html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我的mysql是8版本，启动服务报错，查看下面文章</p>`,2),Hn={href:"https://blog.csdn.net/stephen_curry300/article/details/121585707",target:"_blank",rel:"noopener noreferrer"},Pn=n("p",null,"在nacos服务列表看见新加的服务信息则配置成功",-1),Gn=n("h3",{id:"seata-client",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#seata-client","aria-hidden":"true"},"#"),s(" Seata Client")],-1),zn={href:"https://blog.csdn.net/weixin_42257984/article/details/123949682",target:"_blank",rel:"noopener noreferrer"},Vn=t('<p>添加依赖：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;!--sentinel--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-starter-alibaba-seata&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>各微服务对应数据库中添加undo_Iog表</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- for AT mode you must to init this sql for you business database. the seata server not need it.</span>\n<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>undo_log<span class="token punctuation">`</span></span>\n<span class="token punctuation">(</span>\n    <span class="token identifier"><span class="token punctuation">`</span>branch_id<span class="token punctuation">`</span></span>     <span class="token keyword">BIGINT</span>       <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;branch transaction id&#39;</span><span class="token punctuation">,</span>\n    <span class="token identifier"><span class="token punctuation">`</span>xid<span class="token punctuation">`</span></span>           <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;global transaction id&#39;</span><span class="token punctuation">,</span>\n    <span class="token identifier"><span class="token punctuation">`</span>context<span class="token punctuation">`</span></span>       <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;undo_log context,such as serialization&#39;</span><span class="token punctuation">,</span>\n    <span class="token identifier"><span class="token punctuation">`</span>rollback_info<span class="token punctuation">`</span></span> <span class="token keyword">LONGBLOB</span>     <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;rollback info&#39;</span><span class="token punctuation">,</span>\n    <span class="token identifier"><span class="token punctuation">`</span>log_status<span class="token punctuation">`</span></span>    <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>      <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;0:normal status,1:defense status&#39;</span><span class="token punctuation">,</span>\n    <span class="token identifier"><span class="token punctuation">`</span>log_created<span class="token punctuation">`</span></span>   <span class="token keyword">DATETIME</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;create datetime&#39;</span><span class="token punctuation">,</span>\n    <span class="token identifier"><span class="token punctuation">`</span>log_modified<span class="token punctuation">`</span></span>  <span class="token keyword">DATETIME</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;modify datetime&#39;</span><span class="token punctuation">,</span>\n    <span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>ux_undo_log<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>xid<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>branch_id<span class="token punctuation">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span>\n  <span class="token keyword">AUTO_INCREMENT</span> <span class="token operator">=</span> <span class="token number">1</span>\n  <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> <span class="token operator">=</span> utf8 <span class="token keyword">COMMENT</span> <span class="token operator">=</span><span class="token string">&#39;AT transaction mode undo table&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务A调用服务B，作为调用方A添加@GlobalTransaction注解</p><h2 id="spring-cloud微服务网关gateway-组件" tabindex="-1"><a class="header-anchor" href="#spring-cloud微服务网关gateway-组件" aria-hidden="true">#</a> Spring Cloud微服务网关Gateway:组件</h2><h3 id="简单使用" tabindex="-1"><a class="header-anchor" href="#简单使用" aria-hidden="true">#</a> 简单使用</h3>',7),Wn={href:"https://juejin.cn/post/7281905382485426187",target:"_blank",rel:"noopener noreferrer"},Jn=t(`<p>API 网关充当了前端客户端和后端微服务之间的入口点，为微服务提供了一种集中式的、可管理的方式来处理请求。Spring Cloud Gateway 就是在这个背景下应运而生的。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> &lt;!-- Spring Cloud Gateway依赖 --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
            &lt;artifactId&gt;spring-cloud-starter-gateway&lt;/artifactId&gt;
        &lt;/dependency&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只引入gateway的依赖，我运行时报错了，此时需要引入另外一个依赖</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> &lt;dependency&gt;
   	&lt;groupId&gt;org.springframework&lt;/groupId&gt;
 	&lt;artifactId&gt;spring-webflux&lt;/artifactId&gt;
    &lt;version&gt;5.2.4.RELEASE&lt;/version&gt;
 &lt;/dependency&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),Qn={href:"https://blog.csdn.net/weixin_40571937/article/details/112516295",target:"_blank",rel:"noopener noreferrer"},Xn=t(`<p>再运行时，项目能够成功启动了。</p><p>配置yml</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8010</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span> <span class="token comment">#routes下可以配置多个路由</span>
        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> stock<span class="token punctuation">-</span>route         <span class="token comment">#id标识</span>
          <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">8011</span>  <span class="token comment"># 要代理的目标URI（要请求的服务的地址）</span>
          <span class="token comment"># 断言规则，用于路由匹配的规则（规则匹配，如果匹配成功就路由转发，如果匹配失败就返回404）</span>
          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> Path=/stock<span class="token punctuation">-</span>serve/<span class="token important">**</span>  <span class="token comment"># 匹配的路径规则</span>
              <span class="token comment"># 请求这个路径 http://localhost:8010/stock-serve/order/add （本服务）路由到下面</span>
              <span class="token comment"># http://localhost:8011/stock-serve/order/add  （被请求的服务）</span>
          <span class="token key atrule">filters</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> StripPrefix=1  <span class="token comment"># 过滤器，用于去掉请求前缀（/stock-serve）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="整合nacos" tabindex="-1"><a class="header-anchor" href="#整合nacos" aria-hidden="true">#</a> 整合nacos</h3><p><strong>其实就是在原有的配置上修改 uri 为 nacos 上的服务名</strong></p><p>修改yml</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8010</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span> <span class="token comment">#routes下可以配置多个路由</span>
        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> stock<span class="token punctuation">-</span>route         <span class="token comment">#id标识</span>
          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//stock  <span class="token comment"># 要代理的目标URI（要请求的服务的地址）</span>
          <span class="token comment"># lb:使用nacos中的本地负载均衡策略  stock是服务名</span>
          <span class="token comment"># 断言规则，用于路由匹配的规则（规则匹配，如果匹配成功就路由转发，如果匹配失败就返回404）</span>
          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> Path=/stock<span class="token punctuation">-</span>serve/<span class="token important">**</span>  <span class="token comment"># 匹配的路径规则</span>
              <span class="token comment"># 请求这个路径 http://localhost:8010/stock-serve/order/add （本服务）路由到下面</span>
              <span class="token comment"># http://localhost:8011/stock-serve/order/add  （被请求的服务）</span>
          <span class="token key atrule">filters</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> StripPrefix=1  <span class="token comment"># 过滤器，用于去掉请求前缀（/stock-serve）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="路由的断言规则" tabindex="-1"><a class="header-anchor" href="#路由的断言规则" aria-hidden="true">#</a> 路由的断言规则</h3>`,8),$n={href:"https://juejin.cn/post/7077197582077788167#heading-23",target:"_blank",rel:"noopener noreferrer"},Yn=n("p",null,"自定义路由的断言工厂：",-1),Zn={href:"https://blog.csdn.net/chaojunma/article/details/107331172",target:"_blank",rel:"noopener noreferrer"},Kn=n("h3",{id:"过滤器",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#过滤器","aria-hidden":"true"},"#"),s(" 过滤器")],-1),ns={href:"https://blog.csdn.net/zouliping123456/article/details/116128179",target:"_blank",rel:"noopener noreferrer"},ss={href:"https://blog.csdn.net/zhang0114/article/details/123179037",target:"_blank",rel:"noopener noreferrer"},as=n("p",null,"自定义过滤工厂",-1),es={href:"https://blog.csdn.net/weixin_41182727/article/details/120564252",target:"_blank",rel:"noopener noreferrer"},ts=n("p",null,"全局过滤器",-1),ps=n("p",null,"局部：局部针对某个路由，需要在路由中进行配置 全局：针对所有路由请求，一旦定义就会投入使用",-1),os=n("h3",{id:"跨域配置",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#跨域配置","aria-hidden":"true"},"#"),s(" 跨域配置")],-1),ls={href:"https://blog.csdn.net/leilei1366615/article/details/109171478",target:"_blank",rel:"noopener noreferrer"},cs=n("h3",{id:"spring-cloud-gateway-整合sentinel",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#spring-cloud-gateway-整合sentinel","aria-hidden":"true"},"#"),s(" Spring Cloud Gateway 整合Sentinel")],-1),is={href:"https://juejin.cn/post/7026520607978160142",target:"_blank",rel:"noopener noreferrer"},us={href:"https://blog.csdn.net/a745233700/article/details/122917160",target:"_blank",rel:"noopener noreferrer"},rs=n("h2",{id:"skywalking分布式链路追踪",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#skywalking分布式链路追踪","aria-hidden":"true"},"#"),s(" Skywalking分布式链路追踪")],-1),ds={href:"https://juejin.cn/post/7072709231949905957",target:"_blank",rel:"noopener noreferrer"},ks={href:"https://skywalking.apache.org/zh/2020-04-19-skywalking-quick-start/#",target:"_blank",rel:"noopener noreferrer"},vs=n("h3",{id:"环境搭建",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#环境搭建","aria-hidden":"true"},"#"),s(" 环境搭建")],-1),ms={href:"https://blog.csdn.net/qq_42402854/article/details/126920266",target:"_blank",rel:"noopener noreferrer"},gs=n("h2",{id:"实战项目",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#实战项目","aria-hidden":"true"},"#"),s(" 实战项目")],-1),bs={href:"https://www.bilibili.com/video/BV1j8411N7Bm?p=1&vd_source=f25f5a8d75a3a60d5a288f726803ec11",target:"_blank",rel:"noopener noreferrer"},hs={href:"https://www.bilibili.com/video/BV1j8411N7Bm/",target:"_blank",rel:"noopener noreferrer"},fs={href:"https://pan.baidu.com/s/16iXzw7cFDk3FqG9DfPqbdg?pwd=6633",target:"_blank",rel:"noopener noreferrer"};function _s(ys,ws){const a=c("ExternalLinkIcon");return o(),l("div",null,[r,n("p",null,[n("a",d,[s("02-4、分布式架构_哔哩哔哩_bilibili"),e(a)])]),n("p",null,[s("资料： "),n("a",k,[s("https://pan.baidu.com/s/1LxIxcHDO7SYB96SE-GZfuQ?pwd=dor4#list/path=%2F"),e(a)]),s(" dor4")]),n("p",null,[s("参考内容： "),n("a",v,[s("Spring Cloud_柒间的博客-CSDN博客"),e(a)])]),m,n("p",null,[n("a",g,[s("Springboot之restTemplate配置及使用_resttemplate 注入_"),e(a)])]),n("p",null,[n("a",b,[s("Spring之RestTemplate详解 - 简书 (jianshu.com)"),e(a)])]),n("p",null,[n("a",h,[s("SpringBoot调用外部接口的四大神技 微信公众平台 (qq.com)"),e(a)])]),f,n("p",null,[s("官网： "),n("a",_,[s("Nacos 快速开始"),e(a)])]),n("p",null,[n("a",y,[s("Nacos1.4.0 Windows10单机模式启动和集群启动_nacos1.4.0windows_谁不想飞舞青春的博客-CSDN博客"),e(a)])]),n("p",null,[n("a",w,[s("SpringCloud Alibaba 教程_spring cloud alibaba 教程_爱码猿的博客-CSDN博客"),e(a)])]),x,n("p",null,[n("a",S,[s("15、Nacos集群部署_哔哩哔哩_bilibili"),e(a)])]),q,n("p",null,[n("a",C,[s("Ribbon的基本使用_ribbon使用_程序媛千柔的博客-CSDN博客"),e(a)])]),n("p",null,[n("a",j,[s("花一个周末，掌握 SpringCloud Ribbon 核心原理 - 掘金 (juejin.cn)"),e(a)])]),R,n("p",null,[n("a",T,[s("Ribbon自定义负载均衡算法_ribbon自定义负载均衡策略_lio...的博客-CSDN博客"),e(a)])]),E,n("p",null,[n("a",N,[s("SpringBoot 使用 Feign 无废话 All-in-one 指南 - 掘金 (juejin.cn)"),e(a)])]),I,n("p",null,[n("a",A,[s("Feign 如何设置超时时间（connectionTimeout、readTimout）_feign timeout_cab5的博客-CSDN博客"),e(a)])]),B,n("p",null,[n("a",F,[s("Feign拦截器：RequestInterceptor_所遇皆惊喜的博客-CSDN博客"),e(a)])]),n("p",null,[n("a",L,[s("SpringCloud组件OpenFeign——拦截器_openfeign拦截参数修改_luffylv的博客-CSDN博客"),e(a)])]),O,n("p",null,[n("a",D,[s("Nacos配置中心用法详细介绍_nacos配置中心使用_张维鹏的博客-CSDN博客"),e(a)])]),n("p",null,[n("a",M,[s("SpringBoot+Nacos实现配置中心——Nacos学习 - 掘金 (juejin.cn)"),e(a)])]),U,H,P,G,n("p",null,[n("a",z,[s("Nacos配置管理-多环境配置共享 - 知乎 (zhihu.com)"),e(a)])]),n("p",null,[n("a",V,[s("Nacos共享配置(shared-configs)和扩展配(extension-config) - 简书 (jianshu.com)"),e(a)])]),W,n("p",null,[n("a",J,[s("介绍 · alibaba/Sentinel Wiki (github.com)"),e(a)])]),n("p",null,[n("a",Q,[s("Sentinel"),e(a)]),s(" 是阿里中间件团队开源的，面向分布式服务架构的轻量级高可用流量控制组件，主要以流量为切入点，从流量控制、熔断降级、系统负载保护等多个维度来帮助用户保护服务的稳定性。")]),n("p",null,[n("a",X,[s("Sentinel_ 相关技术 云烟成雨TD的博客-CSDN博客"),e(a)])]),$,n("p",null,[n("a",Y,[s("微服务系列：Spring Cloud Alibaba 之 Sentinel 详细入门 - 掘金 (juejin.cn)"),e(a)])]),n("p",null,[n("a",Z,[s("一篇文章彻底学会使用Spring Cloud Alibaba Sentinel - 知乎 (zhihu.com)"),e(a)])]),K,n("p",null,[n("a",nn,[s("sentinel-BlockException统一异常处理_sentinel 统一异常_搞钱自律的博客-CSDN博客"),e(a)])]),sn,n("p",null,[n("a",an,[s("SpringCloud Alibaba Sentinel规则持久化 - 掘金 (juejin.cn)"),e(a)])]),n("p",null,[n("a",en,[s("sentinel持久化到Nacos-push模式_小相公爱玩的博客-CSDN博客"),e(a)])]),tn,n("p",null,[n("a",pn,[s("https://wwmj.lanzoue.com/iAm1s19me1jc"),e(a)]),s(" 密码:9art")]),on,ln,cn,n("p",null,[s("启动成功浏览器访问地址 "),n("a",un,[s("http://localhost:8718"),e(a)]),s(" ，默认用户名密码："),rn]),n("p",null,[n("a",dn,[s("Sentinel的基本使用(5)-控制台使用_sentinel 控制台访问地址__微风轻起的博客-CSDN博客"),e(a)])]),n("p",null,[n("a",kn,[s("Sentinel使用教程_sentinel教程_守拙的小黑的博客-CSDN博客"),e(a)])]),n("p",null,[n("a",vn,[s("Sentinel搭建与使用 - AlwaysZmx - 博客园 (cnblogs.com)"),e(a)])]),mn,n("p",null,[n("a",gn,[s("快速启动 | Seata"),e(a)])]),bn,hn,fn,n("p",null,[n("a",_n,[s("新人文档 | Seata"),e(a)])]),yn,wn,n("p",null,[n("a",xn,[s("点击查看(或根据版本分支选择对应的资源目录)"),e(a)])]),Sn,n("p",null,[s("步骤一：启动"),n("a",qn,[s("点击下载"),e(a)]),s(),n("a",Cn,[s("https://wwmj.lanzoue.com/iOlnL19sazod"),e(a)])]),jn,Rn,Tn,En,n("p",null,[s("数据库内运行文件 "),n("a",Nn,[s("seata/script/server/db/mysql.sql at master · seata/seata (github.com)"),e(a)])]),In,n("p",null,[n("a",An,[s("db+Nacos的方式部署高可用集群模式_nacos db_柒间的博客-CSDN博客"),e(a)])]),Bn,n("p",null,[s("把config-center config.txt文件("),n("a",Fn,[s("连接直达"),e(a)]),s(")复制到本地，并做如下修改。主要修改：store.mode 变量，和数据库连接信息。")]),Ln,On,Dn,n("p",null,[s("命令启动: "),n("a",Mn,[s("seata-server.sh"),e(a)]),s(" -h 127.0.0.1 -p 8091 -m db -n 1 -e test")]),Un,n("p",null,[n("a",Hn,[s("Seata0.9.0大坑之连接MySQL8.0_seata-server0.9.0配置连接mysql8.0_月落呜啼霜满天天天的博客-CSDN博客"),e(a)])]),Pn,Gn,n("p",null,[n("a",zn,[s("Seata(二): Seata-Client集成 & 配置_seata client-CSDN博客"),e(a)])]),Vn,n("p",null,[n("a",Wn,[s("初级程序员必须懂的微服务SpringCloud GateWay - 掘金 (juejin.cn)"),e(a)])]),Jn,n("p",null,[s("然后删除掉项目的web依赖 "),n("a",Qn,[s("https://blog.csdn.net/weixin_40571937/article/details/112516295"),e(a)])]),Xn,n("p",null,[n("a",$n,[s("https://juejin.cn/post/7077197582077788167#heading-23"),e(a)])]),Yn,n("p",null,[n("a",Zn,[s("Spring Cloud Gateway自定义路由断言工厂-CSDN博客"),e(a)])]),Kn,n("p",null,[n("a",ns,[s("Spring Cloud : Gateway 网关过滤器 GatewayFilter（四）_spring cloud gateway filter condition-CSDN博客"),e(a)])]),n("p",null,[n("a",ss,[s("过滤器_gateway设置字符编码过滤 - 31种过滤器_EngineZhang的博客-CSDN博客"),e(a)])]),as,n("p",null,[n("a",es,[s("SpringCloudAlibaba - Gateway 自定义过滤器工厂_abstractnamevaluegatewayfilterfactory 扩展-CSDN博客"),e(a)])]),ts,ps,os,n("p",null,[n("a",ls,[s("spring-cloud（十三）GateWay 跨域、HTTP 超时配置_gateway 默认超时时间-CSDN博客"),e(a)])]),cs,n("p",null,[n("a",is,[s("Spring Cloud Gateway 整合阿里 Sentinel网关限流实战！ - 掘金 (juejin.cn)"),e(a)])]),n("p",null,[n("a",us,[s("Spring Cloud Gateway 整合 sentinel 实现流控熔断_gateway sentinel_张维鹏的博客-CSDN博客"),e(a)])]),rs,n("p",null,[n("a",ds,[s("全网最详细的Skywalking分布式链路追踪 - 掘金 (juejin.cn)"),e(a)])]),n("p",null,[n("a",ks,[s("SkyWalking 极简入门 | Apache SkyWalking"),e(a)])]),vs,n("p",null,[n("a",ms,[s("SkyWalking环境搭建与使用_skywalking搭建-CSDN博客"),e(a)])]),gs,n("p",null,[s("视频查看："),n("a",bs,[s("黑马程序员Java项目企业级微服务实战《学成在线》"),e(a)])]),n("p",null,[s("黑马Java微服务项目《学成在线》配套资源 在线学习："),n("a",hs,[s("https://www.bilibili.com/video/BV1j8411N7Bm/"),e(a)]),s(" 网盘链接："),n("a",fs,[s("https://pan.baidu.com/s/16iXzw7cFDk3FqG9DfPqbdg?pwd=6633"),e(a)]),s(" 提取码：6633")])])}const qs=p(u,[["render",_s],["__file","springCloud.html.vue"]]);export{qs as default};
