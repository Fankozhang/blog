import{_ as d}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c as l,a as t,b as n,e,f as a,r as i}from"./app.a6537d53.js";const p={},r=t("h1",{id:"python",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#python","aria-hidden":"true"},"#"),n(" python")],-1),c={href:"https://www.python.org/downloads/",target:"_blank",rel:"noopener noreferrer"},u=a('<h2 id="python主要的数据类型和方法" tabindex="-1"><a class="header-anchor" href="#python主要的数据类型和方法" aria-hidden="true">#</a> python主要的数据类型和方法</h2><p>ai生成 请生成一张表格，一列展示python中所有的数据类型，一列展示这种数据类型存储什么类型的数据，一列展示这种数据类型的特点，一列展示这种数据类型有哪些方法，一列展示这种方法的使用方法和作用。</p><table><thead><tr><th>数据类型</th><th>存储类型</th><th>特点</th><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>int</td><td>整数</td><td>精度有限</td><td><code>__add__</code></td><td>加法</td></tr><tr><td>int</td><td>整数</td><td>精度有限</td><td><code>__sub__</code></td><td>减法</td></tr><tr><td>int</td><td>整数</td><td>精度有限</td><td><code>__mul__</code></td><td>乘法</td></tr><tr><td>int</td><td>整数</td><td>精度有限</td><td><code>__truediv__</code></td><td>真除法</td></tr><tr><td>int</td><td>整数</td><td>精度有限</td><td><code>__floordiv__</code></td><td>整除法</td></tr><tr><td>int</td><td>整数</td><td>精度有限</td><td><code>__mod__</code></td><td>取模</td></tr><tr><td>int</td><td>整数</td><td>精度有限</td><td><code>__pow__</code></td><td>幂运算</td></tr><tr><td>int</td><td>整数</td><td>精度有限</td><td><code>__abs__</code></td><td>取绝对值</td></tr><tr><td>int</td><td>整数</td><td>精度有限</td><td><code>__bool__</code></td><td>转换为布尔类型</td></tr><tr><td>float</td><td>浮点数</td><td>精度有限</td><td><code>__add__</code></td><td>加法</td></tr><tr><td>float</td><td>浮点数</td><td>精度有限</td><td><code>__sub__</code></td><td>减法</td></tr><tr><td>float</td><td>浮点数</td><td>精度有限</td><td><code>__mul__</code></td><td>乘法</td></tr><tr><td>float</td><td>浮点数</td><td>精度有限</td><td><code>__truediv__</code></td><td>真除法</td></tr><tr><td>float</td><td>浮点数</td><td>精度有限</td><td><code>__floordiv__</code></td><td>整除法</td></tr><tr><td>float</td><td>浮点数</td><td>精度有限</td><td><code>__mod__</code></td><td>取模</td></tr><tr><td>float</td><td>浮点数</td><td>精度有限</td><td><code>__pow__</code></td><td>幂运算</td></tr><tr><td>float</td><td>浮点数</td><td>精度有限</td><td><code>__abs__</code></td><td>取绝对值</td></tr><tr><td>float</td><td>浮点数</td><td>精度有限</td><td><code>__bool__</code></td><td>转换为布尔类型</td></tr><tr><td>complex</td><td>复数</td><td>实部和虚部都是浮点数</td><td><code>__add__</code></td><td>加法</td></tr><tr><td>complex</td><td>复数</td><td>实部和虚部都是浮点数</td><td><code>__sub__</code></td><td>减法</td></tr><tr><td>complex</td><td>复数</td><td>实部和虚部都是浮点数</td><td><code>__mul__</code></td><td>乘法</td></tr><tr><td>complex</td><td>复数</td><td>实部和虚部都是浮点数</td><td><code>__truediv__</code></td><td>真除法</td></tr><tr><td>complex</td><td>复数</td><td>实部和虚部都是浮点数</td><td><code>__floordiv__</code></td><td>整除法</td></tr><tr><td>complex</td><td>复数</td><td>实部和虚部都是浮点数</td><td><code>__mod__</code></td><td>取模</td></tr><tr><td>complex</td><td>复数</td><td>实部和虚部都是浮点数</td><td><code>__pow__</code></td><td>幂运算</td></tr><tr><td>complex</td><td>复数</td><td>实部和虚部都是浮点数</td><td><code>__abs__</code></td><td>取模</td></tr><tr><td>complex</td><td>复数</td><td>实部和虚部都是浮点数</td><td><code>__bool__</code></td><td>转换为布尔类型</td></tr><tr><td>bool</td><td>布尔值</td><td>只有True和False</td><td><code>__and__</code></td><td>与运算</td></tr><tr><td>bool</td><td>布尔值</td><td>只有True和False</td><td><code>__or__</code></td><td>或运算</td></tr><tr><td>bool</td><td>布尔值</td><td>只有True和False</td><td><code>__not__</code></td><td>非运算</td></tr><tr><td>bool</td><td>布尔值</td><td>只有True和False</td><td><code>__bool__</code></td><td>转换为整数</td></tr><tr><td>str</td><td>字符串</td><td>一串字符</td><td><code>__add__</code></td><td>连接字符串</td></tr><tr><td>str</td><td>字符串</td><td>一串字符</td><td><code>__mul__</code></td><td>重复字符串</td></tr><tr><td>str</td><td>字符串</td><td>一串字符</td><td><code>__getitem__</code></td><td>获取指定位置的字符</td></tr><tr><td>str</td><td>字符串</td><td>一串字符</td><td><code>__len__</code></td><td>获取字符串长度</td></tr><tr><td>str</td><td>字符串</td><td>一串字符</td><td><code>__contains__</code></td><td>判断是否包含子串</td></tr><tr><td>str</td><td>字符串</td><td>一串字符</td><td><code>upper()</code></td><td>转换为大写</td></tr><tr><td>str</td><td>字符串</td><td>一串字符</td><td><code>lower()</code></td><td>转换为小写</td></tr><tr><td>str</td><td>字符串</td><td>一串字符</td><td><code>strip()</code></td><td>去除两端的空格</td></tr><tr><td>str</td><td>字符串</td><td>一串字符</td><td><code>replace()</code></td><td>替换子串</td></tr><tr><td>str</td><td>字符串</td><td>一串字符</td><td><code>split()</code></td><td>按照指定分隔符分割为列表</td></tr><tr><td>list</td><td>列表</td><td>一组有序的元素</td><td><code>__add__</code></td><td>连接列表</td></tr><tr><td>list</td><td>列表</td><td>一组有序的元素</td><td><code>__mul__</code></td><td>重复列表</td></tr><tr><td>list</td><td>列表</td><td>一组有序的元素</td><td><code>__getitem__</code></td><td>获取元素</td></tr><tr><td>list</td><td>列表</td><td>一组有序的元素</td><td><code>__setitem__</code></td><td>设置元素</td></tr><tr><td>list</td><td>列表</td><td>一组有序的元素</td><td><code>__delitem__</code></td><td>删除元素</td></tr><tr><td>list</td><td>列表</td><td>一组有序的元素</td><td><code>__len__</code></td><td>获取列表长度</td></tr><tr><td>list</td><td>列表</td><td>一组有序的元素</td><td><code>__contains__</code></td><td>判断是否包含元素</td></tr><tr><td>list</td><td>列表</td><td>一组有序的元素</td><td><code>append()</code></td><td>在列表末尾添加元素</td></tr><tr><td>list</td><td>列表</td><td>一组有序的元素</td><td><code>extend()</code></td><td>在列表末尾添加另一个列表的元素</td></tr></tbody></table><table><thead><tr><th>类型</th><th>描述</th><th>示例</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>list</td><td>列表</td><td>一组有序的元素</td><td><code>insert()</code></td><td>在指定位置插入元素</td></tr><tr><td>list</td><td>列表</td><td>一组有序的元素</td><td><code>remove()</code></td><td>删除指定元素</td></tr><tr><td>list</td><td>列表</td><td>一组有序的元素</td><td><code>pop()</code></td><td>删除并返回指定位置的元素</td></tr><tr><td>list</td><td>列表</td><td>一组有序的元素</td><td><code>index()</code></td><td>返回指定元素的位置</td></tr><tr><td>list</td><td>列表</td><td>一组有序的元素</td><td><code>count()</code></td><td>返回指定元素在列表中出现的次数</td></tr><tr><td>list</td><td>列表</td><td>一组有序的元素</td><td><code>sort()</code></td><td>对列表进行排序</td></tr><tr><td>list</td><td>列表</td><td>一组有序的元素</td><td><code>reverse()</code></td><td>反转列表</td></tr><tr><td>tuple</td><td>元组</td><td>一组有序的不可变元素</td><td><code>__add__</code></td><td>连接元组</td></tr><tr><td>tuple</td><td>元组</td><td>一组有序的不可变元素</td><td><code>__mul__</code></td><td>重复元组</td></tr><tr><td>tuple</td><td>元组</td><td>一组有序的不可变元素</td><td><code>__getitem__</code></td><td>获取元素</td></tr><tr><td>tuple</td><td>元组</td><td>一组有序的不可变元素</td><td><code>__len__</code></td><td>获取元组长度</td></tr><tr><td>tuple</td><td>元组</td><td>一组有序的不可变元素</td><td><code>__contains__</code></td><td>判断是否包含元素</td></tr><tr><td>set</td><td>集合</td><td>一组无序的元素</td><td><code>__or__</code></td><td>并集</td></tr><tr><td>set</td><td>集合</td><td>一组无序的元素</td><td><code>__and__</code></td><td>交集</td></tr><tr><td>set</td><td>集合</td><td>一组无序的元素</td><td><code>__sub__</code></td><td>差集</td></tr><tr><td>set</td><td>集合</td><td>一组无序的元素</td><td><code>__xor__</code></td><td>对称差集</td></tr><tr><td>set</td><td>集合</td><td>一组无序的元素</td><td><code>__len__</code></td><td>获取集合元素个数</td></tr><tr><td>set</td><td>集合</td><td>一组无序的元素</td><td><code>__contains__</code></td><td>判断元素是否在集合中</td></tr><tr><td>set</td><td>集合</td><td>一组无序的元素</td><td><code>add()</code></td><td>添加元素到集合中</td></tr><tr><td>set</td><td>集合</td><td>一组无序的元素</td><td><code>remove()</code></td><td>删除集合中的指定元素</td></tr><tr><td>set</td><td>集合</td><td>一组无序的元素</td><td><code>pop()</code></td><td>随机删除并返回一个元素</td></tr><tr><td>set</td><td>集合</td><td>一组无序的元素</td><td><code>clear()</code></td><td>清空集合</td></tr><tr><td>dict</td><td>字典</td><td>一组键值对</td><td><code>__len__</code></td><td>获取字典中键值对的个数</td></tr><tr><td>dict</td><td>字典</td><td>一组键值对</td><td><code>__contains__</code></td><td>判断键是否存在于字典中</td></tr><tr><td>dict</td><td>字典</td><td>一组键值对</td><td><code>keys()</code></td><td>获取字典中所有的键</td></tr><tr><td>dict</td><td>字典</td><td>一组键值对</td><td><code>values()</code></td><td>获取字典中所有的值</td></tr><tr><td>dict</td><td>字典</td><td>一组键值对</td><td><code>items()</code></td><td>获取字典中所有的键值对</td></tr><tr><td>dict</td><td>字典</td><td>一组键值对</td><td><code>get()</code></td><td>获取指定键的值，如果不存在则返回默认值</td></tr><tr><td>dict</td><td>字典</td><td>一组键值对</td><td><code>pop()</code></td><td>删除指定键并返回对应的值</td></tr><tr><td>dict</td><td>字典</td><td>一组键值对</td><td><code>popitem()</code></td><td>随机删除并返回一个键值对</td></tr><tr><td>dict</td><td>字典</td><td>一组键值对</td><td><code>clear()</code></td><td>清空字典</td></tr></tbody></table><h2 id="文件操作" tabindex="-1"><a class="header-anchor" href="#文件操作" aria-hidden="true">#</a> 文件操作</h2>',5),m={href:"https://www.runoob.com/python/file-methods.html",target:"_blank",rel:"noopener noreferrer"},h=a(`<p>open() 方法用于打开一个文件，并返回文件对象，在对文件进行处理过程都需要使用到这个函数</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">&#39;r&#39;</span><span class="token punctuation">,</span> buffering<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> errors<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> newline<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> closefd<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> opener<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数说明:</p><ul><li>file: 必需，文件路径（相对或者绝对路径）。</li><li>mode: 可选，文件打开模式</li><li>buffering: 设置缓冲</li><li>encoding: 一般使用utf8</li><li>errors: 报错级别</li><li>newline: 区分换行符</li><li>closefd: 传入的file参数类型</li><li>opener: 设置自定义开启器，开启器的返回值必须是一个打开的文件描述符。</li></ul><p>mode 参数有：</p><table><thead><tr><th style="text-align:left;">模式</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">t</td><td style="text-align:left;">文本模式 (默认)。</td></tr><tr><td style="text-align:left;">x</td><td style="text-align:left;">写模式，新建一个文件，如果该文件已存在则会报错。</td></tr><tr><td style="text-align:left;">b</td><td style="text-align:left;">二进制模式。</td></tr><tr><td style="text-align:left;">+</td><td style="text-align:left;">打开一个文件进行更新(可读可写)。</td></tr><tr><td style="text-align:left;">U</td><td style="text-align:left;">通用换行模式（不推荐）。</td></tr><tr><td style="text-align:left;">r</td><td style="text-align:left;">以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td></tr><tr><td style="text-align:left;">rb</td><td style="text-align:left;">以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。一般用于非文本文件如图片等。</td></tr><tr><td style="text-align:left;">r+</td><td style="text-align:left;">打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td style="text-align:left;">rb+</td><td style="text-align:left;">以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。一般用于非文本文件如图片等。</td></tr><tr><td style="text-align:left;">w</td><td style="text-align:left;">打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td style="text-align:left;">wb</td><td style="text-align:left;">以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td></tr><tr><td style="text-align:left;">w+</td><td style="text-align:left;">打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td style="text-align:left;">wb+</td><td style="text-align:left;">以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td></tr><tr><td style="text-align:left;">a</td><td style="text-align:left;">打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td style="text-align:left;">ab</td><td style="text-align:left;">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td style="text-align:left;">a+</td><td style="text-align:left;">打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td></tr><tr><td style="text-align:left;">ab+</td><td style="text-align:left;">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td></tr></tbody></table><p>默认为文本模式，如果要以二进制模式打开，加上 <strong>b</strong> 。</p><p>file 对象使用 open 函数来创建，下表列出了 file 对象常用的函数：</p>`,8),v=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"序号"),t("th",{style:{"text-align":"left"}},"方法及描述")])],-1),_=t("td",{style:{"text-align":"left"}},"1",-1),k={style:{"text-align":"left"}},b={href:"https://www.runoob.com/python/file-close.html",target:"_blank",rel:"noopener noreferrer"},f=t("td",{style:{"text-align":"left"}},"2",-1),y={style:{"text-align":"left"}},g={href:"https://www.runoob.com/python/file-flush.html",target:"_blank",rel:"noopener noreferrer"},x=t("td",{style:{"text-align":"left"}},"3",-1),w={style:{"text-align":"left"}},q={href:"https://www.runoob.com/python/file-fileno.html",target:"_blank",rel:"noopener noreferrer"},j=t("td",{style:{"text-align":"left"}},"4",-1),P={style:{"text-align":"left"}},T={href:"https://www.runoob.com/python/file-isatty.html",target:"_blank",rel:"noopener noreferrer"},C=t("td",{style:{"text-align":"left"}},"5",-1),z={style:{"text-align":"left"}},E={href:"https://www.runoob.com/python/file-next.html",target:"_blank",rel:"noopener noreferrer"},F=t("td",{style:{"text-align":"left"}},"6",-1),N={style:{"text-align":"left"}},D={href:"https://www.runoob.com/python/python-file-read.html",target:"_blank",rel:"noopener noreferrer"},L=t("td",{style:{"text-align":"left"}},"7",-1),S={style:{"text-align":"left"}},A={href:"https://www.runoob.com/python/file-readline.html",target:"_blank",rel:"noopener noreferrer"},B=t("td",{style:{"text-align":"left"}},"8",-1),U={style:{"text-align":"left"}},M={href:"https://www.runoob.com/python/file-readlines.html",target:"_blank",rel:"noopener noreferrer"},R=t("td",{style:{"text-align":"left"}},"9",-1),W={style:{"text-align":"left"}},V={href:"https://www.runoob.com/python/file-seek.html",target:"_blank",rel:"noopener noreferrer"},H=t("td",{style:{"text-align":"left"}},"10",-1),I={style:{"text-align":"left"}},K={href:"https://www.runoob.com/python/file-tell.html",target:"_blank",rel:"noopener noreferrer"},X=t("td",{style:{"text-align":"left"}},"11",-1),G={style:{"text-align":"left"}},J={href:"https://www.runoob.com/python/file-truncate.html",target:"_blank",rel:"noopener noreferrer"},O=t("td",{style:{"text-align":"left"}},"12",-1),Q={style:{"text-align":"left"}},Y={href:"https://www.runoob.com/python/python-file-write.html",target:"_blank",rel:"noopener noreferrer"},Z=t("td",{style:{"text-align":"left"}},"13",-1),$={style:{"text-align":"left"}},tt={href:"https://www.runoob.com/python/file-writelines.html",target:"_blank",rel:"noopener noreferrer"},nt=a(`<h3 id="读取文件" tabindex="-1"><a class="header-anchor" href="#读取文件" aria-hidden="true">#</a> 读取文件</h3><p>简单示例：读取同目录下 a.txt 文件的内容打印出来</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>f<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;a.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># close 方法解除程序对文件的占用</span>
f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过文件路径来获取文件</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>fs<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;D:/pythonDemo/print-test/x.vue&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;r&#39;</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

fs<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 with open() as 可以自动解除对程序的占用</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;a.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f2<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>f2<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="写入" tabindex="-1"><a class="header-anchor" href="#写入" aria-hidden="true">#</a> 写入</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#1.打开文件</span>
f <span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;a.txt&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;w&#39;</span><span class="token punctuation">)</span>
<span class="token comment">#2.文件写入</span>
f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&#39;hello world&#39;</span><span class="token punctuation">)</span>
<span class="token comment">#3.内容刷新</span>
f<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># close方法内置了 flush 的功能</span>
<span class="token comment"># f.close()</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：</p><p>W模式，文件不存在，会创建新文件 W模式，文件存在，会清空原有内容</p><p>直接调用wrte,内容并未真正写入文件，而是会积攒在程序的内存中，称之为缓冲区 当调用flush的时候，内容会真正写入文件 这样做是避免频繁的操作硬盘，导致效率下降（攒一堆，一次性写磁盘）</p><h3 id="追加内容" tabindex="-1"><a class="header-anchor" href="#追加内容" aria-hidden="true">#</a> 追加内容</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#1.打开文件</span>
f <span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;a.txt&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span>
<span class="token comment">#2.文件写入</span>
f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&#39; hello world&#39;</span><span class="token punctuation">)</span>
<span class="token comment">#3.内容刷新</span>
f<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>
f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意事项： a模式，文件不存在，会创建新文件 a模式，文件存在，会在原有内容后面继续写入中 可以使用”\\n”来写出换行符</p><h3 id="文件备份" tabindex="-1"><a class="header-anchor" href="#文件备份" aria-hidden="true">#</a> 文件备份</h3><p>以下将 a.txt 内容备份到 b.txt 文件里，没有 b.txt 文件会自动创建</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>f=open(&#39;a.txt&#39;,&#39;r&#39;)
fs=open(&#39;b.txt&#39;,&#39;w&#39;)
fs.write(f.read())
f.close()
fs.close()
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="异常捕获" tabindex="-1"><a class="header-anchor" href="#异常捕获" aria-hidden="true">#</a> 异常捕获</h2><p>以下为简单的<em>try....except...else</em>的语法： 此处 Exception 是顶层，捕获所有异常</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>try:
    print(1/0)
except Exception as e:
    print(e)
else:
    print(&#39;我是else,是没有异常的时候执行的代码&#39;)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>try-finally 语句无论是否发生异常都将执行最后的代码。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>try:
    f=open(&#39;test.txt&#39;,&#39;r&#39;)
except Exception as e:
    f =open(&#39;test.txt&#39;,&#39;w&#39;)
else:
    print(&#39;没有异常，真开心&#39;)
finally:
    f.close()
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>异常具有传递性</p><h2 id="模块" tabindex="-1"><a class="header-anchor" href="#模块" aria-hidden="true">#</a> 模块</h2><p><strong>什么是模块</strong> Python模块（Module）,是一个Python文件，以.py结尾.模块能定义函数，类和变量,模块里也能包含可执行的代码 模块的作用：python中有很多各种不同的模块，每一个模块都可以帮助我们快速的实现一些功能，比如实现和时间相关的功能就可以使用time模块,我们可以认为一个模块就是一个工具包，每一个工具包中都有各种不同的工具供我们使用,进而实现各种不同的功能. 大白话：模块就是一个Python文件，里面有类、函数、变量等，我们可以拿过来用（导入模块去使用）</p><p><strong>导入方式</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>语法一:import + 模块名
语法二:import + 模块名 + as + 别名
语法三:from + 模块名 + import + *
以上均为全部导入
前两者的区别在于当调用模块名很长时，可选择第二种
后两者的区别在于当使用第二种语法导入函数是需要别名作为前缀如：别名.fun()
而使用第三种语法时可直接使用：fun()
但是当程序中导入多个模块时第三种语法不易区分fun()来自于哪个模块，此时就体现了第二种语法的好处（因为它使用时带前缀即别名)
在python3中使用语法三需要在同一级文件下创建一个__init__包,__init__包要用__all__=[]将需要调用的模块放进去才能用，没有放进去的模块不可在此语法中调用

语法四:from + 模块名 + import + 指定部分（如：fun1、fun2、name2）
#功能定义别名
from + 模块名 + import + 功能 as 别名
这种语法属于部分导入
其缺点和语法三相同,无法分辨所调用来自哪个模块

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1.如何自定义模块并导入？ 在Python代码文件中正常写代码即可，通过import、from关键字和导入Python内置模块一样导入即可使用。 2.main变量的功能是？ if——main——=”——main——”表示，只有当程序是直接执行的才会进入 f内部，如果是被导入的，则f无法进入 3.注意事项 不同模块，同名的功能，如果都被导入，那么后导入的会覆盖先导入的 ——al——变量可以控制import*的时候哪些功能可以被导入</p><h2 id="python包" tabindex="-1"><a class="header-anchor" href="#python包" aria-hidden="true">#</a> python包</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1.什么是Python的包？
包就是一个文件夹，里面可以存放许多Python的模块（代码文件)，通过包，在逻辑上将一批模块归为一类，方便使用。
2.__init__.py文件的作用？
创建包会默认自动创建的文件，通过这个文件来表示一个文件夹是Python的包，而非普通的文件夹。
3.all变量的作用？
同模块中学习到的是一个作用，控import*能够导入的内容


包里面要有  __init__.py  文件
__init__.py  文件中   __all__=[&#39;module1&#39;,&#39;module2&#39;]  控制import * 能访问的模块
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="安装第三方包-pip" tabindex="-1"><a class="header-anchor" href="#安装第三方包-pip" aria-hidden="true">#</a> 安装第三方包~pip</h2><p>第三方包的安装非常简单，我们只需要使用Python内置的pip程序即可。 打开我们许久未见的：命令提示符程序，在里面输入： pip install 包名称 即可通过网络快速安装第三方包</p>`,33),st={href:"https://pypi",target:"_blank",rel:"noopener noreferrer"},et=t("p",null,"pip安装第三方库报错pip._vendor.urllib3.exceptions.ReadTimeoutError: HTTPSConnectionPool解决方法",-1),at={href:"https://blog.csdn.net/qq_40803429/article/details/121671905",target:"_blank",rel:"noopener noreferrer"},dt=t("p",null,"经测试，以下安装有效",-1),ot={href:"http://pypi.douban.com/simple/",target:"_blank",rel:"noopener noreferrer"},lt={href:"http://pypi.douban.com",target:"_blank",rel:"noopener noreferrer"},it=a(`<p>vscode下载的python包通常会存放在电脑的Python安装目录下的Lib/site-packages文件夹中。具体路径可能因操作系统和Python版本而异。</p><h2 id="python数据和json数据的相互转化" tabindex="-1"><a class="header-anchor" href="#python数据和json数据的相互转化" aria-hidden="true">#</a> Python数据和Json数据的相互转化</h2><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>#导入json模块

import json

#准备符合格式json格式要求的oython数据

data = [{&quot;name&quot;:&quot;老王&quot;,&quot;age&quot;:16},{&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:20}]

#通过json.dumps(data)方法把python数据转化为了json数据,ensure_ascii=False不适用ascll编码

data= json.dumps(data)
data=json.dumps(data,ensure_ascii=False)

#通过json.loads(data)方法把json数据转化为了python数据

data= json.loads(data)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="pyecharts" tabindex="-1"><a class="header-anchor" href="#pyecharts" aria-hidden="true">#</a> pyecharts</h2>`,4),pt={href:"https://pyecharts.org/#/zh-cn/intro",target:"_blank",rel:"noopener noreferrer"},rt={href:"https://gallery.pyecharts.org/#/README",target:"_blank",rel:"noopener noreferrer"},ct=a(`<p>下载pyecharts包；使用时注意pyecharts版本，旧版文档，使用方法不同</p><p>通过pyecharts会在你的workspace中出现一个render的html ,通过使用os模块的os.system(&quot;render.html&quot;)自动打开html文件</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>from pyecharts.charts import Bar
from pyecharts import options as opts
import os
 
bar = Bar()
bar.add_xaxis([&quot;衬衫&quot;, &quot;毛衣&quot;, &quot;领带&quot;, &quot;裤子&quot;, &quot;风衣&quot;, &quot;高跟鞋&quot;, &quot;袜子&quot;])
bar.add_yaxis(&quot;商家A&quot;, [114, 55, 27, 101, 125, 27, 105])
bar.add_yaxis(&quot;商家B&quot;, [57, 134, 137, 129, 145, 60, 49])
bar.set_global_opts(title_opts=opts.TitleOpts(title=&quot;某商场销售情况&quot;))
bar.render()
 
os.system(&quot;render.html&quot;)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="python-类型注解" tabindex="-1"><a class="header-anchor" href="#python-类型注解" aria-hidden="true">#</a> python 类型注解</h2>`,4),ut={href:"https://blog.csdn.net/zy010101/article/details/124319230",target:"_blank",rel:"noopener noreferrer"},mt=t("h2",{id:"python连接mysql",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#python连接mysql","aria-hidden":"true"},"#"),n(" python连接mysql")],-1),ht={href:"https://blog.csdn.net/XC_SunnyBoy/article/details/108546128",target:"_blank",rel:"noopener noreferrer"},vt=a(`<p>安装 pymysql</p><p>pymysql.connect() 方法返回的是Connections模块下的Connection 实例，connect() 方法传参就是在给Connection类的 <em><em>init</em></em> 初始化魔术方法参数，也可以理解为 connect() 方法就是在创建新的 Connetion 类</p><table><thead><tr><th>connect() / Connection初始化 常用参数</th><th>说明</th></tr></thead><tbody><tr><td>host</td><td>主机ip</td></tr><tr><td>user</td><td>用户名</td></tr><tr><td>password</td><td>密码</td></tr><tr><td>database</td><td>数据库</td></tr><tr><td>port</td><td>端口号</td></tr><tr><td>charset</td><td>字符集</td></tr></tbody></table><p><strong>数据库连接</strong></p><p>一定要注意链接的信息要填写准确，否则会报错</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> pymysql

<span class="token comment"># 打开数据库连接   autocommit=True 设置自动提交</span>
db <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">&#39;localhost&#39;</span><span class="token punctuation">,</span>user<span class="token operator">=</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">,</span> database<span class="token operator">=</span><span class="token string">&#39;python&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">,</span>autocommit<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

<span class="token comment"># 使用 cursor() 方法创建一个游标对象 cursor</span>

cursor <span class="token operator">=</span> db<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 数据库操作需要使用Cursor类的实例（即通过 db.cursor() 创建的 cursor 游标对象）提供的 execute() 方法，执行SQL语句，成功则返回结果</span>
<span class="token comment"># 这里插入数据的时候插入的表名有个需要注意的地方，插入表名的时候可以带着库名，否则可能有意想不到的错误</span>
sql <span class="token operator">=</span> <span class="token string">&quot;insert into t_book(book_name,price,stock) values(&#39;西游记&#39;,100,100)&quot;</span>
s<span class="token operator">=</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>
<span class="token comment"># 修改数据时，通过commit确认</span>
<span class="token comment"># autocommit=True 设置自动提交后，可以不用这一步</span>
db<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>

sql2<span class="token operator">=</span><span class="token string">&#39;select * from t_book&#39;</span>
cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql2<span class="token punctuation">)</span>
<span class="token comment">#调用了fetchall方法：查询时获取结果集中的所有行，一行构成一个元组，然后再将这些元组返回（即嵌套元组）</span>
res<span class="token operator">=</span>cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>


<span class="token comment"># 关闭数据库连接</span>
db<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>获取查询结果集的方法</strong></p><p>当调用 cursor.execute(sql) 方法查询数据的时候，如果执行成功，获取查询的结果集的方法有</p><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>fetchone()</td><td>获取结果集的下一行</td></tr><tr><td>fetchmany(size=None)</td><td>size指定返回的行数,None则返回空元组</td></tr><tr><td>fetchall()</td><td>返回剩下的所有行,如果走到末尾,就返回空元组,否则返回一个元组,其元素是每一行的记录封装的一个元组</td></tr><tr><td>cursor.rownumber</td><td>返回当前行号.可以修改,支持负数</td></tr><tr><td>cursor.rowcount</td><td>返回的总行数</td></tr></tbody></table><p>注意： fetch操作的是结果集，结果集是保存在客户端的，也就是说fetch的时候，查询已经结束了</p><h2 id="python爬虫" tabindex="-1"><a class="header-anchor" href="#python爬虫" aria-hidden="true">#</a> python爬虫</h2>`,11),_t={href:"https://juejin.cn/post/6999135569322180621",target:"_blank",rel:"noopener noreferrer"},kt={href:"https://juejin.cn/post/6844903789825114126",target:"_blank",rel:"noopener noreferrer"},bt={href:"https://juejin.cn/post/6844903791544762381",target:"_blank",rel:"noopener noreferrer"},ft=a(`<h3 id="使用requests库-get请求" tabindex="-1"><a class="header-anchor" href="#使用requests库-get请求" aria-hidden="true">#</a> 使用requests库 （get请求）</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> requests

<span class="token comment"># 目标url</span>
url <span class="token operator">=</span> <span class="token string">&quot;https://www.baidu.com&quot;</span>

<span class="token comment"># 向目标url发送get请求</span>
response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>

<span class="token comment"># 打印响应内容</span>
response<span class="token punctuation">.</span>encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span>  <span class="token comment">#设置编码格式</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 注意这里！不设置编码格式时，推测出的编码字符集</span>


<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>url<span class="token punctuation">)</span>							<span class="token comment"># 打印响应的url</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span>					<span class="token comment"># 打印响应的状态码</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>request<span class="token punctuation">.</span>headers<span class="token punctuation">)</span>				<span class="token comment"># 打印响应对象的请求头</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>headers<span class="token punctuation">)</span>						<span class="token comment"># 打印响应头</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>request<span class="token punctuation">.</span>_cookies<span class="token punctuation">)</span>			<span class="token comment"># 打印请求携带的cookies</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span>						<span class="token comment"># 打印响应中携带的cookies</span>

<span class="token comment"># 把页面源码写入文件中</span>
f<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;baidu.html&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;w&#39;</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">&#39;UTF-8&#39;</span><span class="token punctuation">)</span>
f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
f<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>
f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># get方法有参</span>
cs_url <span class="token operator">=</span> <span class="token string">&#39;http://www.so.com/s&#39;</span>
param  <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;ie&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;q&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;query&#39;</span><span class="token punctuation">}</span>
r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get <span class="token punctuation">(</span>cs_url<span class="token punctuation">,</span> params <span class="token operator">=</span> param<span class="token punctuation">)</span>
<span class="token keyword">print</span> r<span class="token punctuation">.</span>url
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1.response.text是requests模块按照chardet模块推测出的编码字符集进行解码的结果</p><p>2.网络传输的字符串都是bytes类型的，所以response.text = response.content.decode(&#39;推测出的编码字符集&#39;)</p><h3 id="post请求" tabindex="-1"><a class="header-anchor" href="#post请求" aria-hidden="true">#</a> post请求</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> requests
<span class="token comment"># 目标url</span>
url <span class="token operator">=</span> <span class="token string">&quot;https://www.oschina.net/MjAyMi8xLzE2/v1/search/index&quot;</span>
<span class="token comment"># 请求体</span>
data<span class="token operator">=</span><span class="token punctuation">{</span>
    <span class="token string">&quot;from&quot;</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token string">&quot;keyword&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;python&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;size&quot;</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>
    <span class="token string">&quot;type&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;DEFAULT_ALL&quot;</span>
<span class="token punctuation">}</span>
<span class="token comment">#请求头</span>
headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;User-Agent&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36 Edg/111.0.1661.62&quot;</span><span class="token punctuation">}</span>
<span class="token comment"># 向目标url发送get请求</span>
response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
<span class="token comment">#如果返回的数据是json,可以直接resp.json()</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="上传文件" tabindex="-1"><a class="header-anchor" href="#上传文件" aria-hidden="true">#</a> 上传文件</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>url = &#39;https://httpbin.org/post&#39;
files = {&#39;file&#39;: open(&#39;image.png&#39;, &#39;rb&#39;)}
response = requests.post(url, files=files)
print(response.text)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8);function yt(gt,xt){const s=i("ExternalLinkIcon");return o(),l("div",null,[r,t("p",null,[n("下载： "),t("a",c,[n("Download Python | Python.org"),e(s)]),n(" 安装时勾选 add to path")]),u,t("p",null,[t("a",m,[n("Python File(文件) 方法 | 菜鸟教程 (runoob.com)"),e(s)])]),h,t("table",null,[v,t("tbody",null,[t("tr",null,[_,t("td",k,[t("a",b,[n("file.close()"),e(s)]),n("关闭文件。关闭后文件不能再进行读写操作。")])]),t("tr",null,[f,t("td",y,[t("a",g,[n("file.flush()"),e(s)]),n("刷新文件内部缓冲，直接把内部缓冲区的数据立刻写入文件, 而不是被动的等待输出缓冲区写入。")])]),t("tr",null,[x,t("td",w,[t("a",q,[n("file.fileno()"),e(s)]),n("返回一个整型的文件描述符(file descriptor FD 整型), 可以用在如os模块的read方法等一些底层操作上。")])]),t("tr",null,[j,t("td",P,[t("a",T,[n("file.isatty()"),e(s)]),n("如果文件连接到一个终端设备返回 True，否则返回 False。")])]),t("tr",null,[C,t("td",z,[t("a",E,[n("file.next()"),e(s)]),n("返回文件下一行。")])]),t("tr",null,[F,t("td",N,[n("[file.read("),t("a",D,[n("size])"),e(s)]),n("从文件读取指定的字节数，如果未给定或为负则读取所有。")])]),t("tr",null,[L,t("td",S,[n("[file.readline("),t("a",A,[n("size])"),e(s)]),n('读取整行，包括 "\\n" 字符。')])]),t("tr",null,[B,t("td",U,[n("[file.readlines("),t("a",M,[n("sizeint])"),e(s)]),n("读取所有行并返回列表，若给定sizeint>0，则是设置一次读多少字节，这是为了减轻读取压力。")])]),t("tr",null,[R,t("td",W,[n("[file.seek(offset"),t("a",V,[n(", whence])"),e(s)]),n("设置文件当前位置")])]),t("tr",null,[H,t("td",I,[t("a",K,[n("file.tell()"),e(s)]),n("返回文件当前位置。")])]),t("tr",null,[X,t("td",G,[n("[file.truncate("),t("a",J,[n("size])"),e(s)]),n("截取文件，截取的字节通过size指定，默认为当前文件位置。")])]),t("tr",null,[O,t("td",Q,[t("a",Y,[n("file.write(str)"),e(s)]),n("将字符串写入文件，返回的是写入的字符长度。")])]),t("tr",null,[Z,t("td",$,[t("a",tt,[n("file.writelines(sequence)"),e(s)]),n("向文件写入一个序列字符串列表，如果需要换行则要自己加入每行的换行符。")])])])]),nt,t("p",null,[n("我们可以通过如下命令，让其连接国内的网站进行包的安装： pip install -i "),t("a",st,[n("https://pypi"),e(s)]),n("..tuna.tsinghua.edu.cn/simple 包名称 (报错了，如下)")]),et,t("p",null,[n("[(205条消息) pip安装第三方库报错pip._vendor.urllib3.exceptions.ReadTimeoutError: HTTPSConnectionPool解决方法_pip._vendor.urllib3.exceptions.sslerror: "),t("a",at,[n("ssl: dec_qq_doooppooo的博客-CSDN博客"),e(s)])]),dt,t("p",null,[n("pip --default-timeout=100 install 库名称 -i "),t("a",ot,[n("http://pypi.douban.com/simple/"),e(s)]),n(" --trusted-host "),t("a",lt,[n("pypi.douban.com"),e(s)])]),it,t("p",null,[n("文档： "),t("a",pt,[n("简介 - pyecharts - A Python Echarts Plotting Library built with love."),e(s)])]),t("p",null,[n("pyecharts-gallery 官方示例库 "),t("a",rt,[n("中文简介 - Document (pyecharts.org)"),e(s)])]),ct,t("p",null,[t("a",ut,[n("(205条消息) Python类型注解_python 注解_zy010101的博客-CSDN博客"),e(s)])]),mt,t("p",null,[n("参考： "),t("a",ht,[n("(205条消息) pymysql详解（connect连接、游标cursor、获取查询结果集、获取实时数据、解决查询数据为历史数据问题、insert into需要注意的地方）_pymysql cursor_XC_SunnyBoy的博客-CSDN博客"),e(s)])]),vt,t("p",null,[n("参考： "),t("a",_t,[n("入门学Python一定要知道的requests模块安装及使用 - 掘金 (juejin.cn)"),e(s)])]),t("p",null,[t("a",kt,[n("Python网络请求库Requests，妈妈再也不会担心我的网络请求了(一) - 掘金 (juejin.cn)"),e(s)])]),t("p",null,[t("a",bt,[n("Python网络请求库Requests，妈妈再也不会担心我的网络请求了(二) - 掘金 (juejin.cn)"),e(s)])]),ft])}const jt=d(p,[["render",yt],["__file","python.html.vue"]]);export{jt as default};
