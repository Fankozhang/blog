import{_ as c}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as l,c as i,a as n,b as s,e as a,f as e,r as p}from"./app.f3382309.js";const u="/blog/javaCreateSimple.png",r="/blog/javaWebCreate.png",d="/blog/javaWebCreate2.png",k="/blog/javaWebCreate3.png",m="/blog/javaWebCreate4.png",v="/blog/javaModuleCreate.png",b="/blog/javaModuleCreate2.png",g="/blog/javaModuleCreate3.png",h="/blog/javaModuleCreate4.png",f="/blog/javaModuleCreate5.png",_="/blog/javaModuleCreate6.png",y="/blog/javaModuleCreate7.png",w="/blog/javaModuleCreate8.png",S={},q=e('<h1 id="java" tabindex="-1"><a class="header-anchor" href="#java" aria-hidden="true">#</a> Java</h1><h2 id="idea快捷键" tabindex="-1"><a class="header-anchor" href="#idea快捷键" aria-hidden="true">#</a> idea快捷键</h2><p>ctrl+o : 查看类中所有方法</p><h2 id="idea热部署-加依赖" tabindex="-1"><a class="header-anchor" href="#idea热部署-加依赖" aria-hidden="true">#</a> idea热部署（加依赖）</h2>',4),j={href:"https://developer.aliyun.com/article/1410314",target:"_blank",rel:"noopener noreferrer"},x=n("h2",{id:"jrebel热部署",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#jrebel热部署","aria-hidden":"true"},"#"),s(" JRebel热部署")],-1),E=n("p",null,"电脑中文路径的问题暂未解决",-1),C={href:"https://blog.csdn.net/weixin_42694593/article/details/126448828",target:"_blank",rel:"noopener noreferrer"},M={href:"https://www.jpy.wang/page/jrebel.html",target:"_blank",rel:"noopener noreferrer"},O=n("h2",{id:"输入-java-命令报错",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#输入-java-命令报错","aria-hidden":"true"},"#"),s(" 输入 java 命令报错")],-1),F={href:"https://blog.csdn.net/weixin_43899069/article/details/115796539",target:"_blank",rel:"noopener noreferrer"},I=n("p",null,"java升级时，会在环境变量的path路径中增加以下两条路径，与我们安装java的路径重合。",-1),A=n("p",null,[n("strong",null,"解决方法："),s(" 删掉环境变量中的这两条语句， 同时找到对应文件，删除即可。")],-1),T=n("p",null,"C:\\ProgramData\\Oracle\\Java\\javapath",-1),P=n("p",null,"C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath",-1),H=n("h2",{id:"jdk",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#jdk","aria-hidden":"true"},"#"),s(" jdk")],-1),N={href:"https://zhuanlan.zhihu.com/p/673241258",target:"_blank",rel:"noopener noreferrer"},B={href:"https://blog.csdn.net/tangthh123/article/details/106837999",target:"_blank",rel:"noopener noreferrer"},D=e('<h2 id="idea创建java项目-maven" tabindex="-1"><a class="header-anchor" href="#idea创建java项目-maven" aria-hidden="true">#</a> <strong>idea创建java项目（maven）</strong></h2><h3 id="_1-创建普通java项目-quickstart" tabindex="-1"><a class="header-anchor" href="#_1-创建普通java项目-quickstart" aria-hidden="true">#</a> <strong>1 创建普通Java项目（quickstart）</strong></h3><p><img src="'+u+'" alt="javaCreateSimple" loading="lazy"></p><h3 id="_2创建普通java-web项目-maven-archetype-webapp" tabindex="-1"><a class="header-anchor" href="#_2创建普通java-web项目-maven-archetype-webapp" aria-hidden="true">#</a> 2创建普通Java web项目（maven-archetype-webapp）</h3><p><img src="'+r+`" alt="javaWebCreate" loading="lazy"></p><p>pom.xml</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;properties&gt;
  &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
  &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;
  &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;
&lt;/properties&gt;

&lt;dependencies&gt;
  &lt;dependency&gt;
    &lt;groupId&gt;junit&lt;/groupId&gt;
    &lt;artifactId&gt;junit&lt;/artifactId&gt;
    &lt;version&gt;4.12&lt;/version&gt;
    &lt;scope&gt;test&lt;/scope&gt;
  &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),L=e(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;build&gt;
  &lt;finalName&gt;simple-java-web&lt;/finalName&gt;
  &lt;plugins&gt;
    &lt;plugin&gt;

      &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;

      &lt;artifactId&gt;jetty-maven-plugin&lt;/artifactId&gt;

      &lt;version&gt;9.4.11.v20180605&lt;/version&gt;

      &lt;configuration&gt;

        &lt;scanIntervalSeconds&gt;10&lt;/scanIntervalSeconds&gt;

        &lt;webAppConfig&gt;

          &lt;contextPath&gt;/test&lt;/contextPath&gt;

        &lt;/webAppConfig&gt;

      &lt;/configuration&gt;

    &lt;/plugin&gt;

    &lt;plugin&gt;
      &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;
      &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;
      &lt;version&gt;2.2&lt;/version&gt;
      &lt;configuration&gt;
        &lt;port&gt;8081&lt;/port&gt; &lt;!--启动的端口号，默认8081 --&gt;
        &lt;path&gt;/test&lt;/path&gt; &lt;!-- 项目站点名，对外访问路径 --&gt;
        &lt;uriEncoding&gt;UTF-8&lt;/uriEncoding&gt;
        &lt;server&gt;tomcat7&lt;/server&gt;
      &lt;/configuration&gt;
    &lt;/plugin&gt;
  &lt;/plugins&gt;
&lt;/build&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+d+'" alt="javaWebCreate2" loading="lazy"><img src="'+k+'" alt="javaWebCreate3" loading="lazy"><img src="'+m+'" alt="javaWebCreate4" loading="lazy"></p>',2),R={href:"http://localhost:8080/test",target:"_blank",rel:"noopener noreferrer"},U={href:"http://localhost:8081/test",target:"_blank",rel:"noopener noreferrer"},J=e('<h3 id="_3创建多模块项目" tabindex="-1"><a class="header-anchor" href="#_3创建多模块项目" aria-hidden="true">#</a> <strong>3创建多模块项目</strong></h3><p>创建项目 项目名 maven-parent</p><p><img src="'+v+'" alt="javaModuleCreate" loading="lazy"></p><p>创建 module 3个</p><p><img src="'+b+'" alt="javaModuleCreate2" loading="lazy"></p><p><img src="'+g+'" alt="javaModuleCreate3" loading="lazy"></p><p>maven-dao maven-service maven-controller（3个模块） 创建maven-dao maven-service <strong>用quickstart</strong> 创建maven-controller <strong>用maven-archetype-webapp</strong></p><p><strong>生成目录结构</strong></p><p><img src="'+h+'" alt="javaModuleCreate4" loading="lazy"></p><p>修改所有的子模块的pom.xml配置</p><p><img src="'+f+`" alt="javaModuleCreate5" loading="lazy"></p><p>UserDao</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>package org.example.dao;

public class UserDao {
    public static void testDao(){
        System.out.println(&quot;testDao&quot;);
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>UserService</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>package org.example.service;

import org.example.dao.UserDao;

public class UserService {
    public static void testService() {
        System.out.println(&quot;userService&quot;);
        // 调用maven-dao模块的方法
        UserDao.testDao();
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>UserServlet</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>package org.example;

import org.example.service.UserService;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

@WebServlet(&quot;/user&quot;)
public class UserServlet extends HttpServlet {

    @Override
    protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        super.service(req, resp);
        System.out.println(&quot;userServlet&quot;);
        UserService.testService();
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在三个module的pom.xml引入相关联模块的依赖</p><p>dao不用引</p><p><img src="`+_+'" alt="javaModuleCreate6" loading="lazy"></p><p><img src="'+y+'" alt="javaModuleCreate7" loading="lazy"></p><p><img src="'+w+`" alt="javaModuleCreate8" loading="lazy"></p><p>配置maven命令，启动</p><h2 id="继承-多态" tabindex="-1"><a class="header-anchor" href="#继承-多态" aria-hidden="true">#</a> 继承，多态</h2><p>以下是简单示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Animals</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;移动&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;叫&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animals</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;狗叫&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dogMouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;狗吃骨头&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animals</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;猫叫&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">CatMouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;猫吃鱼&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>


    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">javaTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 下面展示的继承（Dog和Cat都继承Animals）</span>
        <span class="token class-name">Dog</span> dog <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dog<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dog<span class="token punctuation">.</span><span class="token function">dogMouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Cat</span> cat <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cat<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token namespace">cat<span class="token punctuation">.</span></span>CatMouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 下面展示的多态(Dog和Cat都重写了父类的shout方法)</span>
        <span class="token class-name">Animals</span> dogs<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dogs<span class="token punctuation">.</span><span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Animals</span> cats<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cats<span class="token punctuation">.</span><span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="集合" tabindex="-1"><a class="header-anchor" href="#集合" aria-hidden="true">#</a> 集合</h2>`,27),z={href:"https://www.runoob.com/java/java-collections.html",target:"_blank",rel:"noopener noreferrer"},G={href:"https://www.bilibili.com/video/BV1fG4y1g76v/?spm_id_from=333.337.search-card.all.click&vd_source=f25f5a8d75a3a60d5a288f726803ec11",target:"_blank",rel:"noopener noreferrer"},V={href:"https://www.pdai.tech/md/java/collection/java-collection-all.html",target:"_blank",rel:"noopener noreferrer"},W=e('<p>Lst系列集合：添加的元素是有序、可重复、有索引</p><p>Set系列集合：添加的元素是无序、不重复、无索引</p><p>Collection是单列集合的祖宗接口，它的功能是全部单列集合都可以继承使用的。</p><p>Java 中的集合（Collections）是一组用于存储和处理对象集合的类。Java 提供了多种集合接口和实现，主要分为两大类：<code>List</code>、<code>Set</code> 和 <code>Map</code>。以下是一些常用的集合操作 API 的列表，按照集合类型分类：</p><h3 id="collection-接口及主要实现类" tabindex="-1"><a class="header-anchor" href="#collection-接口及主要实现类" aria-hidden="true">#</a> Collection 接口及主要实现类</h3>',5),Q={href:"https://blog.csdn.net/xing123456jl/article/details/108044431",target:"_blank",rel:"noopener noreferrer"},K=e(`<p>Collection：单列集合类的根接口，用于存储一系列符合某种规则的元素，它有两个重要的子接口，分别是 java.util.List 与 java.util.Set。其中：</p><p>List 的特点是有索引、存取有序、可重复。 Set 的特点是无索引、存取无序（LinkedHashSet除外）、不可重复。</p><p>常用方法</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>public boolean add(E e)：把给定的对象添加到当前集合中 。
public void clear()：清空集合中所有的元素。
public boolean remove(E e)：把给定的对象在当前集合中删除。
public boolean contains(E e)：判断当前集合中是否包含给定的对象。
public boolean isEmpty()：判断当前集合是否为空。
public int size()：返回集合中元素的个数。
public Object[] toArray()：把集合中的元素，存储到数组中。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：contains 细节：底层是依赖equals方法进行判断是否存在的。 所以，如果集合中存储的是自定义对象，也想通过contains方法来判断是否包含，那么在javabean类中，一定要重写equals方法。</p><h4 id="遍历" tabindex="-1"><a class="header-anchor" href="#遍历" aria-hidden="true">#</a> 遍历</h4>`,6),Y={href:"https://blog.csdn.net/m0_51755061/article/details/115109771",target:"_blank",rel:"noopener noreferrer"},X=e(`<p><strong>迭代器遍历</strong></p><p>Iterator迭代器接口 （1）Iterator对象称为迭代器(设计模式的一种)，主要用于遍历 Collection 集合中的元素。 （2） 集合对象每次调用iterator()方法都得到一个全新的迭代器对象，默认游标都在集合的第一个元素之前。 1.1 主要方法 （1）hasNext()：判断是否还有下一个元素。</p><p>（2）next()：指针下移，将下移以后集合位置上的元素返回。</p><p>（3）remove（）：内部定义了remove(),可以在遍历的时候，删除集合中的元素。此方法不同于集合直接调用remove()</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>        <span class="token comment">// 创建集合并添加元素</span>
        <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取迭代器对象,迭代器就好此是个箭头，默认指向集合的0索引处</span>
        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> iterator<span class="token operator">=</span>list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//利用循环不断的去获取集合中的每一个元素</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">//next方法的两件事情：获取元素并移动指针</span>
            <span class="token class-name">String</span> str<span class="token operator">=</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//迭代器的细节注意点：</span>
        <span class="token comment">//1.报错NoSuchElementException</span>
        <span class="token comment">//2,迭代器遍历完毕，指针不会复位</span>
        <span class="token comment">//3.循环中只能用一次next方法</span>
        <span class="token comment">//4,迭代器通历时，不能用集合的方法进行增加或者删除，如果实在要删除：那么可以用迭代器提供的remove方法进行删除。      </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>增强for遍历</strong></p><p>增强 for 的底层就是迭代器，为了简化迭代器的代码书写的。 它是 JDK5 之后出现的，其内部原理就是一个 Iterator 迭代器 所有的单列集合和数组才能用增强 for 进行遍历。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>        <span class="token comment">// 示例：s便是list里面的每一个数据        </span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token operator">:</span>list<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 修改增强for 中的变量，不会改变集合中原本的数据。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Lambda表达式遍历</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>i<span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="list-接口常用操作" tabindex="-1"><a class="header-anchor" href="#list-接口常用操作" aria-hidden="true">#</a> List 接口常用操作</h3><ul><li><code>add(E e)</code>: 向列表末尾添加一个元素。</li><li><code>add(int index, E element)</code>: 在列表的指定位置插入一个元素。</li><li><code>remove(int index)</code>: 删除列表中指定位置的元素。</li><li><code>get(int index)</code>: 返回列表中指定位置的元素。</li><li><code>set(int index, E element)</code>: 替换列表中指定位置的元素。</li><li><code>size()</code>: 返回列表中的元素数量。</li><li><code>clear()</code>: 移除列表中的所有元素。</li><li><code>indexOf(Object o)</code>: 返回对象在列表中的第一次出现索引。</li><li><code>lastIndexOf(Object o)</code>: 返回对象在列表中的最后一次出现索引。</li><li><code>contains(Object o)</code>: 检查列表是否包含指定的元素。</li><li><code>isEmpty()</code>: 检查列表是否为空。</li></ul><h3 id="set-接口常用操作" tabindex="-1"><a class="header-anchor" href="#set-接口常用操作" aria-hidden="true">#</a> Set 接口常用操作</h3><ul><li><code>add(E e)</code>: 向集合添加一个元素。</li><li><code>remove(Object o)</code>: 从集合中移除一个元素。</li><li><code>contains(Object o)</code>: 检查集合是否包含指定的元素。</li><li><code>size()</code>: 返回集合中的元素数量。</li><li><code>clear()</code>: 移除集合中的所有元素。</li><li><code>isEmpty()</code>: 检查集合是否为空。</li></ul><p>Set是集合体系中较为重要的接口，它具有单列存储的特点，即一次只能添加一个元素。它具有三大特点： <strong>不可重复：当存入相同的数据时，重复的元素将会被自动去除，集合中不会有重复的值。</strong><strong>存取顺序不一致：存入数据的顺序与输出数据的顺序不一定一致。</strong><strong>没有带索引方法：无法使用普通for循环来遍历输出Set集合。</strong> 由于Set是一个接口，因此我们在创建Set对象时必须指定其实现类，其常用的实现类有HashSet和TreeSet。</p><h3 id="map-接口常用操作" tabindex="-1"><a class="header-anchor" href="#map-接口常用操作" aria-hidden="true">#</a> Map 接口常用操作</h3><ul><li><code>put(K key, V value)</code>: 将指定的值与此映射中的指定键关联。</li><li><code>get(Object key)</code>: 返回指定键所映射的值。</li><li><code>remove(Object key)</code>: 从映射中移除指定键的映射关系。</li><li><code>keySet()</code>: 返回映射中包含的键的 Set 视图。</li><li><code>values()</code>: 返回映射中包含的值的 Collection 视图。</li><li><code>entrySet()</code>: 返回映射中包含的键值映射关系的 Set 视图。</li><li><code>size()</code>: 返回映射中键值映射的数量。</li><li><code>clear()</code>: 移除映射中的所有键值映射。</li><li><code>isEmpty()</code>: 检查映射是否为空。</li></ul><p>Map接口是一个键值对的集合，它继承自Collection接口中的size()和isEmpty()等方法，同时还提供了根据键查找值的方法，以及添加、删除和更新键值对的方法。在Java中，Map接口有几个常见的实现类，每个实现类都具有不同的性能和用途。</p><p>HashMap：基于哈希表实现，具有快速的查找和插入操作，适用于需要快速查找键值对的场景。 TreeMap：基于红黑树实现，可以对键进行排序，并提供了一系列与排序相关的方法，适用于需要对键进行排序的场景。 LinkedHashMap：基于哈希表和链表实现，保持键值对的插入顺序，适用于需要保持插入顺序的场景。</p><h3 id="collections-类常用静态方法" tabindex="-1"><a class="header-anchor" href="#collections-类常用静态方法" aria-hidden="true">#</a> Collections 类常用静态方法</h3><ul><li><code>sort(List&lt;?&gt; list)</code>: 根据元素的自然顺序对列表进行升序排序。</li><li><code>binarySearch(List&lt;? extends Comparable&gt; list, Object key)</code>: 在列表中二分查找指定的对象。</li><li><code>max(Collection&lt;? extends T&gt; coll)</code>: 返回给定集合中的最大元素。</li><li><code>min(Collection&lt;? extends T&gt; coll)</code>: 返回给定集合中的最小元素。</li><li><code>shuffle(List&lt;?&gt; list)</code>: 随机打乱列表中的元素顺序。</li><li><code>fill(List&lt;?&gt; list, Object obj)</code>: 使用指定的元素填充列表。</li></ul><h3 id="iterator-接口常用操作" tabindex="-1"><a class="header-anchor" href="#iterator-接口常用操作" aria-hidden="true">#</a> Iterator 接口常用操作</h3><ul><li><code>next()</code>: 返回迭代的下一个元素。</li><li><code>hasNext()</code>: 检查是否存在下一个元素。</li><li><code>remove()</code>: 从迭代器所连接的集合中移除当前的元素。</li></ul><p>这些是 Java 集合框架中一些基本的操作。实际上，Java 集合框架非常丰富，包含了更多的接口和实现，以及一些高级特性，比如线程安全的集合类、队列、栈等。如果你需要更详细的信息，建议查阅 Java 官方文档或相关书籍。</p><h2 id="java调用外部接口" tabindex="-1"><a class="header-anchor" href="#java调用外部接口" aria-hidden="true">#</a> java调用外部接口</h2>`,25),Z={href:"https://mp.weixin.qq.com/s/c7y65TKJ76eFnzmxtfMMXg",target:"_blank",rel:"noopener noreferrer"},$={href:"https://blog.csdn.net/qq_45726836/article/details/131412678",target:"_blank",rel:"noopener noreferrer"},nn={href:"https://developer.aliyun.com/article/1135538",target:"_blank",rel:"noopener noreferrer"},sn={href:"https://developer.aliyun.com/article/1157258#slide-9",target:"_blank",rel:"noopener noreferrer"},an=e(`<h3 id="httpclient-字符串转成对象" tabindex="-1"><a class="header-anchor" href="#httpclient-字符串转成对象" aria-hidden="true">#</a> HttpClient(字符串转成对象)</h3><p>依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.httpcomponents<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>httpclient<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.5.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.httpcomponents<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>httpclient-cache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.5.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.httpcomponents<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>httpmime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.5.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
		<span class="token comment">&lt;!-- alibaba的fastjson --&gt;</span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2.80<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>HttpClient方法封装：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>mytest<span class="token punctuation">.</span>test<span class="token punctuation">.</span></span><span class="token class-name">Util</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span><span class="token class-name">JSON</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang3<span class="token punctuation">.</span></span><span class="token class-name">StringUtils</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">Consts</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpResponse</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">NameValuePair</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">HttpClient</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>client<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">RequestConfig</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>client<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">UrlEncodedFormEntity</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>client<span class="token punctuation">.</span>methods<span class="token punctuation">.</span></span><span class="token class-name">HttpGet</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>client<span class="token punctuation">.</span>methods<span class="token punctuation">.</span></span><span class="token class-name">HttpPost</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">StringEntity</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">HttpClients</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>conn<span class="token punctuation">.</span></span><span class="token class-name">PoolingHttpClientConnectionManager</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>message<span class="token punctuation">.</span></span><span class="token class-name">BasicNameValuePair</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">EntityUtils</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Logger</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">URI</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span></span><span class="token class-name">StandardCharsets</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpClientUtil</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">APPLICATION_JSON_VALUE</span> <span class="token operator">=</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> log<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Integer</span> <span class="token constant">CONN_TIME_OUT</span> <span class="token operator">=</span> <span class="token number">3000</span><span class="token punctuation">;</span><span class="token comment">// 超时时间豪秒</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Integer</span> <span class="token constant">SOCKET_TIME_OUT</span> <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/** 每个路由的最大请求数，默认2 */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Integer</span> <span class="token constant">DEFAULT_MAX_PER_ROUTE</span> <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/** 最大连接数，默认20 */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Integer</span> <span class="token constant">MAX_TOTAL</span> <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">HttpClient</span> httpClient<span class="token punctuation">;</span>

    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        <span class="token comment">// 请求配置</span>
        <span class="token class-name">RequestConfig</span> requestConfig <span class="token operator">=</span> <span class="token class-name">RequestConfig</span><span class="token punctuation">.</span><span class="token function">custom</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setConnectTimeout</span><span class="token punctuation">(</span><span class="token constant">CONN_TIME_OUT</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setConnectionRequestTimeout</span><span class="token punctuation">(</span><span class="token constant">CONN_TIME_OUT</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setSocketTimeout</span><span class="token punctuation">(</span><span class="token constant">SOCKET_TIME_OUT</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 管理 http连接池</span>
        <span class="token class-name">PoolingHttpClientConnectionManager</span> cm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PoolingHttpClientConnectionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cm<span class="token punctuation">.</span><span class="token function">setDefaultMaxPerRoute</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_MAX_PER_ROUTE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cm<span class="token punctuation">.</span><span class="token function">setMaxTotal</span><span class="token punctuation">(</span><span class="token constant">MAX_TOTAL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        httpClient <span class="token operator">=</span> <span class="token class-name">HttpClients</span><span class="token punctuation">.</span><span class="token function">custom</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setConnectionManager</span><span class="token punctuation">(</span>cm<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setDefaultRequestConfig</span><span class="token punctuation">(</span>requestConfig<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * Get请求
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">requestGet</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> paramsMap<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">//logger.info(&quot;GET request  url:{} params:{}&quot;, url, paramsMap);</span>
        <span class="token class-name">Long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NameValuePair</span><span class="token punctuation">&gt;</span></span> params <span class="token operator">=</span> <span class="token function">initParams</span><span class="token punctuation">(</span>paramsMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Get请求</span>
        <span class="token class-name">HttpGet</span> httpGet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpGet</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 设置参数</span>
            <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token class-name">EntityUtils</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UrlEncodedFormEntity</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> uriStr <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">?</span>
                    httpGet<span class="token punctuation">.</span><span class="token function">getURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> httpGet<span class="token punctuation">.</span><span class="token function">getURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;?&quot;</span> <span class="token operator">+</span> str<span class="token punctuation">;</span>
            httpGet<span class="token punctuation">.</span><span class="token function">setURI</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URI</span><span class="token punctuation">(</span>uriStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 发送请求</span>
            <span class="token class-name">HttpResponse</span> response <span class="token operator">=</span> httpClient<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>httpGet<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">//logger.info(&quot;GET request  url:{} response:{} time:{}&quot;,</span>
            <span class="token comment">//        url, response, System.currentTimeMillis() - start);</span>

            <span class="token comment">// 获取返回数据</span>
            <span class="token keyword">return</span> <span class="token function">getSuccessRetFromResp</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>paramsMap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token comment">// 必须释放连接，不然连接用完后会阻塞</span>
            httpGet<span class="token punctuation">.</span><span class="token function">releaseConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * Post请求，Map格式数据
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">requestPost</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> paramsMap<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;POST request  url:{} params:{}&quot;</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> paramsMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NameValuePair</span><span class="token punctuation">&gt;</span></span> params <span class="token operator">=</span> <span class="token function">initParams</span><span class="token punctuation">(</span>paramsMap<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">HttpPost</span> httpPost <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpPost</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            httpPost<span class="token punctuation">.</span><span class="token function">setEntity</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UrlEncodedFormEntity</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> <span class="token class-name">Consts</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name">HttpResponse</span> response <span class="token operator">=</span> httpClient<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>httpPost<span class="token punctuation">)</span><span class="token punctuation">;</span>

            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;POST request  url:{} response:{}  time:{}&quot;</span><span class="token punctuation">,</span>
                    url<span class="token punctuation">,</span> response<span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name">String</span> retStr <span class="token operator">=</span> <span class="token function">getSuccessRetFromResp</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>paramsMap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">return</span> retStr<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            httpPost<span class="token punctuation">.</span><span class="token function">releaseConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * Post请求，json格式数据
     *
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">requestPostJsonStr</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">String</span> json<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;POST request  url:{} params:{}&quot;</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> json<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">HttpPost</span> httpPost <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpPost</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">StringEntity</span> entity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringEntity</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> <span class="token class-name">Consts</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            entity<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token constant">APPLICATION_JSON_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            httpPost<span class="token punctuation">.</span><span class="token function">setEntity</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name">HttpResponse</span> response <span class="token operator">=</span> httpClient<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>httpPost<span class="token punctuation">)</span><span class="token punctuation">;</span>

            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;POST request  url:{} response:{}  time:{}&quot;</span><span class="token punctuation">,</span>
                    url<span class="token punctuation">,</span> response<span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">return</span> <span class="token function">getSuccessRetFromResp</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> url<span class="token punctuation">,</span> json<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token comment">// 资源释放</span>
            httpPost<span class="token punctuation">.</span><span class="token function">releaseConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * post Object格式数据
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">requestPostJson</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> params <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">requestPostJsonStr</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getSuccessRetFromResp</span><span class="token punctuation">(</span><span class="token class-name">HttpResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">String</span> params<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> retStr <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
        <span class="token comment">// 检验状态码，如果成功接收数据</span>
        <span class="token keyword">int</span> code <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getStatusLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            retStr <span class="token operator">=</span> <span class="token class-name">EntityUtils</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Consts</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;Http request error:%s, url:%s, params:%s&quot;</span><span class="token punctuation">,</span> response<span class="token punctuation">,</span> url<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//logger.info(&quot;Http request retStr:{}. url:{}&quot;, retStr, url);</span>
        <span class="token keyword">return</span> retStr<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NameValuePair</span><span class="token punctuation">&gt;</span></span> <span class="token function">initParams</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> paramsMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NameValuePair</span><span class="token punctuation">&gt;</span></span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NameValuePair</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>paramsMap <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> params<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">:</span> paramsMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            params<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BasicNameValuePair</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> params<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>get方法获取数据测试：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@Data</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpClientModel</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Data</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpClientModelObj</span> <span class="token punctuation">{</span>
        <span class="token comment">// 变量名要和接口返回的变量名一致</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> type<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpClientModel</span><span class="token punctuation">&gt;</span></span> data<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>    

   <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">testHttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">// 接口返回数组</span>
        <span class="token class-name">String</span> url<span class="token operator">=</span><span class="token string">&quot;http://127.0.0.1:3000/&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> s<span class="token operator">=</span><span class="token class-name">HttpClientUtil</span><span class="token punctuation">.</span><span class="token function">requestGet</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>map <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 接口返回数据的字符串：[{&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:14},{&quot;name&quot;:&quot;李四&quot;,&quot;age&quot;:14}]</span>

        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpClientModel</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpClientModel</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//创建一个变量接收数据，实体类型要和返回的数据相同</span>
        list<span class="token operator">=</span><span class="token class-name">JSONObject</span><span class="token punctuation">.</span><span class="token function">parseArray</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token class-name">HttpClientModel</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//字符串转换成JSON格式,并转换成实体类模型，(是对象用 parseObject 方法)</span>
        list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item<span class="token operator">-&gt;</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 张三  李四</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

   <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">testHttpClientObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">// 接口返回对象</span>
        <span class="token class-name">String</span> url<span class="token operator">=</span><span class="token string">&quot;http://127.0.0.1:3000/list&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> s<span class="token operator">=</span><span class="token class-name">HttpClientUtil</span><span class="token punctuation">.</span><span class="token function">requestGet</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>map <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 接口返回数据的字符串：{&quot;type&quot;:&quot;people&quot;,&quot;data&quot;:[{&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:14},{&quot;name&quot;:&quot;李四&quot;,&quot;age&quot;:14}]}</span>
        <span class="token class-name">HttpClientModelObj</span> httpClientModelObj<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HttpClientModelObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 创建一个对象用于接收返回的数据，要求类型一致</span>
        httpClientModelObj<span class="token operator">=</span><span class="token class-name">JSONObject</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token class-name">HttpClientModelObj</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>httpClientModelObj<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// {&quot;type&quot;:&quot;people&quot;,&quot;data&quot;:[{&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:14},{&quot;name&quot;:&quot;李四&quot;,&quot;age&quot;:14}]}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>httpClientModelObj<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// HttpClientModelObj(type=people, data=[HttpClientModel(name=张三, age=14), HttpClientModel(name=李四, age=14)])</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>httpClientModelObj<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// [HttpClientModel(name=张三, age=14), HttpClientModel(name=李四, age=14)]</span>
    <span class="token punctuation">}</span>


   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="file" tabindex="-1"><a class="header-anchor" href="#file" aria-hidden="true">#</a> File</h2>`,8),tn={href:"https://blog.csdn.net/qq_21484461/article/details/132913531",target:"_blank",rel:"noopener noreferrer"},en=e(`<h3 id="file类" tabindex="-1"><a class="header-anchor" href="#file类" aria-hidden="true">#</a> File类</h3><p><code>java.io.File</code>类是Java标准库中用于表示文件和目录的类。它提供了一组方法，使您能够创建、删除、重命名、复制文件或目录，以及查询文件和目录的属性。<code>File</code>类的实例可以表示文件系统中的文件或目录的路径，而不必实际操作文件系统。</p><h3 id="创建file对象" tabindex="-1"><a class="header-anchor" href="#创建file对象" aria-hidden="true">#</a> 创建File对象</h3><p>File对象既可以代表文件、也可以代表文件夹。 Fil封装的对象仅仅是一个路径名，这个路径可以是存在的，也允许是不存在的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>        <span class="token comment">//  使用文件路径字符串创建(绝对路径)</span>
        <span class="token class-name">String</span> filePath<span class="token operator">=</span><span class="token string">&quot;E:\\\\qian-study\\\\我的前后端分离测试项目\\\\my-testing-warehouse\\\\testFile.txt&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 相对路径（重点） 不带盘符，默认是直接去工程下寻找文件的(项目根目录不能有错)</span>
        <span class="token class-name">String</span> filePath2<span class="token operator">=</span><span class="token string">&quot;src\\\\main\\\\resources\\\\file\\\\testFile.txt&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">File</span> file2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>filePath2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token comment">//  使用父目录和子目录创建</span>
        <span class="token class-name">File</span> parentDir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;E:\\\\qian-study\\\\我的前后端分离测试项目\\\\my-testing-warehouse&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> childFileName <span class="token operator">=</span> <span class="token string">&quot;testFile.txt&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">File</span> file3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>parentDir<span class="token punctuation">,</span> childFileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>当前工作目录</strong>：在Java中，当前工作目录通常是启动Java虚拟机时的工作目录。你可以使用<code>System.getProperty(&quot;user.dir&quot;)</code>来获取当前工作目录的路径。</li></ul><h3 id="file对象操作方法" tabindex="-1"><a class="header-anchor" href="#file对象操作方法" aria-hidden="true">#</a> File对象操作方法</h3>`,7),pn={href:"https://blog.csdn.net/qq_21484461/article/details/132913531",target:"_blank",rel:"noopener noreferrer"},on={href:"https://www.runoob.com/java/java-file.html",target:"_blank",rel:"noopener noreferrer"},cn={href:"https://www.jianshu.com/p/204a828531e8",target:"_blank",rel:"noopener noreferrer"},ln=e(`<p>java中的File类提供了许多常用的方法，用于操作文件和目录。下面是一些常用的File类方法：</p><p><strong>文件和目录的创建、删除和重命名</strong>：<code>createNewFile()</code>、<code>delete()</code>、<code>renameTo(File dest)</code>。</p><p><strong>检查文件或目录是否存在</strong>：<code>exists()</code>。</p><p><strong>获取文件或目录的属性</strong>：如<code>length()</code>（大小）、<code>lastModified()</code>（最后修改时间）。</p><p><strong>列出目录内容</strong>：<code>list()</code>、<code>listFiles()</code>。</p><p><strong>检查是文件还是目录</strong>：<code>isFile()</code>、<code>isDirectory()</code>。</p><p><strong>创建和删除目录</strong>：<code>mkdir()</code>、<code>mkdirs()</code>。</p><h3 id="遍历目录-列出目录下的文件和子目录" tabindex="-1"><a class="header-anchor" href="#遍历目录-列出目录下的文件和子目录" aria-hidden="true">#</a> 遍历目录，列出目录下的文件和子目录</h3><h4 id="只列出直接的子文件和子目录" tabindex="-1"><a class="header-anchor" href="#只列出直接的子文件和子目录" aria-hidden="true">#</a> 只列出直接的子文件和子目录</h4><p>要列出目录下的文件和子目录，可以使用<code>list()</code>方法和<code>listFiles()</code>方法。<code>list()</code>方法返回一个字符串数组，包含目录下的所有文件和子目录的名称。<code>listFiles()</code>方法返回一个<code>File</code>数组，包含目录下的所有文件和子目录的<code>File</code>对象。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>        <span class="token comment">// 只列出直接的子文件和子目录</span>
        <span class="token class-name">File</span> dir<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;src\\\\main\\\\resources\\\\file&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> children <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>children <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> child <span class="token operator">:</span> children<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> childFiles <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>childFiles <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> childFile <span class="token operator">:</span> childFiles<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>childFile<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="递归遍历子目录" tabindex="-1"><a class="header-anchor" href="#递归遍历子目录" aria-hidden="true">#</a> 递归遍历子目录</h4><p>如果目录下还有子目录，您可能需要递归地遍历整个目录树。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">File</span> dir<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;src\\\\main\\\\resources\\\\file&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment">// 调用方法开始遍历</span>
<span class="token function">listFilesAndDirs</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">listFilesAndDirs</span><span class="token punctuation">(</span><span class="token class-name">File</span> dir<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> childFiles <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>childFiles <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> childFile <span class="token operator">:</span> childFiles<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>childFile<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;目录：&quot;</span> <span class="token operator">+</span> childFile<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token function">listFilesAndDirs</span><span class="token punctuation">(</span>childFile<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 递归遍历子目录</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;文件：&quot;</span> <span class="token operator">+</span> childFile<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="io流" tabindex="-1"><a class="header-anchor" href="#io流" aria-hidden="true">#</a> IO流</h2>`,15),un={href:"https://blog.csdn.net/qq_44715943/article/details/116501936",target:"_blank",rel:"noopener noreferrer"},rn=e('<h3 id="什么是io流" tabindex="-1"><a class="header-anchor" href="#什么是io流" aria-hidden="true">#</a> 什么是IO流</h3><ul><li>I : <strong>Input</strong></li><li>O : <strong>Output</strong></li></ul><p>通过IO可以完成硬盘文件的<strong>读和写</strong>。</p><p><strong>流的分类：</strong></p><ul><li><p><strong><code>输入流、输出流</code></strong></p></li><li><p><strong><code>字节流、字符流</code></strong></p></li><li><p>字节流</p></li></ul>',5),dn={href:"http://java.io",target:"_blank",rel:"noopener noreferrer"},kn=n("strong",null,"InputStream",-1),mn={href:"http://java.io",target:"_blank",rel:"noopener noreferrer"},vn=n("strong",null,"OutputStream",-1),bn=n("ul",null,[n("li",null,"字符流")],-1),gn={href:"http://java.io",target:"_blank",rel:"noopener noreferrer"},hn=n("strong",null,"Reader",-1),fn={href:"http://java.io",target:"_blank",rel:"noopener noreferrer"},_n=n("strong",null,"Writer",-1),yn=n("p",null,[n("strong",null,"注意：")],-1),wn=n("p",null,"四大家族的首领都是抽象类。(abstract class) 所有的流都实现了： java.io.Closeable接口，都是可关闭的，都有 close() 方法。 流是一个管道，这个是内存和硬盘之间的通道，用完之后一定要关闭，不然会耗费(占用)很多资源。养成好习惯，用完流一定要关闭。",-1),Sn=n("p",null,"所有的 输出流 都实现了： java.io.Flushable接口，都是可刷新的，都有 flush() 方法。 养成一个好习惯，输出流在最终输出之后，一定要记得flush()刷新一下。这个刷新表示将通道/管道当中剩余未输出的数据强行输出完（清空管道！）刷新的作用就是清空管道。",-1),qn=n("p",null,"ps：如果没有flush()可能会导致丢失数据。",-1),jn=n("p",null,"在java中只要“类名”以 Stream 结尾的都是字节流。以“ Reader/Writer ”结尾的都是字符流。",-1),xn=n("h2",{id:"java-ssm框架",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#java-ssm框架","aria-hidden":"true"},"#"),s(" java SSM框架")],-1),En={href:"https://www.bilibili.com/video/BV1Ya411S7aT/?spm_id_from=333.337.search-card.all.click&vd_source=f25f5a8d75a3a60d5a288f726803ec11",target:"_blank",rel:"noopener noreferrer"},Cn={href:"https://pan.baidu.com/s/1jx1hRb7ugMFFJP81Fvcy1Q?pwd=yyds",target:"_blank",rel:"noopener noreferrer"},Mn={href:"https://gitee.com/zhengguangqq/ssm-md",target:"_blank",rel:"noopener noreferrer"},On={href:"https://www.bilibili.com/video/BV1AP411s7D7",target:"_blank",rel:"noopener noreferrer"},Fn={href:"https://pan.baidu.com/s/12roPcN1oBmDKk3wwnMSu_A?pwd=yyds",target:"_blank",rel:"noopener noreferrer"},In={href:"https://www.aliyundrive.com/s/SGmyMwGpsZv%EF%BC%88%E6%95%99%E7%A8%8B%E9%85%8D%E5%A5%97%E8%B5%84%E6%96%99%E8%AF%B7%E4%BB%8E%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E4%B8%8B%E8%BD%BD%EF%BC%89",target:"_blank",rel:"noopener noreferrer"},An={href:"https://gitee.com/fankozhang/ssm/tree/master/%E6%95%99%E6%A1%88",target:"_blank",rel:"noopener noreferrer"},Tn=n("h3",{id:"mybatis",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#mybatis","aria-hidden":"true"},"#"),s(" myBatis")],-1),Pn={href:"https://mybatis.org/mybatis-3/zh_CN/index.html",target:"_blank",rel:"noopener noreferrer"},Hn={href:"https://mybatis.net.cn/",target:"_blank",rel:"noopener noreferrer"},Nn={href:"https://mp.weixin.qq.com/s/jEGLpIA9HWOdN3WOq46K1g",target:"_blank",rel:"noopener noreferrer"},Bn=n("h3",{id:"mybatis-plus",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#mybatis-plus","aria-hidden":"true"},"#"),s(" MyBatis-plus")],-1),Dn={href:"https://baomidou.com/pages/24112f/",target:"_blank",rel:"noopener noreferrer"},Ln={href:"https://mp.weixin.qq.com/s/kKH0c2GTtd_c2Ptqh-zJbA",target:"_blank",rel:"noopener noreferrer"},Rn={href:"https://b11et3un53m.feishu.cn/wiki/PsyawI04ei2FQykqfcPcmd7Dnsc",target:"_blank",rel:"noopener noreferrer"},Un={href:"https://www.ydlclass.com/doc21xnv/java/third/framework/7%E3%80%81mybatis_plus/#_6-%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8",target:"_blank",rel:"noopener noreferrer"},Jn=n("h3",{id:"mybatis-flex",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#mybatis-flex","aria-hidden":"true"},"#"),s(" mybatis-flex")],-1),zn={href:"https://mybatis-flex.com/zh/intro/what-is-mybatisflex.html",target:"_blank",rel:"noopener noreferrer"},Gn={href:"https://gitee.com/mybatis-flex/mybatis-flex#english--%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87",target:"_blank",rel:"noopener noreferrer"},Vn={href:"https://www.bilibili.com/video/BV11h411A7cU/?spm_id_from=333.788",target:"_blank",rel:"noopener noreferrer"},Wn={href:"https://zhuanlan.zhihu.com/p/669378593",target:"_blank",rel:"noopener noreferrer"},Qn={href:"https://juejin.cn/post/7306192146768183311#heading-7",target:"_blank",rel:"noopener noreferrer"},Kn=n("h2",{id:"mysql",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#mysql","aria-hidden":"true"},"#"),s(" mysql")],-1),Yn={href:"https://www.bilibili.com/video/BV1iq4y1u7vj?p=1&vd_source=f25f5a8d75a3a60d5a288f726803ec11",target:"_blank",rel:"noopener noreferrer"},Xn={href:"https://github.com/Fankozhang/mySource/tree/main/%E8%B5%84%E6%96%99%E5%90%88%E8%AE%A1/mysql/%E5%B0%9A%E7%A1%85%E8%B0%B7%E8%A7%86%E9%A2%91%E8%80%81%E5%B8%88%E7%AC%94%E8%AE%B0",target:"_blank",rel:"noopener noreferrer"},Zn={href:"https://blog.csdn.net/qq_47540091/article/details/121875715",target:"_blank",rel:"noopener noreferrer"},$n=n("em",null,"狂神 mysql",-1),ns=e(`<h3 id="查询结构" tabindex="-1"><a class="header-anchor" href="#查询结构" aria-hidden="true">#</a> 查询结构：</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>#方式1：
SELECT ...,....,...
FROM ...,...,....
WHERE 多表的连接条件
AND 不包含组函数的过滤条件
GROUP BY ...,...
HAVING 包含组函数的过滤条件
ORDER BY ... ASC/DESC
LIMIT ...,...

#方式2：
SELECT ...,....,...
FROM ... JOIN ... 
ON 多表的连接条件
JOIN ...
ON ...
WHERE 不包含组函数的过滤条件
AND/OR 不包含组函数的过滤条件
GROUP BY ...,...
HAVING 包含组函数的过滤条件
ORDER BY ... ASC/DESC
LIMIT ...,...

#其中：
#（1）from：从哪些表中筛选
#（2）on：关联多表查询时，去除笛卡尔积
#（3）where：从表中筛选的条件
#（4）group by：分组依据
#（5）having：在统计结果中再次筛选
#（6）order by：排序
#（7）limit：分页
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="select-查询时的执行顺序" tabindex="-1"><a class="header-anchor" href="#select-查询时的执行顺序" aria-hidden="true">#</a> SELECT 查询时的执行顺序</h3><p>你需要记住 SELECT 查询时的两个顺序：</p><p><strong>1. 关键字的顺序是不能颠倒的：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>SELECT ... FROM ... WHERE ... GROUP BY ... HAVING ... ORDER BY ... LIMIT...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>2.SELECT 语句的执行顺序</strong>（在 MySQL 和 Oracle 中，SELECT 执行顺序基本相同）：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>FROM -&gt; WHERE -&gt; GROUP BY -&gt; HAVING -&gt; SELECT 的字段 -&gt; DISTINCT -&gt; ORDER BY -&gt; LIMIT
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="mysql建表时注意什么" tabindex="-1"><a class="header-anchor" href="#mysql建表时注意什么" aria-hidden="true">#</a> MySQL建表时注意什么？</h3><p>MVSQL建表的经验有很多，下边列举一些：</p>`,10),ss=n("li",null,"1、注意选择存储引擎，如果要支持事务需要选择InnoDB。",-1),as=n("li",null,"2、注意字段类型的选择，对于日期类型如果要记录时分秒建议使用datetime,只记录年月日使用date类型，对于 字符类型的选择，固定长度字段选择char,不固定长度的字段选择varchar,varchar比char节省空间但速度没有 char快；对于内容介绍类的长广文本字段使用text或longtext类型：如果存储图片等二进制数据使用blob或 longblob类型；对金额字段建议使用DECIMAL；对于数值类型的字段在确保取值范围足够的前提下尽量使用占用 空间较小的类型",-1),ts=n("li",null,"3、主键字段建议使用自然主键，不要有业务意义，建议使用int unsigned类型，特殊场景使用bigint类型。",-1),es=n("li",null,"4、如果要存储text、blob字段建议单独建一张表，使用外键关联。",-1),ps=n("li",null,"5、尽量不要定义外键，保证表的独立性，可以存在外键意义的字段。",-1),os=n("li",null,"6、设置字段默认值，比如：状态、创建时间等。",-1),cs=n("li",null,"7、每个字段写清楚注释。",-1),ls=n("li",null,"8、注意字段的约束，比如：非空、唯一、主键等",-1),is={href:"https://blog.csdn.net/m0_48805880/article/details/126423801",target:"_blank",rel:"noopener noreferrer"},us=n("h3",{id:"表关系-一对多、多对多",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#表关系-一对多、多对多","aria-hidden":"true"},"#"),s(" 表关系（一对多、多对多...）")],-1),rs={href:"https://blog.csdn.net/llg___/article/details/129739613",target:"_blank",rel:"noopener noreferrer"},ds={href:"https://kimi.moonshot.cn/chat/cph77irdf0j3kuq0dhsg",target:"_blank",rel:"noopener noreferrer"},ks=n("h3",{id:"数据库设计参考",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#数据库设计参考","aria-hidden":"true"},"#"),s(" 数据库设计参考")],-1),ms={href:"https://blog.csdn.net/Artificial_idiots/article/details/106830628",target:"_blank",rel:"noopener noreferrer"},vs={href:"https://blog.csdn.net/Artificial_idiots/article/details/122960029",target:"_blank",rel:"noopener noreferrer"},bs=n("h2",{id:"我的前后端分离测试项目",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#我的前后端分离测试项目","aria-hidden":"true"},"#"),s(" 我的前后端分离测试项目")],-1),gs={href:"https://gitee.com/fankozhang/my-testing-warehouse/blob/master/README.md",target:"_blank",rel:"noopener noreferrer"};function hs(fs,_s){const t=p("ExternalLinkIcon"),o=p("pluginManagement");return l(),i("div",null,[q,n("p",null,[n("a",j,[s("idea中springboot项目热部署最完整有效的详细配置-阿里云开发者社区 (aliyun.com)"),a(t)])]),x,E,n("p",null,[n("a",C,[s("IDEA配置JRebel热部署（超级详细图文教程）-CSDN博客"),a(t)])]),n("p",null,[n("a",M,[s("### 捡个便宜 - 交朋友吧 ### (jpy.wang)"),a(t)])]),O,n("p",null,[n("a",F,[s("(210条消息) 【已解决】Error: could not open `C:\\Program Files\\Java\\jre1.8.0_121\\lib\\amd64\\jvm.cfg‘_来老铁干了这碗代码的博客-CSDN博客"),a(t)])]),I,A,T,P,H,n("p",null,[s("GraalVM-jdk之Windows详细安装及使用教程 "),n("a",N,[s("https://zhuanlan.zhihu.com/p/673241258"),a(t)])]),n("p",null,[n("a",B,[s("使用IDEA 创建 SpringBoot 多模块项目_idea 建springboot module-CSDN博客"),a(t)])]),D,n("p",null,[s("删除pom.xml中 "),a(o),s(" 标签和里面的内容 plugins标签中加了jetty和tomcat,可以测试项目运行")]),L,n("p",null,[s("( compile命令编译 package命令打包 ) 访问路径为 ： jetty "),n("a",R,[s("http://localhost:8080/test"),a(t)]),s(" tomcat "),n("a",U,[s("http://localhost:8081/test"),a(t)])]),J,n("p",null,[n("a",z,[s("https://www.runoob.com/java/java-collections.html"),a(t)])]),n("p",null,[n("a",G,[s("https://www.bilibili.com/video/BV1fG4y1g76v/?spm_id_from=333.337.search-card.all.click&vd_source=f25f5a8d75a3a60d5a288f726803ec11"),a(t)])]),n("p",null,[n("a",V,[s("Collection 类关系图 | Java 全栈知识体系 (pdai.tech)"),a(t)])]),W,n("p",null,[n("a",Q,[s("https://blog.csdn.net/xing123456jl/article/details/108044431"),a(t)])]),K,n("p",null,[n("a",Y,[s("https://blog.csdn.net/m0_51755061/article/details/115109771"),a(t)])]),X,n("p",null,[n("a",Z,[s("SpringBoot 调用外部接口的三种方式 (qq.com)"),a(t)])]),n("p",null,[n("a",$,[s("JAVA调用第三方接口的GET/POST/PUT请求方式_java put请求-CSDN博客"),a(t)])]),n("p",null,[n("a",nn,[s("Java发送Http请求（HttpClient）-阿里云开发者社区 (aliyun.com)"),a(t)])]),n("p",null,[n("a",sn,[s("服务远程调用指南（RestTemplate、HttpClient）-阿里云开发者社区 (aliyun.com)"),a(t)])]),an,n("p",null,[n("a",tn,[s("https://blog.csdn.net/qq_21484461/article/details/132913531"),a(t)])]),en,n("p",null,[s("挺详细的："),n("a",pn,[s("https://blog.csdn.net/qq_21484461/article/details/132913531"),a(t)])]),n("p",null,[n("a",on,[s("https://www.runoob.com/java/java-file.html"),a(t)])]),n("p",null,[n("a",cn,[s("https://www.jianshu.com/p/204a828531e8"),a(t)])]),ln,n("p",null,[s("参考："),n("a",un,[s("https://blog.csdn.net/qq_44715943/article/details/116501936"),a(t)])]),rn,n("ol",null,[n("li",null,[n("a",dn,[s("java.io"),a(t)]),s("."),kn,s(" 字节输入流")]),n("li",null,[n("a",mn,[s("java.io"),a(t)]),s("."),vn,s(" 字节输出流")])]),bn,n("ol",null,[n("li",null,[n("a",gn,[s("java.io"),a(t)]),s("."),hn,s(" 字符输入流")]),n("li",null,[n("a",fn,[s("java.io"),a(t)]),s("."),_n,s(" 字符输出流")])]),yn,wn,Sn,qn,jn,xn,n("p",null,[s("决定看ssm框架视频， "),n("a",En,[s("【尚硅谷】SSM框架全套教程，MyBatis+Spring+SpringMVC+SSM整合一套通关_哔哩哔哩_bilibili"),a(t)]),s(" 。")]),n("p",null,[s("需要资料当然要到评论区取找了，资源链接："),n("a",Cn,[s("https://pan.baidu.com/s/1jx1hRb7ugMFFJP81Fvcy1Q?pwd=yyds"),a(t)]),s(" 提取码：yyds 。 "),n("a",Mn,[s("https://gitee.com/zhengguangqq/ssm-md"),a(t)]),s(" 尚硅谷的ssm md格式笔记")]),n("p",null,[s("尚硅谷SSM新版视频教程-2023版 B站直达："),n("a",On,[s("https://www.bilibili.com/video/BV1AP411s7D7"),a(t)]),s(" 百度网盘："),n("a",Fn,[s("https://pan.baidu.com/s/12roPcN1oBmDKk3wwnMSu_A?pwd=yyds"),a(t)]),s(" 提取码：yyds 阿里云盘："),n("a",In,[s("https://www.aliyundrive.com/s/SGmyMwGpsZv（教程配套资料请从百度网盘下载）"),a(t)])]),n("p",null,[s("资料 ： "),n("a",An,[s("教案 · 东方凝洛/尚硅谷ssm-springboot-2023视频资料 - 码云 - 开源中国 (gitee.com)"),a(t)])]),Tn,n("p",null,[s("官网："),n("a",Pn,[s("mybatis – MyBatis 3 | 简介"),a(t)]),s(),n("a",Hn,[s("MyBatis中文网"),a(t)])]),n("p",null,[n("a",Nn,[s("MyBatis 动态 SQL 最全教程，这样写 SQL 太爽了！ (qq.com)"),a(t)])]),Bn,n("p",null,[s("官网： "),n("a",Dn,[s("简介 | MyBatis-Plus (baomidou.com)"),a(t)])]),n("p",null,[n("a",Ln,[s("MyBatis-plus最详细的入门使用教程来了 (qq.com)"),a(t)])]),n("p",null,[s("黑马视频："),n("a",Rn,[s("day01-MybatisPlus - 飞书云文档 (feishu.cn)"),a(t)])]),n("p",null,[n("a",Un,[s("MybatisPlus - 2小时入门 (ydlclass.com)"),a(t)])]),Jn,n("p",null,[s("官网："),n("a",zn,[s("https://mybatis-flex.com/zh/intro/what-is-mybatisflex.html"),a(t)])]),n("p",null,[s("仓库："),n("a",Gn,[s("https://gitee.com/mybatis-flex/mybatis-flex#english--简体中文"),a(t)])]),n("p",null,[s("视频教程： "),n("a",Vn,[s("https://www.bilibili.com/video/BV11h411A7cU/?spm_id_from=333.788"),a(t)])]),n("p",null,[s("和其他mybatis框架的区别："),n("a",Wn,[s("https://zhuanlan.zhihu.com/p/669378593"),a(t)])]),n("p",null,[s("基础使用："),n("a",Qn,[s("https://juejin.cn/post/7306192146768183311#heading-7"),a(t)])]),Kn,n("p",null,[s("视频学习： "),n("a",Yn,[s("01-MySQL教程简介_哔哩哔哩_bilibili"),a(t)]),s(" 资料： "),n("a",Xn,[s("/mysql/尚硅谷视频老师笔记 "),a(t)])]),n("p",null,[n("a",Zn,[s("【狂神-MySQL】MySQL全部详细知识点整理（共10章）"),$n,s("-Blue.的博客-CSDN博客"),a(t)])]),ns,n("ul",null,[ss,as,ts,es,ps,os,cs,ls,n("li",null,[s("时间类型选择："),n("a",is,[s("https://blog.csdn.net/m0_48805880/article/details/126423801"),a(t)]),s(" （推荐优先使用 datetime ）")])]),us,n("p",null,[n("a",rs,[s("MySQL表设计思路（一对多、多对多...）_mysql一对多表设计-CSDN博客"),a(t)])]),n("p",null,[s("参考："),n("a",ds,[s("Kimi.ai - 帮你看更大的世界 (moonshot.cn)"),a(t)])]),ks,n("p",null,[n("a",ms,[s("学生成绩管理系统数据库设计--MySQL_学生成绩管理数据库-CSDN博客"),a(t)])]),n("p",null,[n("a",vs,[s("点餐系统数据库设计--SQL Server_数据库学生信息管理系统项目立项书-CSDN博客"),a(t)])]),bs,n("p",null,[n("a",gs,[s("README.md · 东方凝洛/我的测试仓库 - Gitee.com"),a(t)])])])}const Ss=c(S,[["render",hs],["__file","basic.html.vue"]]);export{Ss as default};
