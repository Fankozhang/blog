import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c,a as n,b as s,e as t,f as p,r as l}from"./app.612beb6f.js";const i={},u=n("h1",{id:"javascript",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#javascript","aria-hidden":"true"},"#"),s(" javaScript")],-1),r=n("h2",{id:"打开url",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#打开url","aria-hidden":"true"},"#"),s(" 打开url")],-1),k=n("p",null,"可以使用a链接 location.href=url 或者 window.open(url)",-1),d=n("p",null,"当在新页面中打开时，可以使用 window.open(url，”_blank“)",-1),m={href:"http://www.aaaaa.com",target:"_blank",rel:"noopener noreferrer"},v={href:"http://localhost:8080/abc/www.aaaaa.com",target:"_blank",rel:"noopener noreferrer"},b=p(`<p>（解决方法）window.open(&quot;http://&quot; + url, &quot;_blank&quot;) 将<strong>协议名</strong>作为字符串和url进行拼接，或者让后端将网址的协议名都加上，此时就能跳转正常了。</p><h3 id="从url获取参数并转为对象" tabindex="-1"><a class="header-anchor" href="#从url获取参数并转为对象" aria-hidden="true">#</a> 从url获取参数并转为对象</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">getParameters</span> <span class="token operator">=</span> <span class="token parameter"><span class="token constant">URL</span></span> <span class="token operator">=&gt;</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">{&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">decodeURI</span><span class="token punctuation">(</span><span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;?&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&quot;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;\\&quot;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&amp;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&quot;,&quot;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">=</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&quot;:&quot;&#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;}</span><span class="token template-punctuation string">\`</span></span>
  <span class="token punctuation">)</span>

<span class="token function">getParameters</span><span class="token punctuation">(</span><span class="token string">&quot;https://www.google.com.hk/search?q=js+md&amp;newwindow=1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// {q: &#39;js+md&#39;, newwindow: &#39;1&#39;}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="简单防抖-节流" tabindex="-1"><a class="header-anchor" href="#简单防抖-节流" aria-hidden="true">#</a> 简单防抖/节流</h2><ul><li>防抖：指定时间内 频繁触发一个事件，以最后一次触发为准</li><li>节流：指定时间内 频繁触发一个事件，只会触发一次</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token comment">// 防抖</span>
    <span class="token comment">// fn 需要防抖的函数，delay 为定时器时间</span>
    <span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span>delay</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">let</span> timer <span class="token operator">=</span>  <span class="token keyword">null</span>  <span class="token comment">// 用于保存定时器</span>
        <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
            <span class="token comment">// 如果timer存在 就清除定时器，重新计时</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">//设置定时器，规定时间后执行真实要执行的函数</span>
            timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
               <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 节流</span>
    <span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 首先设定一个变量，没有执行定时器时,默认为 null</span>
      <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// 当定时器没有执行的时候timer永远是false,后面无需执行</span>
        timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token comment">// 最后在setTimeout执行完毕后再把标记设置为true(关键)</span>
           <span class="token comment">// 表示可以执行下一次循环了。</span>
          timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="js中日期格式化常用方法" tabindex="-1"><a class="header-anchor" href="#js中日期格式化常用方法" aria-hidden="true">#</a> js中日期格式化常用方法</h2>`,7),g={href:"https://juejin.cn/post/6999283812958109709",target:"_blank",rel:"noopener noreferrer"},h={href:"https://blog.csdn.net/weixin_44136505/article/details/120549478",target:"_blank",rel:"noopener noreferrer"},y=n("p",null,"moment.js 与 day.js 日期库（推荐使用day.js）",-1),f=n("h2",{id:"js代码技巧",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#js代码技巧","aria-hidden":"true"},"#"),s(" js代码技巧")],-1),w={href:"https://mp.weixin.qq.com/s/Ubk7qcbN5VS52Mtb2yeYpg",target:"_blank",rel:"noopener noreferrer"},q=n("h2",{id:"js在web页面中调起本地应用程序",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#js在web页面中调起本地应用程序","aria-hidden":"true"},"#"),s(" JS在web页面中调起本地应用程序")],-1),E={href:"https://blog.csdn.net/nine_three_/article/details/121146847",target:"_blank",rel:"noopener noreferrer"},x=n("p",null,"（注意：调用微信时，文件导出的文件名 weixin ）",-1),_=n("h2",{id:"脚手架教程",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#脚手架教程","aria-hidden":"true"},"#"),s(" 脚手架教程")],-1),j={href:"https://juejin.cn/post/7260144602471776311#heading-26",target:"_blank",rel:"noopener noreferrer"},B=n("h2",{id:"js判断url是否是合法http-https",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#js判断url是否是合法http-https","aria-hidden":"true"},"#"),s(" js判断url是否是合法http/https")],-1),A={href:"https://blog.csdn.net/qq_44275213/article/details/110527407",target:"_blank",rel:"noopener noreferrer"},S=n("h2",{id:"websocket",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#websocket","aria-hidden":"true"},"#"),s(" websocket")],-1),C={href:"https://juejin.cn/post/7371365854012276747",target:"_blank",rel:"noopener noreferrer"},F={href:"https://blog.csdn.net/hwh295/article/details/123554646",target:"_blank",rel:"noopener noreferrer"},P={href:"https://www.bilibili.com/video/BV1HX4y1L7GK/?p=2&spm_id_from=pageDriver&vd_source=f25f5a8d75a3a60d5a288f726803ec11",target:"_blank",rel:"noopener noreferrer"},T={href:"https://www.runoob.com/html/html5-websocket.html",target:"_blank",rel:"noopener noreferrer"},D=p(`<p>1.新建 WebSocket 实例</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">&#39;ws://localhost:3000&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.webSocket.readyState</p><p><code>readyState</code>属性返回实例对象的当前状态，共有四种。</p><ul><li>CONNECTING：值为0，表示正在连接。</li><li>OPEN：值为1，表示连接成功，可以通信了。</li><li>CLOSING：值为2，表示连接正在关闭。</li><li>CLOSED：值为3，表示连接已经关闭，或者打开连接失败。</li></ul><p>3.webSocket.onopen</p><p><code>onopen</code>属性，用于指定连接成功后的回调函数。</p><p>4.webSocket.onclose</p><p><code>onclose</code>属性，用于指定连接关闭后的回调函数。</p><p>5.webSocket.onmessage</p><p><code>onmessage</code>属性，用于指定收到服务器数据后的回调函数。</p><p>6.webSocket.send()</p><p><code>send()</code>方法用于向服务器发送数据。</p><p>7.webSocket.bufferedAmount</p><p><code>bufferedAmount</code>属性，表示还有多少字节的二进制数据没有发送出去。它可以用来判断发送是否结束。</p><p>8.webSocket.onerror</p><p><code>onerror</code>属性，用于指定报错时的回调函数。</p><h3 id="实践" tabindex="-1"><a class="header-anchor" href="#实践" aria-hidden="true">#</a> 实践</h3><p>websocket.js （npm i express npm install ws） npm i cors -S (解决跨域)</p><p>node在package.json添加 &quot;type&quot;: &quot;module&quot; 可以使用 import 语法，否则报错</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> express <span class="token keyword">from</span> <span class="token string">&#39;express&#39;</span>
<span class="token keyword">import</span> http <span class="token keyword">from</span> <span class="token string">&#39;http&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>WebSocketServer<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;ws&#39;</span>


<span class="token keyword">const</span> app<span class="token operator">=</span><span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> server<span class="token operator">=</span>http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span> <span class="token comment">//创建一个http服务</span>

<span class="token keyword">const</span> wss<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">WebSocketServer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>server<span class="token punctuation">}</span><span class="token punctuation">)</span>
wss<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;connection&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">ws</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;connection open&quot;</span><span class="token punctuation">)</span>
    <span class="token comment">// 给客户端发消息</span>
    ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;hell0 client&#39;</span><span class="token punctuation">)</span>

    ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;客户端发送的数据&#39;</span><span class="token operator">+</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>socket.html</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
        <span class="token keyword">const</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">&#39;ws://localhost:3000&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ws<span class="token punctuation">.</span><span class="token function-variable function">onopen</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;open&quot;</span><span class="token punctuation">)</span>
            ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;server open&quot;</span><span class="token punctuation">)</span>  <span class="token comment">//给服务端发送消息</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 监控服务端数据</span>
        ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;服务端响应的数据&#39;</span><span class="token operator">+</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        
        ws<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;WebSocket 连接出现错误：&#39;</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        ws<span class="token punctuation">.</span><span class="token function-variable function">onclose</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;WebSocket 连接已经关闭。&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>



    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="js如何实现下拉刷新和上拉加载" tabindex="-1"><a class="header-anchor" href="#js如何实现下拉刷新和上拉加载" aria-hidden="true">#</a> JS如何实现下拉刷新和上拉加载!</h2>`,24),N={href:"https://segmentfault.com/a/1190000039693056",target:"_blank",rel:"noopener noreferrer"},G=p(`<h3 id="ai答案" tabindex="-1"><a class="header-anchor" href="#ai答案" aria-hidden="true">#</a> ai答案</h3><p>PC端的下拉加载通常是通过监听滚动事件，判断滚动位置是否到达底部，然后触发加载新内容的操作。以下是一个简单的示例代码：</p><p>HTML部分：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>content<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- 已加载的内容 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Item 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Item 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Item 3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- 加载更多的内容会被追加到这里 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>CSS部分：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">#content</span> <span class="token punctuation">{</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span> <span class="token comment">/* 设置内容区域的高度 */</span>
  <span class="token property">overflow-y</span><span class="token punctuation">:</span> scroll<span class="token punctuation">;</span> <span class="token comment">/* 显示滚动条 */</span>
<span class="token punctuation">}</span>

<span class="token selector">.item</span> <span class="token punctuation">{</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> #f0f0f0<span class="token punctuation">;</span>
  <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>JavaScript部分：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> content <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;content&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

content<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;scroll&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 判断滚动位置是否到达底部</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>content<span class="token punctuation">.</span>scrollTop <span class="token operator">+</span> content<span class="token punctuation">.</span>clientHeight <span class="token operator">&gt;=</span> content<span class="token punctuation">.</span>scrollHeight<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 加载新内容</span>
    <span class="token function">loadMoreContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">loadMoreContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 模拟异步加载</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 创建新内容</span>
    <span class="token keyword">var</span> newItem <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    newItem<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">&#39;item&#39;</span><span class="token punctuation">;</span>
    newItem<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">&#39;New Item&#39;</span><span class="token punctuation">;</span>

    <span class="token comment">// 将新内容追加到内容区域</span>
    content<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>newItem<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中，通过监听<code>scroll</code>事件，当滚动位置到达底部时，调用<code>loadMoreContent</code>函数加载新内容。<code>loadMoreContent</code>函数模拟异步加载新内容，并将新内容追加到内容区域中。</p><p>注意：该示例代码仅提供一种实现方式，具体实现可能会根据具体需求进行调整。</p>`,10),O={id:"通过一个onclick实现点击时不同的效果",tabindex:"-1"},I=n("a",{class:"header-anchor",href:"#通过一个onclick实现点击时不同的效果","aria-hidden":"true"},"#",-1),L={href:"https://www.cnblogs.com/Hlong-ZY/articles/7144560.html",target:"_blank",rel:"noopener noreferrer"},J=p(`<p>以下实现两次鼠标进入图片时，展示不同的效果</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
<span class="token comment">/* 图片过渡效果样式 */</span>
 <span class="token selector">img</span> <span class="token punctuation">{</span>
 <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>
 <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>
<span class="token property">transition</span><span class="token punctuation">:</span> all 0.5s ease-in-out<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>img<span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">onmouseenter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript"><span class="token function">mouseEnter</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">&quot;</span></span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://pic.ntimg.cn/file/20200605/23605973_173021196899_2.jpg<span class="token punctuation">&quot;</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">var</span> img <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;img&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">mouseEnter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
       img<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width<span class="token operator">=</span><span class="token string">&quot;50%&quot;</span><span class="token punctuation">;</span>
       img<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height<span class="token operator">=</span><span class="token string">&quot;50%&quot;</span><span class="token punctuation">;</span>
       img<span class="token punctuation">.</span>style<span class="token punctuation">.</span>marginTop<span class="token operator">=</span><span class="token string">&quot;50%&quot;</span><span class="token punctuation">;</span>
       img<span class="token punctuation">.</span>style<span class="token punctuation">.</span>marginLeft<span class="token operator">=</span><span class="token string">&quot;50%&quot;</span><span class="token punctuation">;</span>
       img<span class="token punctuation">.</span>onmouseenter<span class="token operator">=</span>mouseEnterAgain<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">function</span> <span class="token function">mouseEnterAgain</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        img<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width<span class="token operator">=</span><span class="token string">&quot;100%&quot;</span><span class="token punctuation">;</span>
       img<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height<span class="token operator">=</span><span class="token string">&quot;100%&quot;</span><span class="token punctuation">;</span>
       img<span class="token punctuation">.</span>style<span class="token punctuation">.</span>marginTop<span class="token operator">=</span><span class="token string">&quot;0px&quot;</span><span class="token punctuation">;</span>
       img<span class="token punctuation">.</span>style<span class="token punctuation">.</span>marginLeft<span class="token operator">=</span><span class="token string">&quot;0px&quot;</span><span class="token punctuation">;</span>
       <span class="token comment">//返回第一次执行的函数，实现循环执行</span>
        img<span class="token punctuation">.</span>onmouseenter <span class="token operator">=</span> mouseEnter<span class="token punctuation">;</span>    
    <span class="token punctuation">}</span>
 </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="gsap动画库" tabindex="-1"><a class="header-anchor" href="#gsap动画库" aria-hidden="true">#</a> GSAP动画库</h2>`,3),M={href:"https://gsap.framer.wiki/stated",target:"_blank",rel:"noopener noreferrer"},U={href:"https://gsap.com/community/cheatsheet/",target:"_blank",rel:"noopener noreferrer"},W=p(`<p>GSAP（GreenSock Animation Platform）是一个强大的JavaScript动画库，它提供了丰富的API来创建高性能的动画效果。以下是GSAP的基本使用方法和一些关键特性：</p><ol><li><h3 id="安装gsap" tabindex="-1"><a class="header-anchor" href="#安装gsap" aria-hidden="true">#</a> <strong>安装GSAP</strong>：</h3><ul><li><p>通过npm或yarn安装：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install gsap
// 或者
yarn add gsap
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>通过CDN引入：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/gsap/3.2.4/gsap.min.js&quot;&gt;&lt;/script&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><p><strong>基本动画</strong>：</p><ul><li><p>使用</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>gsap.to()
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>方法创建动画。这个方法接受两个参数：目标元素和动画属性对象。</p><p><strong>CSS 属性 properties</strong></p><p>Transform, colors, padding, borderRadius，GSAP都能驱动它们发生变化。只是要记得要使用小驼峰的方式来写CSS样式的属性名称，比如background-color要写成backgroundColor。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span>  gsap  <span class="token keyword">from</span> <span class="token string">&quot;gsap&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.my-element&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
gsap<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">duration</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment">// 动画持续时间</span>
  <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token comment">// 水平移动100像素</span>
  <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token comment">// 垂直移动50像素</span>
  <span class="token literal-property property">rotation</span><span class="token operator">:</span> <span class="token number">360</span><span class="token punctuation">,</span> <span class="token comment">// 旋转360度</span>
  <span class="token literal-property property">opacity</span><span class="token operator">:</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token comment">// 透明度变化</span>
  <span class="token literal-property property">ease</span><span class="token operator">:</span> <span class="token string">&#39;power1.inOut&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 缓动效果（动画曲线/缓动曲线）</span>
  <span class="token literal-property property">repeat</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 重复，-1是无限重复</span>
  <span class="token literal-property property">yoyo</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 来回往复，会让每次动画重复的时候往回变化，就像悠悠球一样</span>
    <span class="token comment">// 可以通过delay设置让动画开始前有一定的延迟时间（秒数）。你也可以使用repeatDelay来设置每次重复动画前的延迟时间（秒数）。</span>
  <span class="token literal-property property">delay</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token comment">// 动画会延迟1秒之后开始执行</span>
  <span class="token literal-property property">repeatDelay</span><span class="token operator">:</span> <span class="token number">1</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 可以把dom元素放到数组里面一起传入</span>
<span class="token keyword">let</span> square <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;.square&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> circle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;.circle&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                    
gsap<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token punctuation">[</span>square<span class="token punctuation">,</span> circle<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">200</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>GSAP并不只能变化DOM元素死的属性。你可以变化任何对象的属性，你创造的任意对象都行,onUpdate会在动画运行时触发</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">myNum</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">myColor</span><span class="token operator">:</span> <span class="token string">&quot;red&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
gsap<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">myNum</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
  <span class="token literal-property property">myColor</span><span class="token operator">:</span> <span class="token string">&quot;blue&quot;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">onUpdate</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>myNum<span class="token punctuation">,</span> obj<span class="token punctuation">.</span>myColor<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Staggers 错开（依次）动画 和 Sequencing 排序动画 可以查看网站学习</strong></p></li></ul></li><li><p><strong>时间线（用于控制多个运动的先后顺序）</strong>：</p><ul><li><p>使用 （如何精确的控制每一个动画的执行顺序，并且如何把整个动画效果很好的运行起来。）</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>gsap.timeline()
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>创建一个时间线，可以控制多个动画的顺序和时间。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 创建一个Timeline类型的实例</span>
<span class="token keyword">let</span> tl <span class="token operator">=</span> gsap<span class="token punctuation">.</span><span class="token function">timeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 把tween动画添加到timeline实例上，注意我们在用的是tl.to 而不是gsap.to  下面的三个动画会依次执行</span>
tl<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token string">&quot;.green&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">600</span><span class="token punctuation">,</span> <span class="token literal-property property">duration</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
tl<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token string">&quot;.purple&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">600</span><span class="token punctuation">,</span> <span class="token literal-property property">duration</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
tl<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token string">&quot;.orange&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">600</span><span class="token punctuation">,</span> <span class="token literal-property property">duration</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


tl<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token string">&quot;.green&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">600</span><span class="token punctuation">,</span> <span class="token literal-property property">duration</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
tl<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token string">&quot;.purple&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">600</span><span class="token punctuation">,</span> <span class="token literal-property property">duration</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">delay</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 增加delay参数，这个动画执行之前会有1s的延迟</span>
tl<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token string">&quot;.orange&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">600</span><span class="token punctuation">,</span> <span class="token literal-property property">duration</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">// 位置参数 Position Parameter</span>
tl<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token string">&#39;.element1&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">duration</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
tl<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token string">&quot;.green&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">600</span><span class="token punctuation">,</span> <span class="token literal-property property">duration</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 绿色方块会在整个时间线开始1秒后进行移动</span>
tl<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token string">&quot;.purple&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">600</span><span class="token punctuation">,</span> <span class="token literal-property property">duration</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;&lt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 紫色方块会和之前一个添加的动画同时开始运动</span>
tl<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token string">&quot;.orange&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">600</span><span class="token punctuation">,</span> <span class="token literal-property property">duration</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;+=1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 橘色方块会在之前所有动画都结束一秒后再开始运动</span>
<span class="token comment">// 我们可以使用各种写法——绝对的秒数，百分比，相对值等等方式来决定tween动画在什么时候开始。</span>

<span class="token comment">// position参数  （第三个参数，普通的 to 方法也有这个参数）</span>
<span class="token comment">// 具体的 position 参数和使用方法查看  https://gsap.framer.wiki/timelinestips</span>
tl<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token string">&#39;.element2&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">duration</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;-=0.5&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在第一个动画开始前0.5秒开始</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>时间线的默认设置 Timeline Defaults （会被之后的所有动画继承）</strong></p><p>如果你发现自己总是一遍又一遍的写同一个属性，那么你可以使用 defaults来进行设置。任何添加到时间线上的defaults的属性，都会被添加到这个时间线上的tween动画继承，像是通过to(),from()和fromTo()方式添加到时间线上的动画效果都是有这个继承效果的。利用这个方式可以让你的代码更简洁一些。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>var tl = gsap.timeline({defaults: {duration: 1}});

//这样每个动画都是1秒的时长，不用重复写了
tl.to(&quot;.green&quot;, {x: 200})
  .to(&quot;.purple&quot;, {x: 200, scale: 0.2})
  .to(&quot;.orange&quot;, {x: 200, scale: 2, y: 20});
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong>控制动画</strong>：</p><ul><li><p>对动画有更多一点的控制能力,比较常见的就是比如说我们想要点击某个按钮或有了某个交互行为之后才会让元素进行动画效果。那么控制动画的几个方法呢可以帮我们实现这个需求，在tween和timeline上都有这些方法，play，pause，reverse或者是加速变化。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 通过一个变量保存对Tween或者Timeline实例的引用</span>
<span class="token keyword">let</span> tween <span class="token operator">=</span> gsap<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token string">&quot;#logo&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">duration</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 暂停</span>
tween<span class="token punctuation">.</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 恢复（继续）</span>
tween<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 反向变化</span>
tween<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 直接切换到整个动画变化时长的0.5秒的时间点的状态</span>
tween<span class="token punctuation">.</span><span class="token function">seek</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 直接切换到整个变化过程的1/4的节点的状态</span>
tween<span class="token punctuation">.</span><span class="token function">progress</span><span class="token punctuation">(</span><span class="token number">0.25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 让运动减速到0.5倍</span>
tween<span class="token punctuation">.</span><span class="token function">timeScale</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 让变化加速到原来的2倍</span>
tween<span class="token punctuation">.</span><span class="token function">timeScale</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 直接销毁tween实例，让垃圾回收机制可以处理该实例所占用的内存</span>
tween<span class="token punctuation">.</span><span class="token function">kill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong>事件和回调</strong>：</p><ul><li><p>可以在动画的开始、更新、完成时添加回调函数。</p></li><li><p>onComplete：动画结束时触发</p></li><li><p>onStart：动画开始时触发</p></li><li><p>onUpdate：只要动画运行，每一帧都会触发（元素有属性变化时）</p></li><li><p>onRepeat：每次动画重复时触发</p></li><li><p>onReverseComplete：当动画反向执行后运动到变化起始点时触发</p></li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>gsap.to(element, {
  duration: 1,
  x: 100,
  onComplete: () =&gt; {
    console.log(&#39;动画完成&#39;);
  }
});
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>重复和Yoyo</strong>：</p><ul><li><p>可以让动画重复执行，并且可以通过</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>yoyo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>属性实现来回动画。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>gsap.to(element, {
  duration: 1,
  x: 100,
  repeat: -1, // 无限重复
  yoyo: true // 来回动画
});
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong>Stagger（交错）</strong>：</p><ul><li><p>对于多个元素的动画，可以使用</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>stagger
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>属性来创建交错效果。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>const boxes = document.querySelectorAll(&#39;.box&#39;);
gsap.staggerFrom(boxes, {
  duration: 0.5,
  y: 50,
  stagger: 0.1 // 每个元素动画间隔0.1秒开始
});
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong>响应式动画</strong>：</p><ul><li><p>GSAP支持响应式动画，可以根据屏幕尺寸或其他条件调整动画。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>gsap.set(element, {
  width: &#39;100%&#39;,
  height: &#39;auto&#39;
});
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong>插件</strong>：</p><ul><li>GSAP有许多插件，如ScrollTrigger、MorphSVG等，可以扩展其功能。具体的插件可以搜索查看了解。</li></ul></li><li><p><strong>性能优化</strong>：</p><ul><li>GSAP在动画性能方面进行了优化，确保动画流畅且不卡顿。</li></ul></li></ol><p>这些是GSAP的一些基本使用方法。GSAP的API非常丰富，可以根据项目需求进行深入学习和探索。更多高级用法和详细文档可以在GSAP的官方网站找到。</p><h2 id="数值计算" tabindex="-1"><a class="header-anchor" href="#数值计算" aria-hidden="true">#</a> 数值计算</h2>`,4),H={href:"https://www.jianshu.com/p/429637a1c80e",target:"_blank",rel:"noopener noreferrer"},V={href:"https://mikemcl.github.io/decimal.js/",target:"_blank",rel:"noopener noreferrer"},R=p(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install --save decimal.js  // 安装
import Decimal from &quot;decimal.js&quot;  // 具体文件中引入
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="js中object和array的相互转换" tabindex="-1"><a class="header-anchor" href="#js中object和array的相互转换" aria-hidden="true">#</a> JS中Object和Array的相互转换</h2>`,2),Y={href:"https://blog.csdn.net/gusushantang/article/details/142677823#:~:text=%E5%AF%B9%E8%B1%A1%E8%BD%AC%E6%8D%A2%E4%B8%BA%E6%95%B0%E7%BB%84%E9%80%9A%E5%B8%B8%E6%B6%89%E5%8F%8A%E6%8F%90%E5%8F%96%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B1%9E%E6%80%A7%E5%90%8D%E5%92%8C%E5%B1%9E%E6%80%A7%E5%80%BC%EF%BC%8C%E5%B9%B6%E5%B0%86%E5%AE%83%E4%BB%AC%E7%BB%84%E5%90%88%E6%88%90%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0%E3%80%82%20%E4%BB%A5%E4%B8%8B%E6%98%AF%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%9A%84%E6%96%B9%E6%B3%95%EF%BC%9A%201.%20%E4%BD%BF%E7%94%A8%20Object.values%28%29%20Object.values%28%29%20%E6%96%B9%E6%B3%95%E8%BF%94%E5%9B%9E%E4%B8%80%E4%B8%AA%E7%BB%99%E5%AE%9A%E5%AF%B9%E8%B1%A1%E8%87%AA%E8%BA%AB%E5%8F%AF%E6%9E%9A%E4%B8%BE%E5%B1%9E%E6%80%A7%E5%80%BC%E7%9A%84%E6%95%B0%E7%BB%84%EF%BC%8C%E5%85%B6%E9%A1%BA%E5%BA%8F%E4%B8%8E,for...in%20%E5%BE%AA%E7%8E%AF%E6%8F%90%E4%BE%9B%E7%9A%84%E9%A1%BA%E5%BA%8F%E7%9B%B8%E5%90%8C%E3%80%82%202.%20%E4%BD%BF%E7%94%A8%20Object.entries%28%29%20Object.entries%28%29%20%E6%96%B9%E6%B3%95%E8%BF%94%E5%9B%9E%E4%B8%80%E4%B8%AA%E7%BB%99%E5%AE%9A%E5%AF%B9%E8%B1%A1%E8%87%AA%E8%BA%AB%E5%8F%AF%E6%9E%9A%E4%B8%BE%E5%B1%9E%E6%80%A7%E7%9A%84%E9%94%AE%E5%80%BC%E5%AF%B9%E6%95%B0%E7%BB%84%E3%80%82",target:"_blank",rel:"noopener noreferrer"};function K(X,Z){const a=l("ExternalLinkIcon");return o(),c("div",null,[u,r,k,d,n("p",null,[s("（遇到过问题）在vue项目中，后台返回一个类如 ”"),n("a",m,[s("www.aaaaa.com"),t(a)]),s("“ 的 url 时，此时使用 window.open(url，”_blank“) ,发现网页跳转到 "),n("a",v,[s("http://localhost:8080/abc/www.aaaaa.com"),t(a)]),s(" 这样的地址，url作为路径加在了网址后面，明显有错，路径不正常。")]),b,n("p",null,[n("a",g,[s("js中日期格式化常用方法 - 掘金 (juejin.cn)"),t(a)])]),n("p",null,[n("a",h,[s("(207条消息) JS：格式化时间的方法，及获取指定格式的方法_js获取固定格式_前端-如此如此。的博客-CSDN博客"),t(a)])]),y,f,n("p",null,[n("a",w,[s("21 个简单实用的 JavaScript 代码技巧 (qq.com)"),t(a)])]),q,n("p",null,[n("a",E,[s("(210条消息) JS在web页面中调起本地应用程序_js启动本地程序_nine_three_的博客-CSDN博客"),t(a)])]),x,_,n("p",null,[n("a",j,[s("写给5年前端妹子的三万字脚手架教程 - 掘金 (juejin.cn)"),t(a)])]),B,n("p",null,[n("a",A,[s("https://blog.csdn.net/qq_44275213/article/details/110527407"),t(a)])]),S,n("p",null,[n("a",C,[s("https://juejin.cn/post/7371365854012276747"),t(a)])]),n("p",null,[s("参考文章： "),n("a",F,[s("认识WebSocket并搭建服务端_websocket服务器端搭建_Hacah的博客-CSDN博客"),t(a)])]),n("p",null,[s("参考视频： "),n("a",P,[s("【知识点】websocket2_哔哩哔哩_bilibili"),t(a)])]),n("p",null,[s("请求的network详情参考： "),n("a",T,[s("HTML5 WebSocket | 菜鸟教程 (runoob.com)"),t(a)])]),D,n("p",null,[n("a",N,[s("javascript - 面试官：JS如何实现下拉刷新和上拉加载! - JS每日一题 - SegmentFault 思否"),t(a)])]),G,n("h2",O,[I,s(),n("a",L,[s("通过一个onclick实现点击时不同的效果"),t(a)])]),J,n("p",null,[n("a",M,[s("GSAP 中文教程 中文文档 ｜官方文档 官方教程翻译 ｜好奇代码出品"),t(a)])]),n("p",null,[n("a",U,[s("GSAP 3 Cheat Sheet 属性速查"),t(a)])]),W,n("p",null,[n("a",H,[s("https://www.jianshu.com/p/429637a1c80e"),t(a)])]),n("p",null,[n("a",V,[s("https://mikemcl.github.io/decimal.js/"),t(a)])]),R,n("p",null,[n("a",Y,[s("https://blog.csdn.net/gusushantang/article/details/142677823#:~:text=对象转换为数组通常涉及提取对象的属性名和属性值，并将它们组合成数组元素。 以下是几种常见的方法： 1. 使用 Object.values() Object.values() 方法返回一个给定对象自身可枚举属性值的数组，其顺序与,for...in 循环提供的顺序相同。 2. 使用 Object.entries() Object.entries() 方法返回一个给定对象自身可枚举属性的键值对数组。"),t(a)])])])}const Q=e(i,[["render",K],["__file","3.html.vue"]]);export{Q as default};
