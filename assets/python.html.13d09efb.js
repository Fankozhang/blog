import{_ as o}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as p,c as l,a as n,b as s,e as a,f as e,r as i}from"./app.f3382309.js";const d={},c=n("h1",{id:"python",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#python","aria-hidden":"true"},"#"),s(" python")],-1),r={href:"https://www.python.org/downloads/",target:"_blank",rel:"noopener noreferrer"},u={href:"https://www.w3schools.cn/python/default.asp",target:"_blank",rel:"noopener noreferrer"},k={href:"https://www.liaoxuefeng.com/wiki/1016959663602400",target:"_blank",rel:"noopener noreferrer"},m=e('<h2 id="python主要的数据类型和方法" tabindex="-1"><a class="header-anchor" href="#python主要的数据类型和方法" aria-hidden="true">#</a> python主要的数据类型和方法</h2><p>ai生成 请生成一张表格，一列展示python中所有的数据类型，一列展示这种数据类型存储什么类型的数据，一列展示这种数据类型的特点，一列展示这种数据类型有哪些方法，一列展示这种方法的使用方法和作用。</p><table><thead><tr><th>数据类型</th><th>存储类型</th><th>特点</th><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>int</td><td>整数</td><td>精度有限</td><td><code>__add__</code></td><td>加法</td></tr><tr><td>int</td><td>整数</td><td>精度有限</td><td><code>__sub__</code></td><td>减法</td></tr><tr><td>int</td><td>整数</td><td>精度有限</td><td><code>__mul__</code></td><td>乘法</td></tr><tr><td>int</td><td>整数</td><td>精度有限</td><td><code>__truediv__</code></td><td>真除法</td></tr><tr><td>int</td><td>整数</td><td>精度有限</td><td><code>__floordiv__</code></td><td>整除法</td></tr><tr><td>int</td><td>整数</td><td>精度有限</td><td><code>__mod__</code></td><td>取模</td></tr><tr><td>int</td><td>整数</td><td>精度有限</td><td><code>__pow__</code></td><td>幂运算</td></tr><tr><td>int</td><td>整数</td><td>精度有限</td><td><code>__abs__</code></td><td>取绝对值</td></tr><tr><td>int</td><td>整数</td><td>精度有限</td><td><code>__bool__</code></td><td>转换为布尔类型</td></tr><tr><td>float</td><td>浮点数</td><td>精度有限</td><td><code>__add__</code></td><td>加法</td></tr><tr><td>float</td><td>浮点数</td><td>精度有限</td><td><code>__sub__</code></td><td>减法</td></tr><tr><td>float</td><td>浮点数</td><td>精度有限</td><td><code>__mul__</code></td><td>乘法</td></tr><tr><td>float</td><td>浮点数</td><td>精度有限</td><td><code>__truediv__</code></td><td>真除法</td></tr><tr><td>float</td><td>浮点数</td><td>精度有限</td><td><code>__floordiv__</code></td><td>整除法</td></tr><tr><td>float</td><td>浮点数</td><td>精度有限</td><td><code>__mod__</code></td><td>取模</td></tr><tr><td>float</td><td>浮点数</td><td>精度有限</td><td><code>__pow__</code></td><td>幂运算</td></tr><tr><td>float</td><td>浮点数</td><td>精度有限</td><td><code>__abs__</code></td><td>取绝对值</td></tr><tr><td>float</td><td>浮点数</td><td>精度有限</td><td><code>__bool__</code></td><td>转换为布尔类型</td></tr><tr><td>complex</td><td>复数</td><td>实部和虚部都是浮点数</td><td><code>__add__</code></td><td>加法</td></tr><tr><td>complex</td><td>复数</td><td>实部和虚部都是浮点数</td><td><code>__sub__</code></td><td>减法</td></tr><tr><td>complex</td><td>复数</td><td>实部和虚部都是浮点数</td><td><code>__mul__</code></td><td>乘法</td></tr><tr><td>complex</td><td>复数</td><td>实部和虚部都是浮点数</td><td><code>__truediv__</code></td><td>真除法</td></tr><tr><td>complex</td><td>复数</td><td>实部和虚部都是浮点数</td><td><code>__floordiv__</code></td><td>整除法</td></tr><tr><td>complex</td><td>复数</td><td>实部和虚部都是浮点数</td><td><code>__mod__</code></td><td>取模</td></tr><tr><td>complex</td><td>复数</td><td>实部和虚部都是浮点数</td><td><code>__pow__</code></td><td>幂运算</td></tr><tr><td>complex</td><td>复数</td><td>实部和虚部都是浮点数</td><td><code>__abs__</code></td><td>取模</td></tr><tr><td>complex</td><td>复数</td><td>实部和虚部都是浮点数</td><td><code>__bool__</code></td><td>转换为布尔类型</td></tr><tr><td>bool</td><td>布尔值</td><td>只有True和False</td><td><code>__and__</code></td><td>与运算</td></tr><tr><td>bool</td><td>布尔值</td><td>只有True和False</td><td><code>__or__</code></td><td>或运算</td></tr><tr><td>bool</td><td>布尔值</td><td>只有True和False</td><td><code>__not__</code></td><td>非运算</td></tr><tr><td>bool</td><td>布尔值</td><td>只有True和False</td><td><code>__bool__</code></td><td>转换为整数</td></tr><tr><td>str</td><td>字符串</td><td>一串字符</td><td><code>__add__</code></td><td>连接字符串</td></tr><tr><td>str</td><td>字符串</td><td>一串字符</td><td><code>__mul__</code></td><td>重复字符串</td></tr><tr><td>str</td><td>字符串</td><td>一串字符</td><td><code>__getitem__</code></td><td>获取指定位置的字符</td></tr><tr><td>str</td><td>字符串</td><td>一串字符</td><td><code>__len__</code></td><td>获取字符串长度</td></tr><tr><td>str</td><td>字符串</td><td>一串字符</td><td><code>__contains__</code></td><td>判断是否包含子串</td></tr><tr><td>str</td><td>字符串</td><td>一串字符</td><td><code>upper()</code></td><td>转换为大写</td></tr><tr><td>str</td><td>字符串</td><td>一串字符</td><td><code>lower()</code></td><td>转换为小写</td></tr><tr><td>str</td><td>字符串</td><td>一串字符</td><td><code>strip()</code></td><td>去除两端的空格</td></tr><tr><td>str</td><td>字符串</td><td>一串字符</td><td><code>replace()</code></td><td>替换子串</td></tr><tr><td>str</td><td>字符串</td><td>一串字符</td><td><code>split()</code></td><td>按照指定分隔符分割为列表</td></tr><tr><td>list</td><td>列表</td><td>一组有序的元素</td><td><code>__add__</code></td><td>连接列表</td></tr><tr><td>list</td><td>列表</td><td>一组有序的元素</td><td><code>__mul__</code></td><td>重复列表</td></tr><tr><td>list</td><td>列表</td><td>一组有序的元素</td><td><code>__getitem__</code></td><td>获取元素</td></tr><tr><td>list</td><td>列表</td><td>一组有序的元素</td><td><code>__setitem__</code></td><td>设置元素</td></tr><tr><td>list</td><td>列表</td><td>一组有序的元素</td><td><code>__delitem__</code></td><td>删除元素</td></tr><tr><td>list</td><td>列表</td><td>一组有序的元素</td><td><code>__len__</code></td><td>获取列表长度</td></tr><tr><td>list</td><td>列表</td><td>一组有序的元素</td><td><code>__contains__</code></td><td>判断是否包含元素</td></tr><tr><td>list</td><td>列表</td><td>一组有序的元素</td><td><code>append()</code></td><td>在列表末尾添加元素</td></tr><tr><td>list</td><td>列表</td><td>一组有序的元素</td><td><code>extend()</code></td><td>在列表末尾添加另一个列表的元素</td></tr></tbody></table><table><thead><tr><th>类型</th><th>描述</th><th>示例</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>list</td><td>列表</td><td>一组有序的元素</td><td><code>insert()</code></td><td>在指定位置插入元素</td></tr><tr><td>list</td><td>列表</td><td>一组有序的元素</td><td><code>remove()</code></td><td>删除指定元素</td></tr><tr><td>list</td><td>列表</td><td>一组有序的元素</td><td><code>pop()</code></td><td>删除并返回指定位置的元素</td></tr><tr><td>list</td><td>列表</td><td>一组有序的元素</td><td><code>index()</code></td><td>返回指定元素的位置</td></tr><tr><td>list</td><td>列表</td><td>一组有序的元素</td><td><code>count()</code></td><td>返回指定元素在列表中出现的次数</td></tr><tr><td>list</td><td>列表</td><td>一组有序的元素</td><td><code>sort()</code></td><td>对列表进行排序</td></tr><tr><td>list</td><td>列表</td><td>一组有序的元素</td><td><code>reverse()</code></td><td>反转列表</td></tr><tr><td>tuple</td><td>元组</td><td>一组有序的不可变元素</td><td><code>__add__</code></td><td>连接元组</td></tr><tr><td>tuple</td><td>元组</td><td>一组有序的不可变元素</td><td><code>__mul__</code></td><td>重复元组</td></tr><tr><td>tuple</td><td>元组</td><td>一组有序的不可变元素</td><td><code>__getitem__</code></td><td>获取元素</td></tr><tr><td>tuple</td><td>元组</td><td>一组有序的不可变元素</td><td><code>__len__</code></td><td>获取元组长度</td></tr><tr><td>tuple</td><td>元组</td><td>一组有序的不可变元素</td><td><code>__contains__</code></td><td>判断是否包含元素</td></tr><tr><td>set</td><td>集合</td><td>一组无序的元素</td><td><code>__or__</code></td><td>并集</td></tr><tr><td>set</td><td>集合</td><td>一组无序的元素</td><td><code>__and__</code></td><td>交集</td></tr><tr><td>set</td><td>集合</td><td>一组无序的元素</td><td><code>__sub__</code></td><td>差集</td></tr><tr><td>set</td><td>集合</td><td>一组无序的元素</td><td><code>__xor__</code></td><td>对称差集</td></tr><tr><td>set</td><td>集合</td><td>一组无序的元素</td><td><code>__len__</code></td><td>获取集合元素个数</td></tr><tr><td>set</td><td>集合</td><td>一组无序的元素</td><td><code>__contains__</code></td><td>判断元素是否在集合中</td></tr><tr><td>set</td><td>集合</td><td>一组无序的元素</td><td><code>add()</code></td><td>添加元素到集合中</td></tr><tr><td>set</td><td>集合</td><td>一组无序的元素</td><td><code>remove()</code></td><td>删除集合中的指定元素</td></tr><tr><td>set</td><td>集合</td><td>一组无序的元素</td><td><code>pop()</code></td><td>随机删除并返回一个元素</td></tr><tr><td>set</td><td>集合</td><td>一组无序的元素</td><td><code>clear()</code></td><td>清空集合</td></tr><tr><td>dict</td><td>字典</td><td>一组键值对</td><td><code>__len__</code></td><td>获取字典中键值对的个数</td></tr><tr><td>dict</td><td>字典</td><td>一组键值对</td><td><code>__contains__</code></td><td>判断键是否存在于字典中</td></tr><tr><td>dict</td><td>字典</td><td>一组键值对</td><td><code>keys()</code></td><td>获取字典中所有的键</td></tr><tr><td>dict</td><td>字典</td><td>一组键值对</td><td><code>values()</code></td><td>获取字典中所有的值</td></tr><tr><td>dict</td><td>字典</td><td>一组键值对</td><td><code>items()</code></td><td>获取字典中所有的键值对</td></tr><tr><td>dict</td><td>字典</td><td>一组键值对</td><td><code>get()</code></td><td>获取指定键的值，如果不存在则返回默认值</td></tr><tr><td>dict</td><td>字典</td><td>一组键值对</td><td><code>pop()</code></td><td>删除指定键并返回对应的值</td></tr><tr><td>dict</td><td>字典</td><td>一组键值对</td><td><code>popitem()</code></td><td>随机删除并返回一个键值对</td></tr><tr><td>dict</td><td>字典</td><td>一组键值对</td><td><code>clear()</code></td><td>清空字典</td></tr></tbody></table><h2 id="文件操作" tabindex="-1"><a class="header-anchor" href="#文件操作" aria-hidden="true">#</a> 文件操作</h2>',5),v={href:"https://www.runoob.com/python/file-methods.html",target:"_blank",rel:"noopener noreferrer"},b=e(`<p>open() 方法用于打开一个文件，并返回文件对象，在对文件进行处理过程都需要使用到这个函数</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">&#39;r&#39;</span><span class="token punctuation">,</span> buffering<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> errors<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> newline<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> closefd<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> opener<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数说明:</p><ul><li>file: 必需，文件路径（相对或者绝对路径）。</li><li>mode: 可选，文件打开模式</li><li>buffering: 设置缓冲</li><li>encoding: 一般使用utf8</li><li>errors: 报错级别</li><li>newline: 区分换行符</li><li>closefd: 传入的file参数类型</li><li>opener: 设置自定义开启器，开启器的返回值必须是一个打开的文件描述符。</li></ul><p>mode 参数有：</p><table><thead><tr><th style="text-align:left;">模式</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">t</td><td style="text-align:left;">文本模式 (默认)。</td></tr><tr><td style="text-align:left;">x</td><td style="text-align:left;">写模式，新建一个文件，如果该文件已存在则会报错。</td></tr><tr><td style="text-align:left;">b</td><td style="text-align:left;">二进制模式。</td></tr><tr><td style="text-align:left;">+</td><td style="text-align:left;">打开一个文件进行更新(可读可写)。</td></tr><tr><td style="text-align:left;">U</td><td style="text-align:left;">通用换行模式（不推荐）。</td></tr><tr><td style="text-align:left;">r</td><td style="text-align:left;">以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td></tr><tr><td style="text-align:left;">rb</td><td style="text-align:left;">以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。一般用于非文本文件如图片等。</td></tr><tr><td style="text-align:left;">r+</td><td style="text-align:left;">打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td style="text-align:left;">rb+</td><td style="text-align:left;">以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。一般用于非文本文件如图片等。</td></tr><tr><td style="text-align:left;">w</td><td style="text-align:left;">打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td style="text-align:left;">wb</td><td style="text-align:left;">以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td></tr><tr><td style="text-align:left;">w+</td><td style="text-align:left;">打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td style="text-align:left;">wb+</td><td style="text-align:left;">以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td></tr><tr><td style="text-align:left;">a</td><td style="text-align:left;">打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td style="text-align:left;">ab</td><td style="text-align:left;">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td style="text-align:left;">a+</td><td style="text-align:left;">打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td></tr><tr><td style="text-align:left;">ab+</td><td style="text-align:left;">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td></tr></tbody></table><p>默认为文本模式，如果要以二进制模式打开，加上 <strong>b</strong> 。</p><p>file 对象使用 open 函数来创建，下表列出了 file 对象常用的函数：</p>`,8),h=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},"序号"),n("th",{style:{"text-align":"left"}},"方法及描述")])],-1),_=n("td",{style:{"text-align":"left"}},"1",-1),g={style:{"text-align":"left"}},y={href:"https://www.runoob.com/python/file-close.html",target:"_blank",rel:"noopener noreferrer"},f=n("td",{style:{"text-align":"left"}},"2",-1),x={style:{"text-align":"left"}},w={href:"https://www.runoob.com/python/file-flush.html",target:"_blank",rel:"noopener noreferrer"},q=n("td",{style:{"text-align":"left"}},"3",-1),E={style:{"text-align":"left"}},F={href:"https://www.runoob.com/python/file-fileno.html",target:"_blank",rel:"noopener noreferrer"},T=n("td",{style:{"text-align":"left"}},"4",-1),S={style:{"text-align":"left"}},P={href:"https://www.runoob.com/python/file-isatty.html",target:"_blank",rel:"noopener noreferrer"},D=n("td",{style:{"text-align":"left"}},"5",-1),j={style:{"text-align":"left"}},N={href:"https://www.runoob.com/python/file-next.html",target:"_blank",rel:"noopener noreferrer"},C=n("td",{style:{"text-align":"left"}},"6",-1),L={style:{"text-align":"left"}},z={href:"https://www.runoob.com/python/python-file-read.html",target:"_blank",rel:"noopener noreferrer"},A=n("td",{style:{"text-align":"left"}},"7",-1),B={style:{"text-align":"left"}},U={href:"https://www.runoob.com/python/file-readline.html",target:"_blank",rel:"noopener noreferrer"},M=n("td",{style:{"text-align":"left"}},"8",-1),I={style:{"text-align":"left"}},R={href:"https://www.runoob.com/python/file-readlines.html",target:"_blank",rel:"noopener noreferrer"},W=n("td",{style:{"text-align":"left"}},"9",-1),Q={style:{"text-align":"left"}},V={href:"https://www.runoob.com/python/file-seek.html",target:"_blank",rel:"noopener noreferrer"},H=n("td",{style:{"text-align":"left"}},"10",-1),J={style:{"text-align":"left"}},O={href:"https://www.runoob.com/python/file-tell.html",target:"_blank",rel:"noopener noreferrer"},K=n("td",{style:{"text-align":"left"}},"11",-1),X={style:{"text-align":"left"}},Y={href:"https://www.runoob.com/python/file-truncate.html",target:"_blank",rel:"noopener noreferrer"},G=n("td",{style:{"text-align":"left"}},"12",-1),Z={style:{"text-align":"left"}},$={href:"https://www.runoob.com/python/python-file-write.html",target:"_blank",rel:"noopener noreferrer"},nn=n("td",{style:{"text-align":"left"}},"13",-1),sn={style:{"text-align":"left"}},tn={href:"https://www.runoob.com/python/file-writelines.html",target:"_blank",rel:"noopener noreferrer"},an=e(`<h3 id="读取文件" tabindex="-1"><a class="header-anchor" href="#读取文件" aria-hidden="true">#</a> 读取文件</h3><p>简单示例：读取同目录下 a.txt 文件的内容打印出来</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>f<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;a.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># close 方法解除程序对文件的占用</span>
f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过文件路径来获取文件</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>fs<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;D:/pythonDemo/print-test/x.vue&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;r&#39;</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

fs<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 with open() as 可以自动解除对程序的占用</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;a.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f2<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>f2<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="写入" tabindex="-1"><a class="header-anchor" href="#写入" aria-hidden="true">#</a> 写入</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#1.打开文件</span>
f <span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;a.txt&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;w&#39;</span><span class="token punctuation">)</span>
<span class="token comment">#2.文件写入</span>
f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&#39;hello world&#39;</span><span class="token punctuation">)</span>
<span class="token comment">#3.内容刷新</span>
f<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># close方法内置了 flush 的功能</span>
<span class="token comment"># f.close()</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：</p><p>W模式，文件不存在，会创建新文件 W模式，文件存在，会清空原有内容</p><p>直接调用wrte,内容并未真正写入文件，而是会积攒在程序的内存中，称之为缓冲区 当调用flush的时候，内容会真正写入文件 这样做是避免频繁的操作硬盘，导致效率下降（攒一堆，一次性写磁盘）</p><h3 id="追加内容" tabindex="-1"><a class="header-anchor" href="#追加内容" aria-hidden="true">#</a> 追加内容</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#1.打开文件</span>
f <span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;a.txt&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span>
<span class="token comment">#2.文件写入</span>
f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&#39; hello world&#39;</span><span class="token punctuation">)</span>
<span class="token comment">#3.内容刷新</span>
f<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>
f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意事项： a模式，文件不存在，会创建新文件 a模式，文件存在，会在原有内容后面继续写入中 可以使用”\\n”来写出换行符</p><h3 id="文件备份" tabindex="-1"><a class="header-anchor" href="#文件备份" aria-hidden="true">#</a> 文件备份</h3><p>以下将 a.txt 内容备份到 b.txt 文件里，没有 b.txt 文件会自动创建</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>f=open(&#39;a.txt&#39;,&#39;r&#39;)
fs=open(&#39;b.txt&#39;,&#39;w&#39;)
fs.write(f.read())
f.close()
fs.close()
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="异常捕获" tabindex="-1"><a class="header-anchor" href="#异常捕获" aria-hidden="true">#</a> 异常捕获</h2><p>以下为简单的<em>try....except...else</em>的语法： 此处 Exception 是顶层，捕获所有异常</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>try:
    print(1/0)
except Exception as e:
    print(e)
else:
    print(&#39;我是else,是没有异常的时候执行的代码&#39;)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>try-finally 语句无论是否发生异常都将执行最后的代码。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>try:
    f=open(&#39;test.txt&#39;,&#39;r&#39;)
except Exception as e:
    f =open(&#39;test.txt&#39;,&#39;w&#39;)
else:
    print(&#39;没有异常，真开心&#39;)
finally:
    f.close()
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>异常具有传递性</p><h2 id="模块" tabindex="-1"><a class="header-anchor" href="#模块" aria-hidden="true">#</a> 模块</h2>`,25),en={href:"https://blog.csdn.net/Bit_Coders/article/details/119318000",target:"_blank",rel:"noopener noreferrer"},on=e(`<p><strong>什么是模块</strong> Python模块（Module）,是一个Python文件，以.py结尾.模块能定义函数，类和变量,模块里也能包含可执行的代码 模块的作用：python中有很多各种不同的模块，每一个模块都可以帮助我们快速的实现一些功能，比如实现和时间相关的功能就可以使用time模块,我们可以认为一个模块就是一个工具包，每一个工具包中都有各种不同的工具供我们使用,进而实现各种不同的功能. 大白话：模块就是一个Python文件，里面有类、函数、变量等，我们可以拿过来用（导入模块去使用）</p><p><strong>导入方式</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>语法一:import + 模块名
语法二:import + 模块名 + as + 别名
语法三:from + 模块名 + import + *
以上均为全部导入
前两者的区别在于当调用模块名很长时，可选择第二种
后两者的区别在于当使用第二种语法导入函数是需要别名作为前缀如：别名.fun()
而使用第三种语法时可直接使用：fun()
但是当程序中导入多个模块时第三种语法不易区分fun()来自于哪个模块，此时就体现了第二种语法的好处（因为它使用时带前缀即别名)
在python3中使用语法三需要在同一级文件下创建一个__init__包,__init__包要用__all__=[]将需要调用的模块放进去才能用，没有放进去的模块不可在此语法中调用

语法四:from + 模块名 + import + 指定部分（如：fun1、fun2、name2）
#功能定义别名
from + 模块名 + import + 功能 as 别名
这种语法属于部分导入
其缺点和语法三相同,无法分辨所调用来自哪个模块

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1.如何自定义模块并导入？ 在Python代码文件中正常写代码即可，通过import、from关键字和导入Python内置模块一样导入即可使用。 2.main变量的功能是？ if——main——=”——main——”表示，只有当程序是直接执行的才会进入 f内部，如果是被导入的，则f无法进入 3.注意事项 不同模块，同名的功能，如果都被导入，那么后导入的会覆盖先导入的 ——al——变量可以控制import*的时候哪些功能可以被导入</p><h2 id="python包" tabindex="-1"><a class="header-anchor" href="#python包" aria-hidden="true">#</a> python包</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1.什么是Python的包？
包就是一个文件夹，里面可以存放许多Python的模块（代码文件)，通过包，在逻辑上将一批模块归为一类，方便使用。
2.__init__.py文件的作用？
创建包会默认自动创建的文件，通过这个文件来表示一个文件夹是Python的包，而非普通的文件夹。
3.all变量的作用？
同模块中学习到的是一个作用，控import*能够导入的内容


包里面要有  __init__.py  文件
__init__.py  文件中   __all__=[&#39;module1&#39;,&#39;module2&#39;]  控制import * 能访问的模块
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="安装第三方包-pip" tabindex="-1"><a class="header-anchor" href="#安装第三方包-pip" aria-hidden="true">#</a> 安装第三方包~pip</h2>`,7),pn={href:"https://pypi.org/",target:"_blank",rel:"noopener noreferrer"},ln=n("p",null,"第三方包的安装非常简单，我们只需要使用Python内置的pip程序即可。 打开我们许久未见的：命令提示符程序，在里面输入： pip install 包名称 即可通过网络快速安装第三方包",-1),dn={href:"https://pypi",target:"_blank",rel:"noopener noreferrer"},cn=n("p",null,"pip安装第三方库报错pip._vendor.urllib3.exceptions.ReadTimeoutError: HTTPSConnectionPool解决方法",-1),rn={href:"https://blog.csdn.net/qq_40803429/article/details/121671905",target:"_blank",rel:"noopener noreferrer"},un=n("p",null,"经测试，以下安装有效",-1),kn={href:"http://pypi.douban.com/simple/",target:"_blank",rel:"noopener noreferrer"},mn={href:"http://pypi.douban.com",target:"_blank",rel:"noopener noreferrer"},vn=e(`<p>vscode下载的python包通常会存放在电脑的Python安装目录下的Lib/site-packages文件夹中。具体路径可能因操作系统和Python版本而异。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pip install --index-url https://mirrors.aliyun.com/pypi/simple/ &lt;package-name&gt;    实测下载有效
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="python数据和json数据的相互转化" tabindex="-1"><a class="header-anchor" href="#python数据和json数据的相互转化" aria-hidden="true">#</a> Python数据和Json数据的相互转化</h2><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>#导入json模块

import json

#准备符合格式json格式要求的oython数据

data = [{&quot;name&quot;:&quot;老王&quot;,&quot;age&quot;:16},{&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:20}]

#通过json.dumps(data)方法把python数据转化为了json数据,ensure_ascii=False不适用ascll编码

data= json.dumps(data)
data=json.dumps(data,ensure_ascii=False)

#通过json.loads(data)方法把json数据转化为了python数据

data= json.loads(data)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="pyecharts" tabindex="-1"><a class="header-anchor" href="#pyecharts" aria-hidden="true">#</a> pyecharts</h2>`,5),bn={href:"https://pyecharts.org/#/zh-cn/intro",target:"_blank",rel:"noopener noreferrer"},hn={href:"https://gallery.pyecharts.org/#/README",target:"_blank",rel:"noopener noreferrer"},_n=e(`<p>下载pyecharts包；使用时注意pyecharts版本，旧版文档，使用方法不同</p><p>通过pyecharts会在你的workspace中出现一个render的html ,通过使用os模块的os.system(&quot;render.html&quot;)自动打开html文件</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>from pyecharts.charts import Bar
from pyecharts import options as opts
import os
 
bar = Bar()
bar.add_xaxis([&quot;衬衫&quot;, &quot;毛衣&quot;, &quot;领带&quot;, &quot;裤子&quot;, &quot;风衣&quot;, &quot;高跟鞋&quot;, &quot;袜子&quot;])
bar.add_yaxis(&quot;商家A&quot;, [114, 55, 27, 101, 125, 27, 105])
bar.add_yaxis(&quot;商家B&quot;, [57, 134, 137, 129, 145, 60, 49])
bar.set_global_opts(title_opts=opts.TitleOpts(title=&quot;某商场销售情况&quot;))
bar.render()
 
os.system(&quot;render.html&quot;)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="python-类型注解" tabindex="-1"><a class="header-anchor" href="#python-类型注解" aria-hidden="true">#</a> python 类型注解</h2>`,4),gn={href:"https://blog.csdn.net/zy010101/article/details/124319230",target:"_blank",rel:"noopener noreferrer"},yn=n("h2",{id:"python连接mysql",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#python连接mysql","aria-hidden":"true"},"#"),s(" python连接mysql")],-1),fn={href:"https://blog.csdn.net/XC_SunnyBoy/article/details/108546128",target:"_blank",rel:"noopener noreferrer"},xn=e(`<p>安装 pymysql</p><p>pymysql.connect() 方法返回的是Connections模块下的Connection 实例，connect() 方法传参就是在给Connection类的 <em><em>init</em></em> 初始化魔术方法参数，也可以理解为 connect() 方法就是在创建新的 Connetion 类</p><table><thead><tr><th>connect() / Connection初始化 常用参数</th><th>说明</th></tr></thead><tbody><tr><td>host</td><td>主机ip</td></tr><tr><td>user</td><td>用户名</td></tr><tr><td>password</td><td>密码</td></tr><tr><td>database</td><td>数据库</td></tr><tr><td>port</td><td>端口号</td></tr><tr><td>charset</td><td>字符集</td></tr></tbody></table><p><strong>数据库连接</strong></p><p>一定要注意链接的信息要填写准确，否则会报错</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> pymysql

<span class="token comment"># 打开数据库连接   autocommit=True 设置自动提交</span>
db <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">&#39;localhost&#39;</span><span class="token punctuation">,</span>user<span class="token operator">=</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">,</span> database<span class="token operator">=</span><span class="token string">&#39;python&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">,</span>autocommit<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

<span class="token comment"># 使用 cursor() 方法创建一个游标对象 cursor</span>

cursor <span class="token operator">=</span> db<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 数据库操作需要使用Cursor类的实例（即通过 db.cursor() 创建的 cursor 游标对象）提供的 execute() 方法，执行SQL语句，成功则返回结果</span>
<span class="token comment"># 这里插入数据的时候插入的表名有个需要注意的地方，插入表名的时候可以带着库名，否则可能有意想不到的错误</span>
sql <span class="token operator">=</span> <span class="token string">&quot;insert into t_book(book_name,price,stock) values(&#39;西游记&#39;,100,100)&quot;</span>
s<span class="token operator">=</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>
<span class="token comment"># 修改数据时，通过commit确认</span>
<span class="token comment"># autocommit=True 设置自动提交后，可以不用这一步</span>
db<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>

sql2<span class="token operator">=</span><span class="token string">&#39;select * from t_book&#39;</span>
cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql2<span class="token punctuation">)</span>
<span class="token comment">#调用了fetchall方法：查询时获取结果集中的所有行，一行构成一个元组，然后再将这些元组返回（即嵌套元组）</span>
res<span class="token operator">=</span>cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>


<span class="token comment"># 关闭数据库连接</span>
db<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>获取查询结果集的方法</strong></p><p>当调用 cursor.execute(sql) 方法查询数据的时候，如果执行成功，获取查询的结果集的方法有</p><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>fetchone()</td><td>获取结果集的下一行</td></tr><tr><td>fetchmany(size=None)</td><td>size指定返回的行数,None则返回空元组</td></tr><tr><td>fetchall()</td><td>返回剩下的所有行,如果走到末尾,就返回空元组,否则返回一个元组,其元素是每一行的记录封装的一个元组</td></tr><tr><td>cursor.rownumber</td><td>返回当前行号.可以修改,支持负数</td></tr><tr><td>cursor.rowcount</td><td>返回的总行数</td></tr></tbody></table><p>注意： fetch操作的是结果集，结果集是保存在客户端的，也就是说fetch的时候，查询已经结束了</p><h2 id="python爬虫" tabindex="-1"><a class="header-anchor" href="#python爬虫" aria-hidden="true">#</a> python爬虫</h2>`,11),wn={href:"https://juejin.cn/post/6999135569322180621",target:"_blank",rel:"noopener noreferrer"},qn={href:"https://juejin.cn/post/6844903789825114126",target:"_blank",rel:"noopener noreferrer"},En={href:"https://juejin.cn/post/6844903791544762381",target:"_blank",rel:"noopener noreferrer"},Fn=e(`<h3 id="使用requests库-get请求" tabindex="-1"><a class="header-anchor" href="#使用requests库-get请求" aria-hidden="true">#</a> 使用requests库 （get请求）</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> requests
<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup    <span class="token comment"># pip install requests beautifulsoup4</span>

<span class="token comment"># 目标url</span>
url <span class="token operator">=</span> <span class="token string">&quot;https://www.baidu.com&quot;</span>

<span class="token comment"># 向目标url发送get请求</span>
response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>

<span class="token comment"># 打印响应内容</span>
response<span class="token punctuation">.</span>encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span>  <span class="token comment">#设置编码格式</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 注意这里！不设置编码格式时，推测出的编码字符集</span>


<span class="token comment"># 检查请求是否成功</span>
<span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>
    <span class="token comment"># 解析HTML</span>
    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">,</span> <span class="token string">&#39;html.parser&#39;</span><span class="token punctuation">)</span>
    <span class="token comment"># 提取数据</span>
    <span class="token comment"># 假设我们要找的是所有的段落&lt;a&gt;标签</span>
    paragraphs <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span>
    <span class="token comment"># 打印每个段落的内容</span>
    <span class="token keyword">for</span> paragraph <span class="token keyword">in</span> paragraphs<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>paragraph<span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Failed to retrieve the page. Status code: </span><span class="token interpolation"><span class="token punctuation">{</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    

<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>url<span class="token punctuation">)</span>							<span class="token comment"># 打印响应的url</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span>					<span class="token comment"># 打印响应的状态码</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>request<span class="token punctuation">.</span>headers<span class="token punctuation">)</span>				<span class="token comment"># 打印响应对象的请求头</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>headers<span class="token punctuation">)</span>						<span class="token comment"># 打印响应头</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>request<span class="token punctuation">.</span>_cookies<span class="token punctuation">)</span>			<span class="token comment"># 打印请求携带的cookies</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span>						<span class="token comment"># 打印响应中携带的cookies</span>

<span class="token comment"># 把页面源码写入文件中</span>
f<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;baidu.html&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;w&#39;</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">&#39;UTF-8&#39;</span><span class="token punctuation">)</span>
f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
f<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>
f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># get方法有参</span>
cs_url <span class="token operator">=</span> <span class="token string">&#39;http://www.so.com/s&#39;</span>
param  <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;ie&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;q&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;query&#39;</span><span class="token punctuation">}</span>
r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get <span class="token punctuation">(</span>cs_url<span class="token punctuation">,</span> params <span class="token operator">=</span> param<span class="token punctuation">)</span>
<span class="token keyword">print</span> r<span class="token punctuation">.</span>url
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1.response.text是requests模块按照chardet模块推测出的编码字符集进行解码的结果</p><p>2.网络传输的字符串都是bytes类型的，所以response.text = response.content.decode(&#39;推测出的编码字符集&#39;)</p><h3 id="post请求" tabindex="-1"><a class="header-anchor" href="#post请求" aria-hidden="true">#</a> post请求</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> requests
<span class="token comment"># 目标url</span>
url <span class="token operator">=</span> <span class="token string">&quot;https://www.oschina.net/MjAyMi8xLzE2/v1/search/index&quot;</span>
<span class="token comment"># 请求体</span>
data<span class="token operator">=</span><span class="token punctuation">{</span>
    <span class="token string">&quot;from&quot;</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token string">&quot;keyword&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;python&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;size&quot;</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>
    <span class="token string">&quot;type&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;DEFAULT_ALL&quot;</span>
<span class="token punctuation">}</span>
<span class="token comment">#请求头</span>
headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;User-Agent&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36 Edg/111.0.1661.62&quot;</span><span class="token punctuation">}</span>
<span class="token comment"># 向目标url发送get请求</span>
response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
<span class="token comment">#如果返回的数据是json,可以直接resp.json()</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 打印列表数据</span>
<span class="token keyword">for</span> item <span class="token keyword">in</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="请求分页数据示例" tabindex="-1"><a class="header-anchor" href="#请求分页数据示例" aria-hidden="true">#</a> 请求分页数据示例：</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> requests
<span class="token keyword">import</span> time

<span class="token keyword">def</span> <span class="token function">fetch_and_print_page_data</span><span class="token punctuation">(</span>base_url<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># url = f&quot;{base_url}?page={page}&quot;</span>
    <span class="token comment"># response = requests.get(url)</span>
    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>base_url<span class="token punctuation">,</span>params<span class="token operator">=</span>params<span class="token punctuation">)</span>
    
    <span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>
        data <span class="token operator">=</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> item <span class="token keyword">in</span> data<span class="token punctuation">[</span><span class="token string">&#39;rows&#39;</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>params<span class="token punctuation">[</span><span class="token string">&#39;pageNum&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Failed to retrieve page </span><span class="token interpolation"><span class="token punctuation">{</span>params<span class="token punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token punctuation">{</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

<span class="token comment"># 基础URL</span>
base_url <span class="token operator">=</span> <span class="token string">&quot;https://example.com/list&quot;</span>

<span class="token comment"># 初始页码</span>
params <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;pageNum&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token string">&#39;pageSize&#39;</span><span class="token punctuation">:</span> <span class="token number">10</span>
<span class="token punctuation">}</span>

<span class="token comment"># 循环请求数据</span>
<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    fetch_and_print_page_data<span class="token punctuation">(</span>base_url<span class="token punctuation">,</span> params<span class="token punctuation">)</span>
    params<span class="token punctuation">[</span><span class="token string">&#39;pageNum&#39;</span><span class="token punctuation">]</span><span class="token operator">=</span>params<span class="token punctuation">[</span><span class="token string">&#39;pageNum&#39;</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 等待1秒</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="上传文件" tabindex="-1"><a class="header-anchor" href="#上传文件" aria-hidden="true">#</a> 上传文件</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>url = &#39;https://httpbin.org/post&#39;
files = {&#39;file&#39;: open(&#39;image.png&#39;, &#39;rb&#39;)}
response = requests.post(url, files=files)
print(response.text)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="pandas数据处理" tabindex="-1"><a class="header-anchor" href="#pandas数据处理" aria-hidden="true">#</a> pandas数据处理</h2>`,11),Tn={href:"https://pandas.ac.cn/docs/getting_started/index.html#getting-started",target:"_blank",rel:"noopener noreferrer"},Sn={href:"https://juejin.cn/post/7303924750655930383?searchId=202408101102496C05153C03052860F91A",target:"_blank",rel:"noopener noreferrer"},Pn={href:"https://blog.csdn.net/Strive_For_Future/article/details/126710810",target:"_blank",rel:"noopener noreferrer"},Dn=e(`<p>下载：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pip install pandas
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="pandas-数据格式-series-dataframe" tabindex="-1"><a class="header-anchor" href="#pandas-数据格式-series-dataframe" aria-hidden="true">#</a> pandas 数据格式 Series DataFrame</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd

<span class="token comment"># 创建Series</span>
s <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">&#39;8&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>   <span class="token comment"># 输出Series</span>


<span class="token comment"># DataFrame</span>
data <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;Name&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;Tom&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Nick&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Tom&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&#39;Age&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&#39;City&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;New York&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;London&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Berlin&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Paris&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="读取-excel-文件数据" tabindex="-1"><a class="header-anchor" href="#读取-excel-文件数据" aria-hidden="true">#</a> 读取 excel 文件数据</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd

<span class="token comment"># 从Excel文件读取数据  (可能需要 pip install xlrd)</span>
dExcel <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">&#39;work.xls&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># dExcel = pd.read_excel(&#39;work.xls&#39;,sheet_name=&#39;Sheet2&#39;)   有多个sheet页可以指定读取的 sheet 名称,不加这个参数读取第一个 sheet</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>dExcel<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>dExcel<span class="token punctuation">.</span>duplicated<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 检测是否有重复值</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>dExcel<span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 删除重复值</span>

<span class="token comment"># 读取所有工作表(所有sheet)    想要读取所有的sheet，可以将sheet_name设置为None，这样它会返回一个字典，其中键是sheet的名字，值是对应的DataFrame。</span>
all_sheets_data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">&#39;work.xls&#39;</span><span class="token punctuation">,</span> sheet_name<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>
<span class="token comment"># 现在all_sheets_data是一个字典，每个键对应一个工作表的名字，值是一个DataFrame</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;all_sheets_data&#39;</span><span class="token punctuation">,</span>all_sheets_data<span class="token punctuation">)</span>
<span class="token keyword">for</span> sheet_name<span class="token punctuation">,</span> data <span class="token keyword">in</span> all_sheets_data<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Data from </span><span class="token interpolation"><span class="token punctuation">{</span>sheet_name<span class="token punctuation">}</span></span><span class="token string">:&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;\\n---\\n&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pandas如何将数据导出到excel" tabindex="-1"><a class="header-anchor" href="#pandas如何将数据导出到excel" aria-hidden="true">#</a> pandas如何将数据导出到excel</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd
<span class="token comment"># DataFrame</span>
data <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;姓名&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;Tom&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Nick&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Tom&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&#39;年龄&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&#39;城市&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;New York&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;London&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Berlin&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Paris&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span>

<span class="token comment"># 指定输出文件名</span>
output_file <span class="token operator">=</span> <span class="token string">&#39;output.xlsx&#39;</span>
<span class="token comment"># 使用openpyxl作为引擎      pip install  openpyxl</span>
<span class="token keyword">with</span> pd<span class="token punctuation">.</span>ExcelWriter<span class="token punctuation">(</span>output_file<span class="token punctuation">,</span> engine<span class="token operator">=</span><span class="token string">&#39;openpyxl&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> writer<span class="token punctuation">:</span>
    df<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span>writer<span class="token punctuation">,</span> sheet_name<span class="token operator">=</span><span class="token string">&#39;Sheet1&#39;</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
    df<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span>writer<span class="token punctuation">,</span> sheet_name<span class="token operator">=</span><span class="token string">&#39;Sheet2&#39;</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>  <span class="token comment">#可以设置不同的数据存入不同的 sheet 表里</span>
    df<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">&#39;output.csv&#39;</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>   <span class="token comment"># 可以将DataFrame保存为CSV文件</span>
    
<span class="token comment"># 如果你想使用xlsxwriter作为引擎，可以这样：    pip install xlsxwriter</span>
<span class="token comment"># with pd.ExcelWriter(output_file, engine=&#39;xlsxwriter&#39;) as writer:</span>
<span class="token comment">#     df.to_excel(writer, sheet_name=&#39;Sheet1&#39;, index=False)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们使用<code>pd.ExcelWriter</code>来创建一个Excel文件的写入器，指定了输出文件的名称以及使用的引擎（这里是<code>openpyxl</code>）。然后，我们调用<code>df.to_excel</code>方法将DataFrame写入到Excel文件中，指定工作表的名称为&#39;Sheet1&#39;，并且不包含索引列（<code>index=False</code>）。</p><p>如果你的DataFrame有多个，并且你想将它们写入同一个Excel文件的不同工作表中，可以多次调用<code>to_excel</code>方法，每次指定不同的工作表名称</p><p>记得在完成所有写入操作后调用<code>writer.save()</code>或使用<code>with</code>语句来自动关闭文件。在上面的例子中，由于使用了<code>with</code>语句，所以不需要显式调用<code>save()</code>方法。</p><h3 id="从接口获取数据导出到excel文件" tabindex="-1"><a class="header-anchor" href="#从接口获取数据导出到excel文件" aria-hidden="true">#</a> 从接口获取数据导出到excel文件</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> requests
<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd

<span class="token comment"># 目标url</span>
url <span class="token operator">=</span> <span class="token string">&quot;https://abc.com/list&quot;</span>
data<span class="token operator">=</span><span class="token punctuation">{</span>
    <span class="token string">&quot;pageNum&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;pageSize&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;10&quot;</span>
<span class="token punctuation">}</span>
<span class="token comment"># 向目标url发送get请求</span>
response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>params<span class="token operator">=</span>data<span class="token punctuation">)</span>

 <span class="token comment"># 检查请求是否成功</span>
<span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>
    <span class="token comment"># 解析JSON数据</span>
    getData <span class="token operator">=</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>getData<span class="token punctuation">[</span><span class="token string">&#39;rows&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment"># 接口获取导出的表格数据</span>
    <span class="token comment"># 将数据转换为pandas DataFrame</span>
    df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>getData<span class="token punctuation">[</span><span class="token string">&#39;rows&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

    <span class="token comment"># 写入Excel文件</span>
    <span class="token keyword">with</span> pd<span class="token punctuation">.</span>ExcelWriter<span class="token punctuation">(</span><span class="token string">&#39;outputData.xlsx&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> writer<span class="token punctuation">:</span>
        df<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span>writer<span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>  <span class="token comment"># index=False表示不写入索引列</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Data has been written to Excel successfully.&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Failed to retrieve data: </span><span class="token interpolation"><span class="token punctuation">{</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="读取-csv-文件" tabindex="-1"><a class="header-anchor" href="#读取-csv-文件" aria-hidden="true">#</a> 读取 csv 文件</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd
<span class="token comment"># 读取csv文件要设置编码格式，chardet可以用来获取文件编码，需要下载 pip install chardet</span>
<span class="token keyword">import</span> chardet
<span class="token comment"># 读取文件并检测编码</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;work.csv&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;rb&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    result <span class="token operator">=</span> chardet<span class="token punctuation">.</span>detect<span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># 输出检测到的编码</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Detected encoding:&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">[</span><span class="token string">&#39;encoding&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment"># 通过文件编码读取 csv 文件的数据</span>
dCsv<span class="token operator">=</span>pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">&#39;work.csv&#39;</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span>result<span class="token punctuation">[</span><span class="token string">&#39;encoding&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>dCsv<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="python脚本" tabindex="-1"><a class="header-anchor" href="#python脚本" aria-hidden="true">#</a> python脚本</h2><h3 id="连接mysql数据库-执行sql命令-并返回执行结果" tabindex="-1"><a class="header-anchor" href="#连接mysql数据库-执行sql命令-并返回执行结果" aria-hidden="true">#</a> 连接mysql数据库，执行sql命令，并返回执行结果</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pip install mysql-connector-python
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> mysql<span class="token punctuation">.</span>connector
<span class="token keyword">from</span> mysql<span class="token punctuation">.</span>connector <span class="token keyword">import</span> Error

<span class="token keyword">def</span> <span class="token function">connect_and_execute_sql</span><span class="token punctuation">(</span>host_name<span class="token punctuation">,</span> user_name<span class="token punctuation">,</span> password<span class="token punctuation">,</span> database_name<span class="token punctuation">,</span> sql_commands<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 创建连接</span>
    connection <span class="token operator">=</span> <span class="token boolean">None</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        connection <span class="token operator">=</span> mysql<span class="token punctuation">.</span>connector<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>
            host<span class="token operator">=</span>host_name<span class="token punctuation">,</span>
            user<span class="token operator">=</span>user_name<span class="token punctuation">,</span>
            passwd<span class="token operator">=</span>password<span class="token punctuation">,</span>
            database<span class="token operator">=</span>database_name
        <span class="token punctuation">)</span>
        
        <span class="token keyword">if</span> connection<span class="token punctuation">.</span>is_connected<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Connected to MySQL Database&quot;</span><span class="token punctuation">)</span>
            
            <span class="token comment"># 创建游标对象</span>
            cursor <span class="token operator">=</span> connection<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>
            
            <span class="token comment"># 执行多条SQL命令</span>
            <span class="token keyword">for</span> sql_command <span class="token keyword">in</span> sql_commands<span class="token punctuation">:</span>
                cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql_command<span class="token punctuation">)</span>
                
                <span class="token comment"># 如果是INSERT、UPDATE或DELETE操作，需要提交事务</span>
                <span class="token keyword">if</span> <span class="token string">&quot;INSERT&quot;</span> <span class="token keyword">in</span> sql_command <span class="token keyword">or</span> <span class="token string">&quot;UPDATE&quot;</span> <span class="token keyword">in</span> sql_command <span class="token keyword">or</span> <span class="token string">&quot;DELETE&quot;</span> <span class="token keyword">in</span> sql_command<span class="token punctuation">:</span>
                    connection<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>
                
                <span class="token comment"># 打印执行结果</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Executed: </span><span class="token interpolation"><span class="token punctuation">{</span>sql_command<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
                <span class="token keyword">if</span> cursor<span class="token punctuation">.</span>with_rows<span class="token punctuation">:</span>
                    <span class="token comment"># 如果查询返回了结果集</span>
                    <span class="token keyword">for</span> row <span class="token keyword">in</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                        <span class="token keyword">print</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span>
                <span class="token keyword">else</span><span class="token punctuation">:</span>
                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Affected rows: </span><span class="token interpolation"><span class="token punctuation">{</span>cursor<span class="token punctuation">.</span>rowcount<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
                
                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;-&quot;</span> <span class="token operator">*</span> <span class="token number">40</span><span class="token punctuation">)</span>
            
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;All SQL commands executed successfully.&quot;</span><span class="token punctuation">)</span>
    
    <span class="token keyword">except</span> Error <span class="token keyword">as</span> e<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;The error &#39;</span><span class="token interpolation"><span class="token punctuation">{</span>e<span class="token punctuation">}</span></span><span class="token string">&#39; occurred&quot;</span></span><span class="token punctuation">)</span>
    
    <span class="token keyword">finally</span><span class="token punctuation">:</span>
        <span class="token comment"># 关闭连接</span>
        <span class="token keyword">if</span> connection <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span> <span class="token keyword">and</span> connection<span class="token punctuation">.</span>is_connected<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            cursor<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
            connection<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;MySQL connection is closed&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># 您的数据库连接信息</span>
host_name <span class="token operator">=</span> <span class="token string">&quot;localhost&quot;</span>
user_name <span class="token operator">=</span> <span class="token string">&quot;root&quot;</span>
password <span class="token operator">=</span> <span class="token string">&quot;zf202111&quot;</span>
database_name <span class="token operator">=</span> <span class="token string">&quot;example&quot;</span>

<span class="token comment"># SQL命令列表</span>
sql_commands <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    INSERT INTO sys_user (username, password,nickname) VALUES (&#39;testUser&#39;, &#39;123456&#39;,&#39;测试数据&#39;);
    &quot;&quot;&quot;</span><span class="token punctuation">,</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    SELECT * FROM sys_user;
    &quot;&quot;&quot;</span>
    
<span class="token punctuation">]</span>

<span class="token comment"># 调用函数</span>
connect_and_execute_sql<span class="token punctuation">(</span>host_name<span class="token punctuation">,</span> user_name<span class="token punctuation">,</span> password<span class="token punctuation">,</span> database_name<span class="token punctuation">,</span> sql_commands<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19);function jn(Nn,Cn){const t=i("ExternalLinkIcon");return p(),l("div",null,[c,n("p",null,[s("下载： "),n("a",r,[s("Download Python | Python.org"),a(t)]),s(" 安装时勾选 add to path")]),n("p",null,[n("a",u,[s("Python 教程 (w3schools.cn)"),a(t)])]),n("p",null,[n("a",k,[s("Python教程 - 廖雪峰的官方网站 (liaoxuefeng.com)"),a(t)])]),m,n("p",null,[n("a",v,[s("Python File(文件) 方法 | 菜鸟教程 (runoob.com)"),a(t)])]),b,n("table",null,[h,n("tbody",null,[n("tr",null,[_,n("td",g,[n("a",y,[s("file.close()"),a(t)]),s("关闭文件。关闭后文件不能再进行读写操作。")])]),n("tr",null,[f,n("td",x,[n("a",w,[s("file.flush()"),a(t)]),s("刷新文件内部缓冲，直接把内部缓冲区的数据立刻写入文件, 而不是被动的等待输出缓冲区写入。")])]),n("tr",null,[q,n("td",E,[n("a",F,[s("file.fileno()"),a(t)]),s("返回一个整型的文件描述符(file descriptor FD 整型), 可以用在如os模块的read方法等一些底层操作上。")])]),n("tr",null,[T,n("td",S,[n("a",P,[s("file.isatty()"),a(t)]),s("如果文件连接到一个终端设备返回 True，否则返回 False。")])]),n("tr",null,[D,n("td",j,[n("a",N,[s("file.next()"),a(t)]),s("返回文件下一行。")])]),n("tr",null,[C,n("td",L,[s("[file.read("),n("a",z,[s("size])"),a(t)]),s("从文件读取指定的字节数，如果未给定或为负则读取所有。")])]),n("tr",null,[A,n("td",B,[s("[file.readline("),n("a",U,[s("size])"),a(t)]),s('读取整行，包括 "\\n" 字符。')])]),n("tr",null,[M,n("td",I,[s("[file.readlines("),n("a",R,[s("sizeint])"),a(t)]),s("读取所有行并返回列表，若给定sizeint>0，则是设置一次读多少字节，这是为了减轻读取压力。")])]),n("tr",null,[W,n("td",Q,[s("[file.seek(offset"),n("a",V,[s(", whence])"),a(t)]),s("设置文件当前位置")])]),n("tr",null,[H,n("td",J,[n("a",O,[s("file.tell()"),a(t)]),s("返回文件当前位置。")])]),n("tr",null,[K,n("td",X,[s("[file.truncate("),n("a",Y,[s("size])"),a(t)]),s("截取文件，截取的字节通过size指定，默认为当前文件位置。")])]),n("tr",null,[G,n("td",Z,[n("a",$,[s("file.write(str)"),a(t)]),s("将字符串写入文件，返回的是写入的字符长度。")])]),n("tr",null,[nn,n("td",sn,[n("a",tn,[s("file.writelines(sequence)"),a(t)]),s("向文件写入一个序列字符串列表，如果需要换行则要自己加入每行的换行符。")])])])]),an,n("p",null,[n("a",en,[s("详解Python模块化——模块（Modules）和包（Packages）_python包与模块-CSDN博客"),a(t)])]),on,n("p",null,[n("a",pn,[s("PyPI · The Python Package Index"),a(t)])]),ln,n("p",null,[s("我们可以通过如下命令，让其连接国内的网站进行包的安装： pip install -i "),n("a",dn,[s("https://pypi"),a(t)]),s("..tuna.tsinghua.edu.cn/simple 包名称 (报错了，如下)")]),cn,n("p",null,[s("[(205条消息) pip安装第三方库报错pip._vendor.urllib3.exceptions.ReadTimeoutError: HTTPSConnectionPool解决方法_pip._vendor.urllib3.exceptions.sslerror: "),n("a",rn,[s("ssl: dec_qq_doooppooo的博客-CSDN博客"),a(t)])]),un,n("p",null,[s("pip --default-timeout=100 install 库名称 -i "),n("a",kn,[s("http://pypi.douban.com/simple/"),a(t)]),s(" --trusted-host "),n("a",mn,[s("pypi.douban.com"),a(t)])]),vn,n("p",null,[s("文档： "),n("a",bn,[s("简介 - pyecharts - A Python Echarts Plotting Library built with love."),a(t)])]),n("p",null,[s("pyecharts-gallery 官方示例库 "),n("a",hn,[s("中文简介 - Document (pyecharts.org)"),a(t)])]),_n,n("p",null,[n("a",gn,[s("(205条消息) Python类型注解_python 注解_zy010101的博客-CSDN博客"),a(t)])]),yn,n("p",null,[s("参考： "),n("a",fn,[s("(205条消息) pymysql详解（connect连接、游标cursor、获取查询结果集、获取实时数据、解决查询数据为历史数据问题、insert into需要注意的地方）_pymysql cursor_XC_SunnyBoy的博客-CSDN博客"),a(t)])]),xn,n("p",null,[s("参考： "),n("a",wn,[s("入门学Python一定要知道的requests模块安装及使用 - 掘金 (juejin.cn)"),a(t)])]),n("p",null,[n("a",qn,[s("Python网络请求库Requests，妈妈再也不会担心我的网络请求了(一) - 掘金 (juejin.cn)"),a(t)])]),n("p",null,[n("a",En,[s("Python网络请求库Requests，妈妈再也不会担心我的网络请求了(二) - 掘金 (juejin.cn)"),a(t)])]),Fn,n("p",null,[n("a",Tn,[s("入门 — pandas 2.2.1 文档 - pandas 中文"),a(t)])]),n("p",null,[n("a",Sn,[s("https://juejin.cn/post/7303924750655930383?searchId=202408101102496C05153C03052860F91A"),a(t)])]),n("p",null,[n("a",Pn,[s("pandas用法-全网最详细教程_pandas详细教程-CSDN博客"),a(t)])]),Dn])}const An=o(d,[["render",jn],["__file","python.html.vue"]]);export{An as default};
